{
  "version": 3,
  "sources": ["../../node_modules/@dfinity/agent/src/index.ts", "../../node_modules/@dfinity/agent/src/actor.ts", "../../node_modules/@dfinity/agent/src/agent/index.ts", "../../node_modules/@dfinity/agent/src/agent/api.ts", "../../node_modules/@dfinity/agent/src/agent/http/index.ts", "../../node_modules/@dfinity/agent/src/errors.ts", "../../node_modules/@dfinity/agent/src/auth.ts", "../../node_modules/@dfinity/agent/src/request_id.ts", "../../node_modules/@dfinity/agent/src/utils/buffer.ts", "../../node_modules/@dfinity/agent/src/constants.ts", "../../node_modules/@dfinity/agent/src/cbor.ts", "../../node_modules/@dfinity/cbor/src/decode/decoding-error.ts", "../../node_modules/@dfinity/cbor/src/cbor-value.ts", "../../node_modules/@dfinity/cbor/src/util/constants.ts", "../../node_modules/@dfinity/cbor/src/util/nil.ts", "../../node_modules/@dfinity/cbor/src/util/typed-array.ts", "../../node_modules/@dfinity/cbor/src/decode/decode.ts", "../../node_modules/@dfinity/cbor/src/encode/encoding-error.ts", "../../node_modules/@dfinity/cbor/src/encode/encode.ts", "../../node_modules/@dfinity/agent/src/agent/http/transforms.ts", "../../node_modules/@dfinity/agent/src/agent/http/types.ts", "../../node_modules/@dfinity/agent/src/utils/random.ts", "../../node_modules/@dfinity/agent/src/canisterStatus/index.ts", "../../node_modules/@dfinity/agent/src/certificate.ts", "../../node_modules/@dfinity/agent/src/utils/bls.ts", "../../node_modules/@noble/curves/src/bls12-381.ts", "../../node_modules/@noble/curves/src/abstract/bls.ts", "../../node_modules/@noble/curves/src/utils.ts", "../../node_modules/@noble/curves/src/abstract/curve.ts", "../../node_modules/@noble/curves/src/abstract/modular.ts", "../../node_modules/@noble/curves/src/abstract/hash-to-curve.ts", "../../node_modules/@noble/curves/src/abstract/weierstrass.ts", "../../node_modules/@noble/hashes/src/hmac.ts", "../../node_modules/@noble/curves/src/abstract/tower.ts", "../../node_modules/@dfinity/agent/src/utils/leb.ts", "../../node_modules/@noble/curves/src/ed25519.ts", "../../node_modules/@noble/curves/src/abstract/edwards.ts", "../../node_modules/@noble/curves/src/abstract/montgomery.ts", "../../node_modules/@dfinity/agent/src/utils/expirableMap.ts", "../../node_modules/@dfinity/agent/src/public_key.ts", "../../node_modules/@dfinity/agent/src/der.ts", "../../node_modules/@dfinity/agent/src/observable.ts", "../../node_modules/@dfinity/agent/src/polling/backoff.ts", "../../node_modules/@dfinity/agent/src/polling/index.ts", "../../node_modules/@dfinity/agent/src/polling/strategy.ts", "../../node_modules/@dfinity/agent/src/fetch_candid.ts"],
  "sourcesContent": ["export * from './actor.ts';\nexport * from './agent/index.ts';\nexport * from './agent/http/transforms.ts';\nexport * from './agent/http/types.ts';\nexport * from './auth.ts';\nexport * from './certificate.ts';\nexport {\n  IC_REQUEST_DOMAIN_SEPARATOR,\n  IC_RESPONSE_DOMAIN_SEPARATOR,\n  IC_REQUEST_AUTH_DELEGATION_DOMAIN_SEPARATOR,\n} from './constants.ts';\nexport * from './der.ts';\nexport * from './errors.ts';\nexport * from './fetch_candid.ts';\nexport * from './observable.ts';\nexport * from './public_key.ts';\nexport * from './request_id.ts';\nexport * from './utils/bls.ts';\nexport * from './utils/buffer.ts';\nexport * from './utils/random.ts';\nexport * as polling from './polling/index.ts';\nimport * as CanisterStatus from './canisterStatus/index.ts';\nexport { CanisterStatus };\n/**\n * The CanisterStatus utility is used to request structured data directly from the IC public API. This data can be accessed using agent.readState, but CanisterStatus provides a helpful abstraction with some known paths.\n *\n * You can request a canisters Controllers, ModuleHash, Candid interface, Subnet, or Time, or provide a custom path {@link CanisterStatus.CustomPath} and pass arbitrary buffers for valid paths identified in https://internetcomputer.org/docs/current/references/ic-interface-spec.\n *\n * The primary method for this namespace is {@link CanisterStatus.request}\n */\n\nexport { Cbor, ToCborValue } from './cbor.ts';\nexport * from './polling/index.ts';\n", "import {\n  type Agent,\n  type HttpDetailsResponse,\n  isV2ResponseBody,\n  isV3ResponseBody,\n  QueryResponseStatus,\n} from './agent/index.ts';\nimport {\n  CertifiedRejectErrorCode,\n  ExternalError,\n  InputError,\n  MissingCanisterIdErrorCode,\n  MissingRootKeyErrorCode,\n  RejectError,\n  UncertifiedRejectErrorCode,\n  UncertifiedRejectUpdateErrorCode,\n  UnexpectedErrorCode,\n  UnknownError,\n} from './errors.ts';\nimport { IDL } from '@dfinity/candid';\nimport { pollForResponse, type PollingOptions, DEFAULT_POLLING_OPTIONS } from './polling/index.ts';\nimport { Principal } from '@dfinity/principal';\nimport { Certificate, type CreateCertificateOptions, lookupResultToBuffer } from './certificate.ts';\nimport { HttpAgent } from './agent/http/index.ts';\nimport { utf8ToBytes } from '@noble/hashes/utils';\n\n/**\n * Configuration to make calls to the Replica.\n */\nexport interface CallConfig {\n  /**\n   * An agent to use in this call, otherwise the actor or call will try to discover the\n   * agent to use.\n   */\n  agent?: Agent;\n\n  /**\n   * Options for controlling polling behavior.\n   */\n  pollingOptions?: PollingOptions;\n\n  /**\n   * The canister ID of this Actor.\n   */\n  canisterId?: string | Principal;\n\n  /**\n   * The effective canister ID. This should almost always be ignored.\n   */\n  effectiveCanisterId?: Principal;\n\n  /**\n   * The nonce to use for this call. This is used to prevent replay attacks.\n   */\n  nonce?: Uint8Array;\n}\n\n/**\n * Configuration that can be passed to customize the Actor behaviour.\n */\nexport interface ActorConfig extends CallConfig {\n  /**\n   * The Canister ID of this Actor. This is required for an Actor.\n   */\n  canisterId: string | Principal;\n\n  /**\n   * An override function for update calls' CallConfig. This will be called on every calls.\n   */\n  callTransform?(\n    methodName: string,\n    args: unknown[],\n    callConfig: CallConfig,\n  ): Partial<CallConfig> | void;\n\n  /**\n   * An override function for query calls' CallConfig. This will be called on every query.\n   */\n  queryTransform?(\n    methodName: string,\n    args: unknown[],\n    callConfig: CallConfig,\n  ): Partial<CallConfig> | void;\n\n  /**\n   * Polyfill for BLS Certificate verification in case wasm is not supported\n   */\n  blsVerify?: CreateCertificateOptions['blsVerify'];\n\n  /**\n   * Polling options to use when making update calls. This will override the default DEFAULT_POLLING_OPTIONS.\n   */\n  pollingOptions?: PollingOptions;\n}\n\n// TODO: move this to proper typing when Candid support TypeScript.\n/**\n * A subclass of an actor. Actor class itself is meant to be a based class.\n */\nexport type ActorSubclass<T = Record<string, ActorMethod>> = Actor & T;\n\n/**\n * An actor method type, defined for each methods of the actor service.\n */\nexport interface ActorMethod<Args extends unknown[] = unknown[], Ret = unknown> {\n  (...args: Args): Promise<Ret>;\n\n  withOptions(options: CallConfig): (...args: Args) => Promise<Ret>;\n}\n\n/**\n * An actor method type, defined for each methods of the actor service.\n */\nexport interface ActorMethodWithHttpDetails<Args extends unknown[] = unknown[], Ret = unknown>\n  extends ActorMethod {\n  (...args: Args): Promise<{ httpDetails: HttpDetailsResponse; result: Ret }>;\n}\n\n/**\n * An actor method type, defined for each methods of the actor service.\n */\nexport interface ActorMethodExtended<Args extends unknown[] = unknown[], Ret = unknown>\n  extends ActorMethod {\n  (...args: Args): Promise<{\n    certificate?: Certificate;\n    httpDetails?: HttpDetailsResponse;\n    result: Ret;\n  }>;\n}\n\nexport type FunctionWithArgsAndReturn<Args extends unknown[] = unknown[], Ret = unknown> = (\n  ...args: Args\n) => Ret;\n\n// Update all entries of T with the extra information from ActorMethodWithInfo\nexport type ActorMethodMappedWithHttpDetails<T> = {\n  [K in keyof T]: T[K] extends FunctionWithArgsAndReturn<infer Args, infer Ret>\n    ? ActorMethodWithHttpDetails<Args, Ret>\n    : never;\n};\n\n// Update all entries of T with the extra information from ActorMethodWithInfo\nexport type ActorMethodMappedExtended<T> = {\n  [K in keyof T]: T[K] extends FunctionWithArgsAndReturn<infer Args, infer Ret>\n    ? ActorMethodExtended<Args, Ret>\n    : never;\n};\n\n/**\n * The mode used when installing a canister.\n */\nexport type CanisterInstallMode =\n  | {\n      reinstall: null;\n    }\n  | {\n      upgrade:\n        | []\n        | [\n            {\n              skip_pre_upgrade: [] | [boolean];\n            },\n          ];\n    }\n  | {\n      install: null;\n    };\n\n/**\n * Internal metadata for actors. It's an enhanced version of ActorConfig with\n * some fields marked as required (as they are defaulted) and canisterId as\n * a Principal type.\n */\ninterface ActorMetadata {\n  service: IDL.ServiceClass;\n  agent?: Agent;\n  config: ActorConfig;\n}\n\nconst metadataSymbol = Symbol.for('ic-agent-metadata');\n\nexport interface CreateActorClassOpts {\n  httpDetails?: boolean;\n  certificate?: boolean;\n}\n\n/**\n * An actor base class. An actor is an object containing only functions that will\n * return a promise. These functions are derived from the IDL definition.\n */\nexport class Actor {\n  /**\n   * Get the Agent class this Actor would call, or undefined if the Actor would use\n   * the default agent (global.ic.agent).\n   * @param actor The actor to get the agent of.\n   */\n  public static agentOf(actor: Actor): Agent | undefined {\n    return actor[metadataSymbol].config.agent;\n  }\n\n  /**\n   * Get the interface of an actor, in the form of an instance of a Service.\n   * @param actor The actor to get the interface of.\n   */\n  public static interfaceOf(actor: Actor): IDL.ServiceClass {\n    return actor[metadataSymbol].service;\n  }\n\n  public static canisterIdOf(actor: Actor): Principal {\n    return Principal.from(actor[metadataSymbol].config.canisterId);\n  }\n\n  public static createActorClass(\n    interfaceFactory: IDL.InterfaceFactory,\n    options?: CreateActorClassOpts,\n  ): ActorConstructor {\n    const service = interfaceFactory({ IDL });\n\n    class CanisterActor extends Actor {\n      [x: string]: ActorMethod;\n\n      constructor(config: ActorConfig) {\n        if (!config.canisterId) {\n          throw InputError.fromCode(new MissingCanisterIdErrorCode(config.canisterId));\n        }\n        const canisterId =\n          typeof config.canisterId === 'string'\n            ? Principal.fromText(config.canisterId)\n            : config.canisterId;\n\n        super({\n          config: {\n            ...DEFAULT_ACTOR_CONFIG,\n            ...config,\n            canisterId,\n          },\n          service,\n        });\n\n        for (const [methodName, func] of service._fields) {\n          if (options?.httpDetails) {\n            func.annotations.push(ACTOR_METHOD_WITH_HTTP_DETAILS);\n          }\n          if (options?.certificate) {\n            func.annotations.push(ACTOR_METHOD_WITH_CERTIFICATE);\n          }\n\n          this[methodName] = _createActorMethod(this, methodName, func, config.blsVerify);\n        }\n      }\n    }\n\n    return CanisterActor;\n  }\n\n  public static createActor<T = Record<string, ActorMethod>>(\n    interfaceFactory: IDL.InterfaceFactory,\n    configuration: ActorConfig,\n  ): ActorSubclass<T> {\n    if (!configuration.canisterId) {\n      throw InputError.fromCode(new MissingCanisterIdErrorCode(configuration.canisterId));\n    }\n    return new (this.createActorClass(interfaceFactory))(\n      configuration,\n    ) as unknown as ActorSubclass<T>;\n  }\n\n  /**\n   * Returns an actor with methods that return the http response details along with the result\n   * @param interfaceFactory - the interface factory for the actor\n   * @param configuration - the configuration for the actor\n   * @deprecated - use createActor with actorClassOptions instead\n   */\n  public static createActorWithHttpDetails<T = Record<string, ActorMethod>>(\n    interfaceFactory: IDL.InterfaceFactory,\n    configuration: ActorConfig,\n  ): ActorSubclass<ActorMethodMappedWithHttpDetails<T>> {\n    return new (this.createActorClass(interfaceFactory, { httpDetails: true }))(\n      configuration,\n    ) as unknown as ActorSubclass<ActorMethodMappedWithHttpDetails<T>>;\n  }\n\n  /**\n   * Returns an actor with methods that return the http response details along with the result\n   * @param interfaceFactory - the interface factory for the actor\n   * @param configuration - the configuration for the actor\n   * @param actorClassOptions - options for the actor class extended details to return with the result\n   */\n  public static createActorWithExtendedDetails<T = Record<string, ActorMethod>>(\n    interfaceFactory: IDL.InterfaceFactory,\n    configuration: ActorConfig,\n    actorClassOptions: CreateActorClassOpts = {\n      httpDetails: true,\n      certificate: true,\n    },\n  ): ActorSubclass<ActorMethodMappedExtended<T>> {\n    return new (this.createActorClass(interfaceFactory, actorClassOptions))(\n      configuration,\n    ) as unknown as ActorSubclass<ActorMethodMappedExtended<T>>;\n  }\n\n  private [metadataSymbol]: ActorMetadata;\n\n  protected constructor(metadata: ActorMetadata) {\n    this[metadataSymbol] = Object.freeze(metadata);\n  }\n}\n\n// IDL functions can have multiple return values, so decoding always\n// produces an array. Ensure that functions with single or zero return\n// values behave as expected.\nfunction decodeReturnValue(types: IDL.Type[], msg: Uint8Array) {\n  const returnValues = IDL.decode(types, msg);\n  switch (returnValues.length) {\n    case 0:\n      return undefined;\n    case 1:\n      return returnValues[0];\n    default:\n      return returnValues;\n  }\n}\n\nconst DEFAULT_ACTOR_CONFIG: Partial<ActorConfig> = {\n  pollingOptions: DEFAULT_POLLING_OPTIONS,\n};\n\nexport type ActorConstructor = new (config: ActorConfig) => ActorSubclass;\n\nexport const ACTOR_METHOD_WITH_HTTP_DETAILS = 'http-details';\nexport const ACTOR_METHOD_WITH_CERTIFICATE = 'certificate';\n\nfunction _createActorMethod(\n  actor: Actor,\n  methodName: string,\n  func: IDL.FuncClass,\n  blsVerify?: CreateCertificateOptions['blsVerify'],\n): ActorMethod {\n  let caller: (options: CallConfig, ...args: unknown[]) => Promise<unknown>;\n  if (func.annotations.includes('query') || func.annotations.includes('composite_query')) {\n    caller = async (options, ...args) => {\n      // First, if there's a config transformation, call it.\n      options = {\n        ...options,\n        ...actor[metadataSymbol].config.queryTransform?.(methodName, args, {\n          ...actor[metadataSymbol].config,\n          ...options,\n        }),\n      };\n\n      const agent = options.agent || actor[metadataSymbol].config.agent || new HttpAgent();\n      const cid = Principal.from(options.canisterId || actor[metadataSymbol].config.canisterId);\n      const arg = IDL.encode(func.argTypes, args);\n\n      const result = await agent.query(cid, {\n        methodName,\n        arg,\n        effectiveCanisterId: options.effectiveCanisterId,\n      });\n      const httpDetails = {\n        ...result.httpDetails,\n        requestDetails: result.requestDetails,\n      } as HttpDetailsResponse;\n\n      switch (result.status) {\n        case QueryResponseStatus.Rejected: {\n          const uncertifiedRejectErrorCode = new UncertifiedRejectErrorCode(\n            result.requestId,\n            result.reject_code,\n            result.reject_message,\n            result.error_code,\n            result.signatures,\n          );\n          uncertifiedRejectErrorCode.callContext = {\n            canisterId: cid,\n            methodName,\n            httpDetails,\n          };\n          throw RejectError.fromCode(uncertifiedRejectErrorCode);\n        }\n\n        case QueryResponseStatus.Replied:\n          return func.annotations.includes(ACTOR_METHOD_WITH_HTTP_DETAILS)\n            ? {\n                httpDetails,\n                result: decodeReturnValue(func.retTypes, result.reply.arg),\n              }\n            : decodeReturnValue(func.retTypes, result.reply.arg);\n      }\n    };\n  } else {\n    caller = async (options, ...args) => {\n      // First, if there's a config transformation, call it.\n      options = {\n        ...options,\n        ...actor[metadataSymbol].config.callTransform?.(methodName, args, {\n          ...actor[metadataSymbol].config,\n          ...options,\n        }),\n      };\n\n      const agent = options.agent || actor[metadataSymbol].config.agent || HttpAgent.createSync();\n\n      const { canisterId, effectiveCanisterId, pollingOptions } = {\n        ...DEFAULT_ACTOR_CONFIG,\n        ...actor[metadataSymbol].config,\n        ...options,\n      };\n      const cid = Principal.from(canisterId);\n      const ecid = effectiveCanisterId !== undefined ? Principal.from(effectiveCanisterId) : cid;\n      const arg = IDL.encode(func.argTypes, args);\n\n      const { requestId, response, requestDetails } = await agent.call(cid, {\n        methodName,\n        arg,\n        effectiveCanisterId: ecid,\n        nonce: options.nonce,\n      });\n      let reply: Uint8Array | undefined;\n      let certificate: Certificate | undefined;\n      if (isV3ResponseBody(response.body)) {\n        if (agent.rootKey == null) {\n          throw ExternalError.fromCode(new MissingRootKeyErrorCode());\n        }\n        const cert = response.body.certificate;\n        certificate = await Certificate.create({\n          certificate: cert,\n          rootKey: agent.rootKey,\n          canisterId: Principal.from(canisterId),\n          blsVerify,\n          agent,\n        });\n        const path = [utf8ToBytes('request_status'), requestId];\n        const status = new TextDecoder().decode(\n          lookupResultToBuffer(certificate.lookup_path([...path, 'status'])),\n        );\n\n        switch (status) {\n          case 'replied':\n            reply = lookupResultToBuffer(certificate.lookup_path([...path, 'reply']));\n            break;\n          case 'rejected': {\n            // Find rejection details in the certificate\n            const rejectCode = new Uint8Array(\n              lookupResultToBuffer(certificate.lookup_path([...path, 'reject_code']))!,\n            )[0];\n            const rejectMessage = new TextDecoder().decode(\n              lookupResultToBuffer(certificate.lookup_path([...path, 'reject_message']))!,\n            );\n\n            const error_code_buf = lookupResultToBuffer(\n              certificate.lookup_path([...path, 'error_code']),\n            );\n            const error_code = error_code_buf\n              ? new TextDecoder().decode(error_code_buf)\n              : undefined;\n\n            const certifiedRejectErrorCode = new CertifiedRejectErrorCode(\n              requestId,\n              rejectCode,\n              rejectMessage,\n              error_code,\n            );\n            certifiedRejectErrorCode.callContext = {\n              canisterId: cid,\n              methodName,\n              httpDetails: response,\n            };\n            throw RejectError.fromCode(certifiedRejectErrorCode);\n          }\n        }\n      } else if (isV2ResponseBody(response.body)) {\n        const { reject_code, reject_message, error_code } = response.body;\n        const errorCode = new UncertifiedRejectUpdateErrorCode(\n          requestId,\n          reject_code,\n          reject_message,\n          error_code,\n        );\n        errorCode.callContext = {\n          canisterId: cid,\n          methodName,\n          httpDetails: response,\n        };\n        throw RejectError.fromCode(errorCode);\n      }\n\n      // Fall back to polling if we receive an Accepted response code\n      if (response.status === 202) {\n        const pollOptions: PollingOptions = {\n          ...pollingOptions,\n          blsVerify,\n        };\n        // Contains the certificate and the reply from the boundary node\n        const response = await pollForResponse(agent, ecid, requestId, pollOptions);\n        certificate = response.certificate;\n        reply = response.reply;\n      }\n      const shouldIncludeHttpDetails = func.annotations.includes(ACTOR_METHOD_WITH_HTTP_DETAILS);\n      const shouldIncludeCertificate = func.annotations.includes(ACTOR_METHOD_WITH_CERTIFICATE);\n\n      const httpDetails = { ...response, requestDetails } as HttpDetailsResponse;\n      if (reply !== undefined) {\n        if (shouldIncludeHttpDetails && shouldIncludeCertificate) {\n          return {\n            httpDetails,\n            certificate,\n            result: decodeReturnValue(func.retTypes, reply),\n          };\n        } else if (shouldIncludeCertificate) {\n          return {\n            certificate,\n            result: decodeReturnValue(func.retTypes, reply),\n          };\n        } else if (shouldIncludeHttpDetails) {\n          return {\n            httpDetails,\n            result: decodeReturnValue(func.retTypes, reply),\n          };\n        }\n        return decodeReturnValue(func.retTypes, reply);\n      } else {\n        const errorCode = new UnexpectedErrorCode(\n          `Call was returned undefined. We cannot determine if the call was successful or not. Return types: [${func.retTypes.map(t => t.display()).join(',')}].`,\n        );\n        errorCode.callContext = {\n          canisterId: cid,\n          methodName,\n          httpDetails,\n        };\n        throw UnknownError.fromCode(errorCode);\n      }\n    };\n  }\n\n  const handler = (...args: unknown[]) => caller({}, ...args);\n  handler.withOptions =\n    (options: CallConfig) =>\n    (...args: unknown[]) =>\n      caller(options, ...args);\n  return handler as ActorMethod;\n}\n", "export * from './api.ts';\nexport * from './http/index.ts';\n", "import { Principal } from '@dfinity/principal';\nimport { type RequestId } from '../request_id.ts';\nimport { type JsonObject } from '@dfinity/candid';\nimport { type Identity } from '../auth.ts';\nimport type { CallRequest, HttpHeaderField, QueryRequest } from './http/types.ts';\n\n/**\n * Codes used by the replica for rejecting a message.\n * See {@link https://sdk.dfinity.org/docs/interface-spec/#reject-codes | the interface spec}.\n */\nexport enum ReplicaRejectCode {\n  SysFatal = 1,\n  SysTransient = 2,\n  DestinationInvalid = 3,\n  CanisterReject = 4,\n  CanisterError = 5,\n}\n\n/**\n * Options when doing a {@link Agent.readState} call.\n */\nexport interface ReadStateOptions {\n  /**\n   * A list of paths to read the state of.\n   */\n  paths: Uint8Array[][];\n}\n\n/**\n *\n */\nexport type QueryResponse = QueryResponseReplied | QueryResponseRejected;\n\nexport enum QueryResponseStatus {\n  Replied = 'replied',\n  Rejected = 'rejected',\n}\n\nexport interface HttpDetailsResponse {\n  ok: boolean;\n  status: number;\n  statusText: string;\n  headers: HttpHeaderField[];\n}\n\nexport type ApiQueryResponse = QueryResponse & {\n  httpDetails: HttpDetailsResponse;\n  requestId: RequestId;\n};\n\nexport interface QueryResponseBase {\n  status: QueryResponseStatus;\n  requestDetails?: QueryRequest;\n}\n\nexport type NodeSignature = {\n  // the batch time\n  timestamp: bigint;\n  // the signature\n  signature: Uint8Array;\n  // the ID of the node that created the signature\n  identity: Uint8Array;\n};\n\nexport interface QueryResponseReplied extends QueryResponseBase {\n  status: QueryResponseStatus.Replied;\n  reply: { arg: Uint8Array };\n  signatures?: NodeSignature[];\n}\n\nexport interface QueryResponseRejected extends QueryResponseBase {\n  status: QueryResponseStatus.Rejected;\n  reject_code: ReplicaRejectCode;\n  reject_message: string;\n  error_code: string;\n  signatures?: NodeSignature[];\n}\n\n/**\n * Options when doing a {@link Agent.query} call.\n */\nexport interface QueryFields {\n  /**\n   * The method name to call.\n   */\n  methodName: string;\n\n  /**\n   * A binary encoded argument. This is already encoded and will be sent as is.\n   */\n  arg: Uint8Array;\n\n  /**\n   * Overrides canister id for path to fetch. This is used for management canister calls.\n   */\n  effectiveCanisterId?: Principal;\n}\n\n/**\n * Options when doing a {@link Agent.call} call.\n */\nexport interface CallOptions {\n  /**\n   * The method name to call.\n   */\n  methodName: string;\n\n  /**\n   * A binary encoded argument. This is already encoded and will be sent as is.\n   */\n  arg: Uint8Array;\n\n  /**\n   * An effective canister ID, used for routing. Usually the canister ID, except for management canister calls.\n   * @see https://internetcomputer.org/docs/current/references/ic-interface-spec/#http-effective-canister-id\n   */\n  effectiveCanisterId: Principal | string;\n}\n\nexport interface ReadStateResponse {\n  certificate: Uint8Array;\n}\n\nexport interface v2ResponseBody {\n  error_code?: string;\n  reject_code: number;\n  reject_message: string;\n}\n\n/**\n * Utility function to check if a body is a v2ResponseBody for type safety.\n * @param body The body to check\n * @returns boolean indicating if the body is a v2ResponseBody\n */\nexport function isV2ResponseBody(\n  body: v2ResponseBody | v3ResponseBody | null,\n): body is v2ResponseBody {\n  return body !== null && body !== undefined && 'reject_code' in body;\n}\n\nexport interface v3ResponseBody {\n  certificate: Uint8Array;\n}\n\n/**\n * Utility function to check if a body is a v3ResponseBody for type safety.\n * @param body The body to check\n * @returns boolean indicating if the body is a v3ResponseBody\n */\nexport function isV3ResponseBody(\n  body: v2ResponseBody | v3ResponseBody | null,\n): body is v3ResponseBody {\n  return body !== null && body !== undefined && 'certificate' in body;\n}\n\nexport interface SubmitResponse {\n  requestId: RequestId;\n  response: {\n    ok: boolean;\n    status: number;\n    statusText: string;\n    body: v2ResponseBody | v3ResponseBody | null;\n    headers: HttpHeaderField[];\n  };\n  requestDetails?: CallRequest;\n}\n\n/**\n * An Agent able to make calls and queries to a Replica.\n */\nexport interface Agent {\n  readonly rootKey: Uint8Array | null;\n  /**\n   * Returns the principal ID associated with this agent (by default). It only shows\n   * the principal of the default identity in the agent, which is the principal used\n   * when calls don't specify it.\n   */\n  getPrincipal(): Promise<Principal>;\n\n  /**\n   * Create the request for the read state call.\n   * `readState` uses this internally.\n   * Useful to avoid signing the same request multiple times.\n   */\n  createReadStateRequest?(options: ReadStateOptions, identity?: Identity): Promise<unknown>;\n\n  /**\n   * Send a read state query to the replica. This includes a list of paths to return,\n   * and will return a Certificate. This will only reject on communication errors,\n   * but the certificate might contain less information than requested.\n   * @param effectiveCanisterId A Canister ID related to this call.\n   * @param options The options for this call.\n   * @param identity Identity for the call. If not specified, uses the instance identity.\n   * @param request The request to send in case it has already been created.\n   */\n  readState(\n    effectiveCanisterId: Principal | string,\n    options: ReadStateOptions,\n    identity?: Identity,\n    request?: unknown,\n  ): Promise<ReadStateResponse>;\n\n  call(canisterId: Principal | string, fields: CallOptions): Promise<SubmitResponse>;\n\n  /**\n   * Query the status endpoint of the replica. This normally has a few fields that\n   * corresponds to the version of the replica, its root public key, and any other\n   * information made public.\n   * @returns A JsonObject that is essentially a record of fields from the status\n   *     endpoint.\n   */\n  status(): Promise<JsonObject>;\n\n  /**\n   * Send a query call to a canister. See\n   * {@link https://sdk.dfinity.org/docs/interface-spec/#http-query | the interface spec}.\n   * @param canisterId The Principal of the Canister to send the query to. Sending a query to\n   *     the management canister is not supported (as it has no meaning from an agent).\n   * @param options Options to use to create and send the query.\n   * @param identity Sender principal to use when sending the query.\n   * @returns The response from the replica. The Promise will only reject when the communication\n   *     failed. If the query itself failed but no protocol errors happened, the response will\n   *     be of type QueryResponseRejected.\n   */\n  query(\n    canisterId: Principal | string,\n    options: QueryFields,\n    identity?: Identity | Promise<Identity>,\n  ): Promise<ApiQueryResponse>;\n\n  /**\n   * By default, the agent is configured to talk to the main Internet Computer,\n   * and verifies responses using a hard-coded public key.\n   *\n   * This function will instruct the agent to ask the endpoint for its public\n   * key, and use that instead. This is required when talking to a local test\n   * instance, for example.\n   *\n   * Only use this when you are  _not_ talking to the main Internet Computer,\n   * otherwise you are prone to man-in-the-middle attacks! Do not call this\n   * function by default.\n   */\n  fetchRootKey(): Promise<Uint8Array>;\n  /**\n   * If an application needs to invalidate an identity under certain conditions, an `Agent` may expose an `invalidateIdentity` method.\n   * Invoking this method will set the inner identity used by the `Agent` to `null`.\n   *\n   * A use case for this would be - after a certain period of inactivity, a secure application chooses to invalidate the identity of any `HttpAgent` instances. An invalid identity can be replaced by `Agent.replaceIdentity`\n   */\n  invalidateIdentity?(): void;\n  /**\n   * If an application needs to replace an identity under certain conditions, an `Agent` may expose a `replaceIdentity` method.\n   * Invoking this method will set the inner identity used by the `Agent` to a newly provided identity.\n   *\n   * A use case for this would be - after authenticating using `@dfinity/auth-client`, you can replace the `AnonymousIdentity` of your `Actor` with a `DelegationIdentity`.\n   *\n   * ```ts\n   * Actor.agentOf(defaultActor).replaceIdentity(await authClient.getIdentity());\n   * ```\n   */\n  replaceIdentity?(identity: Identity): void;\n}\n", "import { type JsonObject } from '@dfinity/candid';\nimport { Principal } from '@dfinity/principal';\nimport {\n  HashTreeDecodeErrorCode,\n  CreateHttpAgentErrorCode,\n  ExternalError,\n  HttpDefaultFetchErrorCode,\n  IdentityInvalidErrorCode,\n  IngressExpiryInvalidErrorCode,\n  InputError,\n  LookupErrorCode,\n  MalformedPublicKeyErrorCode,\n  MalformedSignatureErrorCode,\n  MissingRootKeyErrorCode,\n  MissingSignatureErrorCode,\n  ProtocolError,\n  QuerySignatureVerificationFailedErrorCode,\n  TimeoutWaitingForResponseErrorCode,\n  TrustError,\n  UnexpectedErrorCode,\n  UnknownError,\n  HttpErrorCode,\n  HttpV3ApiNotSupportedErrorCode,\n  TransportError,\n  HttpFetchErrorCode,\n  AgentError,\n  MalformedLookupFoundValueErrorCode,\n  CertificateOutdatedErrorCode,\n} from '../../errors.ts';\nimport { AnonymousIdentity, type Identity } from '../../auth.ts';\nimport * as cbor from '../../cbor.ts';\nimport { type RequestId, hashOfMap, requestIdOf } from '../../request_id.ts';\nimport {\n  QueryResponseStatus,\n  type Agent,\n  type ApiQueryResponse,\n  type QueryFields,\n  type QueryResponse,\n  type ReadStateOptions,\n  type ReadStateResponse,\n  type SubmitResponse,\n} from '../api.ts';\nimport { Expiry, httpHeadersTransform, makeNonceTransform } from './transforms.ts';\nimport {\n  type CallRequest,\n  Endpoint,\n  type HttpAgentRequest,\n  type HttpAgentRequestTransformFn,\n  type HttpAgentSubmitRequest,\n  makeNonce,\n  type Nonce,\n  type QueryRequest,\n  ReadRequestType,\n  SubmitRequestType,\n  type ReadStateRequest,\n  type HttpHeaderField,\n} from './types.ts';\nimport { type SubnetStatus, request as canisterStatusRequest } from '../../canisterStatus/index.ts';\nimport { type HashTree, lookup_path, LookupPathStatus } from '../../certificate.ts';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport { ExpirableMap } from '../../utils/expirableMap.ts';\nimport { Ed25519PublicKey } from '../../public_key.ts';\nimport { ObservableLog } from '../../observable.ts';\nimport {\n  type BackoffStrategy,\n  type BackoffStrategyFactory,\n  ExponentialBackoff,\n} from '../../polling/backoff.ts';\nimport { decodeTime } from '../../utils/leb.ts';\nimport { concatBytes, hexToBytes } from '@noble/hashes/utils';\nimport { uint8Equals, uint8FromBufLike } from '../../utils/buffer.ts';\nimport { IC_RESPONSE_DOMAIN_SEPARATOR } from '../../constants.ts';\nexport * from './transforms.ts';\nexport { type Nonce, makeNonce } from './types.ts';\n\nexport enum RequestStatusResponseStatus {\n  Received = 'received',\n  Processing = 'processing',\n  Replied = 'replied',\n  Rejected = 'rejected',\n  Unknown = 'unknown',\n  Done = 'done',\n}\n\nconst MINUTE_TO_MSECS = 60 * 1_000;\nconst MSECS_TO_NANOSECONDS = 1_000_000;\n\nconst DEFAULT_TIME_DIFF_MSECS = 0;\n\n// Root public key for the IC, encoded as hex\nexport const IC_ROOT_KEY =\n  '308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100814' +\n  'c0e6ec71fab583b08bd81373c255c3c371b2e84863c98a4f1e08b74235d14fb5d9c0cd546d968' +\n  '5f913a0c0b2cc5341583bf4b4392e467db96d65b9bb4cb717112f8472e0d5a4d14505ffd7484' +\n  'b01291091c5f87b98883463f98091a0baaae';\n\nexport const MANAGEMENT_CANISTER_ID = 'aaaaa-aa';\n\n// IC0 domain info\nconst IC0_DOMAIN = 'ic0.app';\nconst IC0_SUB_DOMAIN = '.ic0.app';\n\nconst ICP0_DOMAIN = 'icp0.io';\nconst ICP0_SUB_DOMAIN = '.icp0.io';\n\nconst ICP_API_DOMAIN = 'icp-api.io';\nconst ICP_API_SUB_DOMAIN = '.icp-api.io';\n\nconst HTTP_STATUS_OK = 200;\nconst HTTP_STATUS_ACCEPTED = 202;\nconst HTTP_STATUS_NOT_FOUND = 404;\n\n// HttpAgent options that can be used at construction.\nexport interface HttpAgentOptions {\n  // A surrogate to the global fetch function. Useful for testing.\n  fetch?: typeof fetch;\n\n  // Additional options to pass along to fetch. Will not override fields that\n  // the agent already needs to set\n  // Should follow the RequestInit interface, but we intentially support non-standard fields\n  fetchOptions?: Record<string, unknown>;\n\n  // Additional options to pass along to fetch for the call API.\n  callOptions?: Record<string, unknown>;\n\n  // The host to use for the client. By default, uses the same host as\n  // the current page.\n  host?: string;\n\n  // The principal used to send messages. This cannot be empty at the request\n  // time (will throw).\n  identity?: Identity | Promise<Identity>;\n\n  /**\n   * The maximum time a request can be delayed before being rejected.\n   * @default 5 minutes\n   */\n  ingressExpiryInMinutes?: number;\n\n  credentials?: {\n    name: string;\n    password?: string;\n  };\n  /**\n   * Adds a unique {@link Nonce} with each query.\n   * Enabling will prevent queries from being answered with a cached response.\n   * @example\n   * const agent = new HttpAgent({ useQueryNonces: true });\n   * agent.addTransform(makeNonceTransform(makeNonce);\n   * @default false\n   */\n  useQueryNonces?: boolean;\n  /**\n   * Number of times to retry requests before throwing an error\n   * @default 3\n   */\n  retryTimes?: number;\n  /**\n   * The strategy to use for backoff when retrying requests\n   */\n  backoffStrategy?: BackoffStrategyFactory;\n  /**\n   * Whether the agent should verify signatures signed by node keys on query responses. Increases security, but adds overhead and must make a separate request to cache the node keys for the canister's subnet.\n   * @default true\n   */\n  verifyQuerySignatures?: boolean;\n  /**\n   * Whether to log to the console. Defaults to false.\n   */\n  logToConsole?: boolean;\n\n  /**\n   * Alternate root key to use for verifying certificates. If not provided, the default IC root key will be used.\n   */\n  rootKey?: Uint8Array;\n\n  /**\n   * Whether or not the root key should be automatically fetched during construction. Defaults to false.\n   */\n  shouldFetchRootKey?: boolean;\n\n  /**\n   * Whether or not to sync the time with the network during construction. Defaults to false.\n   */\n  shouldSyncTime?: boolean;\n}\n\nfunction getDefaultFetch(): typeof fetch {\n  let defaultFetch;\n\n  if (typeof window !== 'undefined') {\n    // Browser context\n    if (window.fetch) {\n      defaultFetch = window.fetch.bind(window);\n    } else {\n      throw ExternalError.fromCode(\n        new HttpDefaultFetchErrorCode(\n          'Fetch implementation was not available. You appear to be in a browser context, but window.fetch was not present.',\n        ),\n      );\n    }\n  } else if (typeof global !== 'undefined') {\n    // Node context\n    if (global.fetch) {\n      defaultFetch = global.fetch.bind(global);\n    } else {\n      throw ExternalError.fromCode(\n        new HttpDefaultFetchErrorCode(\n          'Fetch implementation was not available. You appear to be in a Node.js context, but global.fetch was not available.',\n        ),\n      );\n    }\n  } else if (typeof self !== 'undefined') {\n    if (self.fetch) {\n      defaultFetch = self.fetch.bind(self);\n    }\n  }\n\n  if (defaultFetch) {\n    return defaultFetch;\n  }\n  throw ExternalError.fromCode(\n    new HttpDefaultFetchErrorCode(\n      'Fetch implementation was not available. Please provide fetch to the HttpAgent constructor, or ensure it is available in the window or global context.',\n    ),\n  );\n}\n\nfunction determineHost(configuredHost: string | undefined): string {\n  let host: URL;\n  if (configuredHost !== undefined) {\n    if (!configuredHost.match(/^[a-z]+:/) && typeof window !== 'undefined') {\n      host = new URL(window.location.protocol + '//' + configuredHost);\n    } else {\n      host = new URL(configuredHost);\n    }\n  } else {\n    // Mainnet, local, and remote environments will have the api route available\n    const knownHosts = ['ic0.app', 'icp0.io', '127.0.0.1', 'localhost'];\n    const remoteHosts = ['.github.dev', '.gitpod.io'];\n    const location = typeof window !== 'undefined' ? window.location : undefined;\n    const hostname = location?.hostname;\n    let knownHost;\n    if (hostname && typeof hostname === 'string') {\n      if (remoteHosts.some(host => hostname.endsWith(host))) {\n        knownHost = hostname;\n      } else {\n        knownHost = knownHosts.find(host => hostname.endsWith(host));\n      }\n    }\n\n    if (location && knownHost) {\n      // If the user is on a boundary-node provided host, we can use the same host for the agent\n      host = new URL(\n        `${location.protocol}//${knownHost}${location.port ? ':' + location.port : ''}`,\n      );\n    } else {\n      host = new URL('https://icp-api.io');\n    }\n  }\n  return host.toString();\n}\n\ninterface V1HttpAgentInterface {\n  _identity: Promise<Identity> | null;\n  readonly _fetch: typeof fetch;\n  readonly _fetchOptions?: Record<string, unknown>;\n  readonly _callOptions?: Record<string, unknown>;\n\n  readonly _host: URL;\n  readonly _credentials: string | undefined;\n  readonly _retryTimes: number; // Retry requests N times before erroring by default\n  _isAgent: true;\n}\n\n/** \n * A HTTP agent allows users to interact with a client of the internet computer\nusing the available methods. It exposes an API that closely follows the\npublic view of the internet computer, and is not intended to be exposed\ndirectly to the majority of users due to its low-level interface.\n * There is a pipeline to apply transformations to the request before sending\nit to the client. This is to decouple signature, nonce generation and\nother computations so that this class can stay as simple as possible while\nallowing extensions.\n */\nexport class HttpAgent implements Agent {\n  public rootKey: Uint8Array | null;\n  #rootKeyPromise: Promise<Uint8Array> | null = null;\n  readonly #shouldFetchRootKey: boolean = false;\n\n  #timeDiffMsecs = DEFAULT_TIME_DIFF_MSECS;\n  #hasSyncedTime = false;\n  #syncTimePromise: Promise<void> | null = null;\n  readonly #shouldSyncTime: boolean = false;\n\n  #identity: Promise<Identity> | null;\n  readonly #fetch: typeof fetch;\n  readonly #fetchOptions?: Record<string, unknown>;\n  readonly #callOptions?: Record<string, unknown>;\n  readonly host: URL;\n  readonly #credentials: string | undefined;\n  readonly #retryTimes; // Retry requests N times before erroring by default\n  #backoffStrategy: BackoffStrategyFactory;\n  readonly #maxIngressExpiryInMinutes: number;\n  get #maxIngressExpiryInMs(): number {\n    return this.#maxIngressExpiryInMinutes * MINUTE_TO_MSECS;\n  }\n\n  // Public signature to help with type checking.\n  public readonly _isAgent = true;\n  public config: HttpAgentOptions = {};\n\n  public log: ObservableLog = new ObservableLog();\n\n  #queryPipeline: HttpAgentRequestTransformFn[] = [];\n  #updatePipeline: HttpAgentRequestTransformFn[] = [];\n\n  #subnetKeys: ExpirableMap<string, SubnetStatus> = new ExpirableMap({\n    expirationTime: 5 * MINUTE_TO_MSECS,\n  });\n  #verifyQuerySignatures = true;\n\n  /**\n   * @param options - Options for the HttpAgent\n   * @deprecated Use `HttpAgent.create` or `HttpAgent.createSync` instead\n   */\n  constructor(options: HttpAgentOptions = {}) {\n    this.config = options;\n    this.#fetch = options.fetch || getDefaultFetch() || fetch.bind(global);\n    this.#fetchOptions = options.fetchOptions;\n    this.#callOptions = options.callOptions;\n    this.#shouldFetchRootKey = options.shouldFetchRootKey ?? false;\n    this.#shouldSyncTime = options.shouldSyncTime ?? false;\n\n    // Use provided root key, otherwise fall back to IC_ROOT_KEY for mainnet or null if the key needs to be fetched\n    if (options.rootKey) {\n      this.rootKey = options.rootKey;\n    } else if (this.#shouldFetchRootKey) {\n      this.rootKey = null;\n    } else {\n      this.rootKey = hexToBytes(IC_ROOT_KEY);\n    }\n\n    const host = determineHost(options.host);\n    this.host = new URL(host);\n\n    if (options.verifyQuerySignatures !== undefined) {\n      this.#verifyQuerySignatures = options.verifyQuerySignatures;\n    }\n    // Default is 3\n    this.#retryTimes = options.retryTimes ?? 3;\n    // Delay strategy for retries. Default is exponential backoff\n    const defaultBackoffFactory = () =>\n      new ExponentialBackoff({\n        maxIterations: this.#retryTimes,\n      });\n    this.#backoffStrategy = options.backoffStrategy || defaultBackoffFactory;\n    // Rewrite to avoid redirects\n    if (this.host.hostname.endsWith(IC0_SUB_DOMAIN)) {\n      this.host.hostname = IC0_DOMAIN;\n    } else if (this.host.hostname.endsWith(ICP0_SUB_DOMAIN)) {\n      this.host.hostname = ICP0_DOMAIN;\n    } else if (this.host.hostname.endsWith(ICP_API_SUB_DOMAIN)) {\n      this.host.hostname = ICP_API_DOMAIN;\n    }\n\n    if (options.credentials) {\n      const { name, password } = options.credentials;\n      this.#credentials = `${name}${password ? ':' + password : ''}`;\n    }\n    this.#identity = Promise.resolve(options.identity || new AnonymousIdentity());\n\n    if (options.ingressExpiryInMinutes && options.ingressExpiryInMinutes > 5) {\n      throw InputError.fromCode(\n        new IngressExpiryInvalidErrorCode(\n          'The maximum ingress expiry time is 5 minutes.',\n          options.ingressExpiryInMinutes,\n        ),\n      );\n    }\n    if (options.ingressExpiryInMinutes && options.ingressExpiryInMinutes <= 0) {\n      throw InputError.fromCode(\n        new IngressExpiryInvalidErrorCode(\n          'Ingress expiry time must be greater than 0.',\n          options.ingressExpiryInMinutes,\n        ),\n      );\n    }\n\n    this.#maxIngressExpiryInMinutes = options.ingressExpiryInMinutes || 5;\n\n    // Add a nonce transform to ensure calls are unique\n    this.addTransform('update', makeNonceTransform(makeNonce));\n    if (options.useQueryNonces) {\n      this.addTransform('query', makeNonceTransform(makeNonce));\n    }\n    if (options.logToConsole) {\n      this.log.subscribe(log => {\n        if (log.level === 'error') {\n          console.error(log.message);\n        } else if (log.level === 'warn') {\n          console.warn(log.message);\n        } else {\n          console.log(log.message);\n        }\n      });\n    }\n  }\n\n  public static createSync(options: HttpAgentOptions = {}): HttpAgent {\n    return new this({ ...options });\n  }\n\n  public static async create(options: HttpAgentOptions = {}): Promise<HttpAgent> {\n    const agent = HttpAgent.createSync(options);\n    await agent.#asyncGuard();\n    return agent;\n  }\n\n  public static async from(\n    agent: Pick<HttpAgent, 'config'> | V1HttpAgentInterface,\n  ): Promise<HttpAgent> {\n    try {\n      if ('config' in agent) {\n        return await HttpAgent.create(agent.config);\n      }\n      return await HttpAgent.create({\n        fetch: agent._fetch,\n        fetchOptions: agent._fetchOptions,\n        callOptions: agent._callOptions,\n        host: agent._host.toString(),\n        identity: agent._identity ?? undefined,\n      });\n    } catch {\n      throw InputError.fromCode(new CreateHttpAgentErrorCode());\n    }\n  }\n\n  public isLocal(): boolean {\n    const hostname = this.host.hostname;\n    return hostname === '127.0.0.1' || hostname.endsWith('127.0.0.1');\n  }\n\n  public addTransform(\n    type: 'update' | 'query',\n    fn: HttpAgentRequestTransformFn,\n    priority = fn.priority || 0,\n  ): void {\n    if (type === 'update') {\n      // Keep the pipeline sorted at all time, by priority.\n      const i = this.#updatePipeline.findIndex(x => (x.priority || 0) < priority);\n      this.#updatePipeline.splice(\n        i >= 0 ? i : this.#updatePipeline.length,\n        0,\n        Object.assign(fn, { priority }),\n      );\n    } else if (type === 'query') {\n      // Keep the pipeline sorted at all time, by priority.\n      const i = this.#queryPipeline.findIndex(x => (x.priority || 0) < priority);\n      this.#queryPipeline.splice(\n        i >= 0 ? i : this.#queryPipeline.length,\n        0,\n        Object.assign(fn, { priority }),\n      );\n    }\n  }\n\n  public async getPrincipal(): Promise<Principal> {\n    if (!this.#identity) {\n      throw ExternalError.fromCode(new IdentityInvalidErrorCode());\n    }\n    return (await this.#identity).getPrincipal();\n  }\n\n  /**\n   * Makes a call to a canister method.\n   * @param canisterId - The ID of the canister to call. Can be a Principal or a string.\n   * @param options - Options for the call.\n   * @param options.methodName - The name of the method to call.\n   * @param options.arg - The argument to pass to the method, as a Uint8Array.\n   * @param options.effectiveCanisterId - (Optional) The effective canister ID, if different from the target canister ID.\n   * @param options.callSync - (Optional) Whether to use synchronous call mode. Defaults to true.\n   * @param options.nonce - (Optional) A unique nonce for the request. If provided, it will override any nonce set by transforms.\n   * @param identity - (Optional) The identity to use for the call. If not provided, the agent's current identity will be used.\n   * @returns A promise that resolves to the response of the call, including the request ID and response details.\n   */\n  public async call(\n    canisterId: Principal | string,\n    options: {\n      methodName: string;\n      arg: Uint8Array;\n      effectiveCanisterId?: Principal | string;\n      callSync?: boolean;\n      nonce?: Uint8Array | Nonce;\n    },\n    identity?: Identity | Promise<Identity>,\n  ): Promise<SubmitResponse> {\n    const callSync = options.callSync ?? true;\n    const id = await (identity ?? this.#identity);\n    if (!id) {\n      throw ExternalError.fromCode(new IdentityInvalidErrorCode());\n    }\n    const canister = Principal.from(canisterId);\n    const ecid = options.effectiveCanisterId\n      ? Principal.from(options.effectiveCanisterId)\n      : canister;\n    await this.#asyncGuard(ecid);\n\n    const sender = id.getPrincipal();\n\n    const ingress_expiry = calculateIngressExpiry(\n      this.#maxIngressExpiryInMinutes,\n      this.#timeDiffMsecs,\n    );\n\n    const submit: CallRequest = {\n      request_type: SubmitRequestType.Call,\n      canister_id: canister,\n      method_name: options.methodName,\n      arg: options.arg,\n      sender,\n      ingress_expiry,\n    };\n\n    let transformedRequest = (await this._transform({\n      request: {\n        body: null,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/cbor',\n          ...(this.#credentials ? { Authorization: 'Basic ' + btoa(this.#credentials) } : {}),\n        },\n      },\n      endpoint: Endpoint.Call,\n      body: submit,\n    })) as HttpAgentSubmitRequest;\n\n    // Determine the nonce to use for the request\n    let nonce: Nonce | undefined;\n\n    // Check if a nonce is provided in the options and convert it to the correct type\n    if (options?.nonce) {\n      nonce = toNonce(options.nonce);\n    }\n    // If no nonce is provided in the options, check the transformedRequest body\n    else if (transformedRequest.body.nonce) {\n      nonce = toNonce(transformedRequest.body.nonce);\n    }\n    // If no nonce is found, set it to undefined\n    else {\n      nonce = undefined;\n    }\n\n    // Assign the determined nonce to the submit object\n    submit.nonce = nonce;\n\n    /**\n     * Converts a Uint8Array to a Nonce type.\n     * @param buf - The buffer to convert.\n     * @returns The buffer as a Nonce.\n     */\n    function toNonce(buf: Uint8Array): Nonce {\n      return Object.assign(buf, { __nonce__: undefined });\n    }\n\n    // Apply transform for identity.\n    transformedRequest = (await id.transformRequest(transformedRequest)) as HttpAgentSubmitRequest;\n\n    const body = cbor.encode(transformedRequest.body);\n    const backoff = this.#backoffStrategy();\n    const requestId = requestIdOf(submit);\n    try {\n      // Attempt v3 sync call\n      const requestSync = () => {\n        this.log.print(\n          `fetching \"/api/v3/canister/${ecid.toText()}/call\" with request:`,\n          transformedRequest,\n        );\n        return this.#fetch('' + new URL(`/api/v3/canister/${ecid.toText()}/call`, this.host), {\n          ...this.#callOptions,\n          ...transformedRequest.request,\n          body,\n        });\n      };\n\n      const requestAsync = () => {\n        this.log.print(\n          `fetching \"/api/v2/canister/${ecid.toText()}/call\" with request:`,\n          transformedRequest,\n        );\n        return this.#fetch('' + new URL(`/api/v2/canister/${ecid.toText()}/call`, this.host), {\n          ...this.#callOptions,\n          ...transformedRequest.request,\n          body,\n        });\n      };\n\n      const requestFn = callSync ? requestSync : requestAsync;\n      const { responseBodyBytes, ...response } = await this.#requestAndRetry({\n        requestFn,\n        backoff,\n        tries: 0,\n      });\n\n      const responseBody = (\n        responseBodyBytes.byteLength > 0 ? cbor.decode(responseBodyBytes) : null\n      ) as SubmitResponse['response']['body'];\n\n      return {\n        requestId,\n        response: {\n          ...response,\n          body: responseBody,\n        },\n        requestDetails: submit,\n      };\n    } catch (error) {\n      let callError: AgentError;\n      if (error instanceof AgentError) {\n        // If the error is due to the v3 api not being supported, fall back to v2\n        if (error.hasCode(HttpV3ApiNotSupportedErrorCode)) {\n          this.log.warn('v3 api not supported. Fall back to v2');\n          return this.call(\n            canisterId,\n            {\n              ...options,\n              // disable v3 api\n              callSync: false,\n            },\n            identity,\n          );\n        } else if (error.hasCode(IngressExpiryInvalidErrorCode) && !this.#hasSyncedTime) {\n          // if there is an ingress expiry error and the time has not been synced yet,\n          // sync time with the network and try again\n          await this.syncTime(canister);\n          return this.call(canister, options, identity);\n        } else {\n          // override the error code to include the request details\n          error.code.requestContext = {\n            requestId,\n            senderPubKey: transformedRequest.body.sender_pubkey,\n            senderSignature: transformedRequest.body.sender_sig,\n            ingressExpiry: transformedRequest.body.content.ingress_expiry,\n          };\n          callError = error;\n        }\n      } else {\n        callError = UnknownError.fromCode(new UnexpectedErrorCode(error));\n      }\n      this.log.error(`Error while making call: ${callError.message}`, callError);\n      throw callError;\n    }\n  }\n\n  async #requestAndRetryQuery(args: {\n    ecid: Principal;\n    transformedRequest: HttpAgentRequest;\n    body: Uint8Array;\n    requestId: RequestId;\n    backoff: BackoffStrategy;\n    tries: number;\n  }): Promise<ApiQueryResponse> {\n    const { ecid, transformedRequest, body, requestId, backoff, tries } = args;\n\n    const delay = tries === 0 ? 0 : backoff.next();\n    this.log.print(`fetching \"/api/v2/canister/${ecid.toString()}/query\" with tries:`, {\n      tries,\n      backoff,\n      delay,\n    });\n\n    // If delay is null, the backoff strategy is exhausted due to a maximum number of retries, duration, or other reason\n    if (delay === null) {\n      throw UnknownError.fromCode(\n        new TimeoutWaitingForResponseErrorCode(\n          `Backoff strategy exhausted after ${tries} attempts.`,\n          requestId,\n        ),\n      );\n    }\n\n    if (delay > 0) {\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n    let response: ApiQueryResponse;\n    // Make the request and retry if it throws an error\n    try {\n      this.log.print(\n        `fetching \"/api/v2/canister/${ecid.toString()}/query\" with request:`,\n        transformedRequest,\n      );\n      const fetchResponse = await this.#fetch(\n        '' + new URL(`/api/v2/canister/${ecid.toString()}/query`, this.host),\n        {\n          ...this.#fetchOptions,\n          ...transformedRequest.request,\n          body,\n        },\n      );\n      if (fetchResponse.status === HTTP_STATUS_OK) {\n        const queryResponse: QueryResponse = cbor.decode(\n          uint8FromBufLike(await fetchResponse.arrayBuffer()),\n        );\n        response = {\n          ...queryResponse,\n          httpDetails: {\n            ok: fetchResponse.ok,\n            status: fetchResponse.status,\n            statusText: fetchResponse.statusText,\n            headers: httpHeadersTransform(fetchResponse.headers),\n          },\n          requestId,\n        };\n      } else {\n        throw ProtocolError.fromCode(\n          new HttpErrorCode(\n            fetchResponse.status,\n            fetchResponse.statusText,\n            httpHeadersTransform(fetchResponse.headers),\n            await fetchResponse.text(),\n          ),\n        );\n      }\n    } catch (error) {\n      if (tries < this.#retryTimes) {\n        this.log.warn(\n          `Caught exception while attempting to make query:\\n` +\n            `  ${error}\\n` +\n            `  Retrying query.`,\n        );\n        return await this.#requestAndRetryQuery({ ...args, tries: tries + 1 });\n      }\n      if (error instanceof AgentError) {\n        // if it's an error that we have thrown, just throw it as is\n        throw error;\n      }\n      // if it's an error that we have not thrown, wrap it in a TransportError\n      throw TransportError.fromCode(new HttpFetchErrorCode(error));\n    }\n\n    // Skip timestamp verification if the user has set verifyQuerySignatures to false\n    if (!this.#verifyQuerySignatures) {\n      return response;\n    }\n\n    const signatureTimestampNs = response.signatures?.[0]?.timestamp;\n    if (!signatureTimestampNs) {\n      throw ProtocolError.fromCode(\n        new MalformedSignatureErrorCode(\n          'Timestamp not found in query response. This suggests a malformed or malicious response.',\n        ),\n      );\n    }\n\n    const signatureTimestampMs = Number(\n      BigInt(signatureTimestampNs) / BigInt(MSECS_TO_NANOSECONDS),\n    );\n    const currentTimestampInMs = Date.now() + this.#timeDiffMsecs;\n\n    // We don't need `Math.abs` here because we allow signatures in the future\n    if (currentTimestampInMs - signatureTimestampMs > this.#maxIngressExpiryInMs) {\n      if (tries < this.#retryTimes) {\n        this.log.warn('Timestamp is older than the max ingress expiry. Retrying query.', {\n          requestId,\n          signatureTimestampMs,\n        });\n        return await this.#requestAndRetryQuery({ ...args, tries: tries + 1 });\n      }\n      throw TrustError.fromCode(\n        new CertificateOutdatedErrorCode(this.#maxIngressExpiryInMinutes, requestId, tries),\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Makes a request and retries if it fails.\n   * @param args - The arguments for the request.\n   * @param args.requestFn - A function that returns a Promise resolving to a Response.\n   * @param args.backoff - The backoff strategy to use for retries.\n   * @param args.tries - The number of retry attempts made so far.\n   * @returns The response from the request, if the status is 200 or 202.\n   * See the https://internetcomputer.org/docs/references/ic-interface-spec#http-interface for details on the response statuses.\n   * @throws {ProtocolError} if the response status is not 200 or 202, and the retry limit has been reached.\n   * @throws {TransportError} if the request fails, and the retry limit has been reached.\n   */\n  async #requestAndRetry(args: {\n    requestFn: () => Promise<Response>;\n    backoff: BackoffStrategy;\n    tries: number;\n  }): Promise<{\n    ok: boolean;\n    status: number;\n    statusText: string;\n    responseBodyBytes: Uint8Array;\n    headers: HttpHeaderField[];\n  }> {\n    const { requestFn, backoff, tries } = args;\n    const delay = tries === 0 ? 0 : backoff.next();\n\n    // If delay is null, the backoff strategy is exhausted due to a maximum number of retries, duration, or other reason\n    if (delay === null) {\n      throw ProtocolError.fromCode(\n        new TimeoutWaitingForResponseErrorCode(`Retry strategy exhausted after ${tries} attempts.`),\n      );\n    }\n\n    if (delay > 0) {\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n\n    let response: Response;\n    let responseBodyBytes = new Uint8Array();\n    try {\n      response = await requestFn();\n      // According to the spec, only 200 responses have a non-empty body\n      if (response.status === HTTP_STATUS_OK) {\n        // Consume the response body, to ensure that the response is not closed unexpectedly\n        responseBodyBytes = uint8FromBufLike(await response.clone().arrayBuffer());\n      }\n    } catch (error) {\n      if (tries < this.#retryTimes) {\n        this.log.warn(\n          `Caught exception while attempting to make request:\\n` +\n            `  ${error}\\n` +\n            `  Retrying request.`,\n        );\n        // Delay the request by the configured backoff strategy\n        return await this.#requestAndRetry({ requestFn, backoff, tries: tries + 1 });\n      }\n      throw TransportError.fromCode(new HttpFetchErrorCode(error));\n    }\n\n    const headers = httpHeadersTransform(response.headers);\n\n    if (response.status === HTTP_STATUS_OK || response.status === HTTP_STATUS_ACCEPTED) {\n      return {\n        ok: response.ok, // should always be true\n        status: response.status,\n        statusText: response.statusText,\n        responseBodyBytes,\n        headers,\n      };\n    }\n\n    const responseText = await response.text();\n\n    if (response.status === HTTP_STATUS_NOT_FOUND && response.url.includes('api/v3')) {\n      throw ProtocolError.fromCode(new HttpV3ApiNotSupportedErrorCode());\n    }\n\n    // The error message comes from https://github.com/dfinity/ic/blob/23d5990bfc5277c32e54f0087b5a38fa412171e1/rs/validator/src/ingress_validation.rs#L233\n    if (responseText.startsWith('Invalid request expiry: ')) {\n      throw InputError.fromCode(\n        new IngressExpiryInvalidErrorCode(responseText, this.#maxIngressExpiryInMinutes),\n      );\n    }\n\n    if (tries < this.#retryTimes) {\n      return await this.#requestAndRetry({ requestFn, backoff, tries: tries + 1 });\n    }\n\n    throw ProtocolError.fromCode(\n      new HttpErrorCode(response.status, response.statusText, headers, responseText),\n    );\n  }\n\n  public async query(\n    canisterId: Principal | string,\n    fields: QueryFields,\n    identity?: Identity | Promise<Identity>,\n  ): Promise<ApiQueryResponse> {\n    const backoff = this.#backoffStrategy();\n    const ecid = fields.effectiveCanisterId\n      ? Principal.from(fields.effectiveCanisterId)\n      : Principal.from(canisterId);\n    await this.#asyncGuard(ecid);\n\n    this.log.print(`ecid ${ecid.toString()}`);\n    this.log.print(`canisterId ${canisterId.toString()}`);\n\n    let transformedRequest: HttpAgentRequest | undefined;\n    const id = await (identity ?? this.#identity);\n    if (!id) {\n      throw ExternalError.fromCode(new IdentityInvalidErrorCode());\n    }\n\n    const canister = Principal.from(canisterId);\n    const sender = id.getPrincipal();\n    const ingressExpiry = calculateIngressExpiry(\n      this.#maxIngressExpiryInMinutes,\n      this.#timeDiffMsecs,\n    );\n\n    const request: QueryRequest = {\n      request_type: ReadRequestType.Query,\n      canister_id: canister,\n      method_name: fields.methodName,\n      arg: fields.arg,\n      sender,\n      ingress_expiry: ingressExpiry,\n    };\n\n    const requestId = requestIdOf(request);\n\n    transformedRequest = await this._transform({\n      request: {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/cbor',\n          ...(this.#credentials ? { Authorization: 'Basic ' + btoa(this.#credentials) } : {}),\n        },\n      },\n      endpoint: Endpoint.Query,\n      body: request,\n    });\n\n    // Apply transform for identity.\n    transformedRequest = (await id.transformRequest(transformedRequest)) as HttpAgentRequest;\n\n    const body = cbor.encode(transformedRequest.body);\n\n    const args = {\n      canister: canister.toText(),\n      ecid,\n      transformedRequest,\n      body,\n      requestId,\n      backoff,\n      tries: 0,\n    };\n\n    const makeQuery = async () => {\n      // Attempt to make the query i=retryTimes times\n      const query = await this.#requestAndRetryQuery(args);\n      return {\n        requestDetails: request,\n        ...query,\n      };\n    };\n\n    const getSubnetStatus = async (): Promise<SubnetStatus> => {\n      const cachedSubnetStatus = this.#subnetKeys.get(ecid.toString());\n      if (cachedSubnetStatus) {\n        return cachedSubnetStatus;\n      }\n      await this.fetchSubnetKeys(ecid.toString());\n      const subnetStatus = this.#subnetKeys.get(ecid.toString());\n      if (!subnetStatus) {\n        throw TrustError.fromCode(new MissingSignatureErrorCode());\n      }\n      return subnetStatus;\n    };\n\n    try {\n      if (!this.#verifyQuerySignatures) {\n        // Skip verification if the user has disabled it\n        return await makeQuery();\n      }\n\n      // Make query and fetch subnet keys in parallel\n      const [queryWithDetails, subnetStatus] = await Promise.all([makeQuery(), getSubnetStatus()]);\n\n      try {\n        return this.#verifyQueryResponse(queryWithDetails, subnetStatus);\n      } catch {\n        // In case the node signatures have changed, refresh the subnet keys and try again\n        this.log.warn('Query response verification failed. Retrying with fresh subnet keys.');\n        this.#subnetKeys.delete(ecid.toString());\n        const updatedSubnetStatus = await getSubnetStatus();\n        return this.#verifyQueryResponse(queryWithDetails, updatedSubnetStatus);\n      }\n    } catch (error) {\n      let queryError: AgentError;\n      if (error instanceof AgentError) {\n        // override the error code to include the request details\n        error.code.requestContext = {\n          requestId,\n          senderPubKey: transformedRequest.body.sender_pubkey,\n          senderSignature: transformedRequest.body.sender_sig,\n          ingressExpiry: transformedRequest.body.content.ingress_expiry,\n        };\n        queryError = error;\n      } else {\n        queryError = UnknownError.fromCode(new UnexpectedErrorCode(error));\n      }\n      this.log.error(`Error while making query: ${queryError.message}`, queryError);\n      throw queryError;\n    }\n  }\n\n  /**\n   * See https://internetcomputer.org/docs/current/references/ic-interface-spec/#http-query for details on validation\n   * @param queryResponse - The response from the query\n   * @param subnetStatus - The subnet status, including all node keys\n   * @returns ApiQueryResponse\n   */\n  #verifyQueryResponse = (\n    queryResponse: ApiQueryResponse,\n    subnetStatus: SubnetStatus,\n  ): ApiQueryResponse => {\n    if (this.#verifyQuerySignatures === false) {\n      // This should not be called if the user has disabled verification\n      return queryResponse;\n    }\n    const { status, signatures = [], requestId } = queryResponse;\n\n    for (const sig of signatures) {\n      const { timestamp, identity } = sig;\n      const nodeId = Principal.fromUint8Array(identity).toText();\n\n      // Hash is constructed differently depending on the status\n      let hash: Uint8Array;\n      if (status === QueryResponseStatus.Replied) {\n        const { reply } = queryResponse;\n        hash = hashOfMap({\n          status: status,\n          reply: reply,\n          timestamp: BigInt(timestamp),\n          request_id: requestId,\n        });\n      } else if (status === QueryResponseStatus.Rejected) {\n        const { reject_code, reject_message, error_code } = queryResponse;\n        hash = hashOfMap({\n          status: status,\n          reject_code: reject_code,\n          reject_message: reject_message,\n          error_code: error_code,\n          timestamp: BigInt(timestamp),\n          request_id: requestId,\n        });\n      } else {\n        throw UnknownError.fromCode(new UnexpectedErrorCode(`Unknown status: ${status}`));\n      }\n\n      const separatorWithHash = concatBytes(IC_RESPONSE_DOMAIN_SEPARATOR, hash);\n\n      // FIX: check for match without verifying N times\n      const pubKey = subnetStatus.nodeKeys.get(nodeId);\n      if (!pubKey) {\n        throw ProtocolError.fromCode(new MalformedPublicKeyErrorCode());\n      }\n      const rawKey = Ed25519PublicKey.fromDer(pubKey).rawKey;\n      const valid = ed25519.verify(sig.signature, separatorWithHash, rawKey);\n      if (valid) return queryResponse;\n\n      throw TrustError.fromCode(new QuerySignatureVerificationFailedErrorCode(nodeId));\n    }\n    return queryResponse;\n  };\n\n  public async createReadStateRequest(\n    fields: ReadStateOptions,\n    identity?: Identity | Promise<Identity>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): Promise<any> {\n    await this.#asyncGuard();\n    const id = await (identity ?? this.#identity);\n    if (!id) {\n      throw ExternalError.fromCode(new IdentityInvalidErrorCode());\n    }\n    const sender = id.getPrincipal();\n\n    const transformedRequest = await this._transform({\n      request: {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/cbor',\n          ...(this.#credentials ? { Authorization: 'Basic ' + btoa(this.#credentials) } : {}),\n        },\n      },\n      endpoint: Endpoint.ReadState,\n      body: {\n        request_type: ReadRequestType.ReadState,\n        paths: fields.paths,\n        sender,\n        ingress_expiry: calculateIngressExpiry(\n          this.#maxIngressExpiryInMinutes,\n          this.#timeDiffMsecs,\n        ),\n      },\n    });\n\n    // Apply transform for identity.\n    return id.transformRequest(transformedRequest);\n  }\n\n  public async readState(\n    canisterId: Principal | string,\n    fields: ReadStateOptions,\n    _identity?: Identity | Promise<Identity>,\n    // eslint-disable-next-line\n    request?: any,\n  ): Promise<ReadStateResponse> {\n    await this.#rootKeyGuard();\n    const canister = Principal.from(canisterId);\n\n    function getRequestId(options: ReadStateOptions): RequestId | undefined {\n      for (const path of options.paths) {\n        const [pathName, value] = path;\n        const request_status = new TextEncoder().encode('request_status');\n        if (uint8Equals(pathName, request_status)) {\n          return value as RequestId;\n        }\n      }\n    }\n\n    let transformedRequest: ReadStateRequest;\n    let requestId: RequestId | undefined;\n\n    // If a pre-signed request is provided, use it\n    if (request) {\n      // This is a pre-signed request\n      transformedRequest = request;\n      requestId = requestIdOf(transformedRequest);\n    } else {\n      // This is fields, we need to create a request\n      requestId = getRequestId(fields);\n\n      // Always create a fresh request with the current identity\n      const identity = await this.#identity;\n      if (!identity) {\n        throw ExternalError.fromCode(new IdentityInvalidErrorCode());\n      }\n      transformedRequest = await this.createReadStateRequest(fields, identity);\n    }\n\n    this.log.print(\n      `fetching \"/api/v2/canister/${canister}/read_state\" with request:`,\n      transformedRequest,\n    );\n\n    const backoff = this.#backoffStrategy();\n    try {\n      const { responseBodyBytes } = await this.#requestAndRetry({\n        requestFn: () =>\n          this.#fetch(\n            '' + new URL(`/api/v2/canister/${canister.toString()}/read_state`, this.host),\n            {\n              ...this.#fetchOptions,\n              ...transformedRequest.request,\n              body: cbor.encode(transformedRequest.body),\n            },\n          ),\n        backoff,\n        tries: 0,\n      });\n\n      const decodedResponse: ReadStateResponse = cbor.decode(responseBodyBytes);\n\n      this.log.print('Read state response:', decodedResponse);\n\n      return decodedResponse;\n    } catch (error) {\n      let readStateError: AgentError;\n      if (error instanceof AgentError) {\n        // override the error code to include the request details\n        error.code.requestContext = {\n          requestId,\n          senderPubKey: transformedRequest.body.sender_pubkey,\n          senderSignature: transformedRequest.body.sender_sig,\n          ingressExpiry: transformedRequest.body.content.ingress_expiry,\n        };\n        readStateError = error;\n      } else {\n        readStateError = UnknownError.fromCode(new UnexpectedErrorCode(error));\n      }\n      this.log.error(`Error while making read state: ${readStateError.message}`, readStateError);\n      throw readStateError;\n    }\n  }\n\n  public parseTimeFromResponse(response: { certificate: Uint8Array }): number {\n    let tree: HashTree;\n    if (response.certificate) {\n      const decoded = cbor.decode<{ tree: HashTree } | undefined>(response.certificate);\n      if (decoded && 'tree' in decoded) {\n        tree = decoded.tree;\n      } else {\n        throw ProtocolError.fromCode(\n          new HashTreeDecodeErrorCode('Could not decode time from response'),\n        );\n      }\n      const timeLookup = lookup_path(['time'], tree);\n      if (timeLookup.status !== LookupPathStatus.Found) {\n        throw ProtocolError.fromCode(\n          new LookupErrorCode(\n            'Time was not found in the response or was not in its expected format.',\n            timeLookup.status,\n          ),\n        );\n      }\n\n      if (!(timeLookup.value instanceof Uint8Array) && !ArrayBuffer.isView(timeLookup)) {\n        throw ProtocolError.fromCode(\n          new MalformedLookupFoundValueErrorCode('Time was not in its expected format.'),\n        );\n      }\n      const date = decodeTime(timeLookup.value);\n      this.log.print('Time from response:', date);\n      this.log.print('Time from response in milliseconds:', date.getTime());\n      return date.getTime();\n    } else {\n      this.log.warn('No certificate found in response');\n    }\n    return 0;\n  }\n\n  /**\n   * Allows agent to sync its time with the network. Can be called during intialization or mid-lifecycle if the device's clock has drifted away from the network time. This is necessary to set the Expiry for a request\n   * @param {Principal} canisterIdOverride - Pass a canister ID if you need to sync the time with a particular subnet. Uses the ICP ledger canister by default.\n   */\n  public async syncTime(canisterIdOverride?: Principal): Promise<void> {\n    this.#syncTimePromise =\n      this.#syncTimePromise ??\n      (async () => {\n        await this.#rootKeyGuard();\n        const callTime = Date.now();\n        try {\n          if (!canisterIdOverride) {\n            this.log.print(\n              'Syncing time with the IC. No canisterId provided, so falling back to ryjl3-tyaaa-aaaaa-aaaba-cai',\n            );\n          }\n          // Fall back with canisterId of the ICP Ledger\n          const canisterId = canisterIdOverride ?? Principal.from('ryjl3-tyaaa-aaaaa-aaaba-cai');\n\n          const anonymousAgent = HttpAgent.createSync({\n            identity: new AnonymousIdentity(),\n            host: this.host.toString(),\n            fetch: this.#fetch,\n            retryTimes: 0,\n            rootKey: this.rootKey ?? undefined,\n            shouldSyncTime: false,\n          });\n\n          const replicaTimes = await Promise.all(\n            Array(3)\n              .fill(null)\n              .map(async () => {\n                const status = await canisterStatusRequest({\n                  canisterId,\n                  agent: anonymousAgent,\n                  paths: ['time'],\n                  disableCertificateTimeVerification: true, // avoid recursive calls to syncTime\n                });\n\n                const date = status.get('time');\n                if (date instanceof Date) {\n                  return date.getTime();\n                }\n              }, []),\n          );\n\n          const maxReplicaTime = replicaTimes.reduce<number>((max, current) => {\n            return typeof current === 'number' && current > max ? current : max;\n          }, 0);\n\n          if (maxReplicaTime > 0) {\n            this.#timeDiffMsecs = maxReplicaTime - callTime;\n            this.#hasSyncedTime = true;\n            this.log.notify({\n              message: `Syncing time: offset of ${this.#timeDiffMsecs}`,\n              level: 'info',\n            });\n          }\n        } catch (error) {\n          const syncTimeError =\n            error instanceof AgentError\n              ? error\n              : UnknownError.fromCode(new UnexpectedErrorCode(error));\n          this.log.error('Caught exception while attempting to sync time', syncTimeError);\n\n          throw syncTimeError;\n        }\n      })();\n\n    await this.#syncTimePromise.finally(() => {\n      this.#syncTimePromise = null;\n    });\n  }\n\n  public async status(): Promise<JsonObject> {\n    const headers: Record<string, string> = this.#credentials\n      ? {\n          Authorization: 'Basic ' + btoa(this.#credentials),\n        }\n      : {};\n\n    this.log.print(`fetching \"/api/v2/status\"`);\n    const backoff = this.#backoffStrategy();\n    const { responseBodyBytes } = await this.#requestAndRetry({\n      backoff,\n      requestFn: () =>\n        this.#fetch('' + new URL(`/api/v2/status`, this.host), { headers, ...this.#fetchOptions }),\n      tries: 0,\n    });\n    return cbor.decode(responseBodyBytes);\n  }\n\n  public async fetchRootKey(): Promise<Uint8Array> {\n    // Wait for already pending promise to avoid duplicate calls\n    this.#rootKeyPromise =\n      this.#rootKeyPromise ??\n      (async () => {\n        const value = await this.status();\n        // Hex-encoded version of the replica root key\n        this.rootKey = (value as JsonObject & { root_key: Uint8Array }).root_key;\n        return this.rootKey;\n      })();\n\n    // clear rootkey promise and return result\n    return await this.#rootKeyPromise.finally(() => {\n      this.#rootKeyPromise = null;\n    });\n  }\n\n  async #asyncGuard(canisterIdOverride?: Principal): Promise<void> {\n    await Promise.all([this.#rootKeyGuard(), this.#syncTimeGuard(canisterIdOverride)]);\n  }\n\n  async #rootKeyGuard(): Promise<void> {\n    if (this.rootKey) {\n      return;\n    } else if (\n      this.rootKey === null &&\n      this.host.toString() !== 'https://icp-api.io' &&\n      this.#shouldFetchRootKey\n    ) {\n      await this.fetchRootKey();\n    } else {\n      throw ExternalError.fromCode(new MissingRootKeyErrorCode(this.#shouldFetchRootKey));\n    }\n  }\n\n  async #syncTimeGuard(canisterIdOverride?: Principal): Promise<void> {\n    if (this.#shouldSyncTime && !this.hasSyncedTime()) {\n      await this.syncTime(canisterIdOverride);\n    }\n  }\n\n  public invalidateIdentity(): void {\n    this.#identity = null;\n  }\n\n  public replaceIdentity(identity: Identity): void {\n    this.#identity = Promise.resolve(identity);\n  }\n\n  public async fetchSubnetKeys(canisterId: Principal | string) {\n    const effectiveCanisterId: Principal = Principal.from(canisterId);\n    await this.#asyncGuard(effectiveCanisterId);\n    const response = await canisterStatusRequest({\n      canisterId: effectiveCanisterId,\n      paths: ['subnet'],\n      agent: this,\n    });\n\n    const subnetResponse = response.get('subnet');\n    if (subnetResponse && typeof subnetResponse === 'object' && 'nodeKeys' in subnetResponse) {\n      this.#subnetKeys.set(effectiveCanisterId.toText(), subnetResponse as SubnetStatus);\n      return subnetResponse as SubnetStatus;\n    }\n    // If the subnet status is not returned, return undefined\n    return undefined;\n  }\n\n  protected _transform(request: HttpAgentRequest): Promise<HttpAgentRequest> {\n    let p = Promise.resolve(request);\n    if (request.endpoint === Endpoint.Call) {\n      for (const fn of this.#updatePipeline) {\n        p = p.then(r => fn(r).then(r2 => r2 || r));\n      }\n    } else {\n      for (const fn of this.#queryPipeline) {\n        p = p.then(r => fn(r).then(r2 => r2 || r));\n      }\n    }\n\n    return p;\n  }\n\n  /**\n   * Returns the time difference in milliseconds between the IC network clock and the client's clock,\n   * after the clock has been synced.\n   *\n   * If the time has not been synced, returns `0`.\n   */\n  public getTimeDiffMsecs(): number {\n    return this.#timeDiffMsecs;\n  }\n\n  /**\n   * Returns `true` if the time has been synced at least once with the IC network, `false` otherwise.\n   */\n  public hasSyncedTime(): boolean {\n    return this.#hasSyncedTime;\n  }\n}\n\n/**\n * Calculates the ingress expiry time based on the maximum allowed expiry in minutes and the time difference in milliseconds.\n * The expiry is rounded down according to the {@link Expiry.fromDeltaInMilliseconds} method.\n * @param maxIngressExpiryInMinutes - The maximum ingress expiry time in minutes.\n * @param timeDiffMsecs - The time difference in milliseconds to adjust the expiry.\n * @returns The calculated ingress expiry as an Expiry object.\n */\nexport function calculateIngressExpiry(\n  maxIngressExpiryInMinutes: number,\n  timeDiffMsecs: number,\n): Expiry {\n  const ingressExpiryMs = maxIngressExpiryInMinutes * MINUTE_TO_MSECS;\n  return Expiry.fromDeltaInMilliseconds(ingressExpiryMs, timeDiffMsecs);\n}\n", "import { Principal } from '@dfinity/principal';\nimport {\n  type HttpDetailsResponse,\n  type NodeSignature,\n  type ReplicaRejectCode,\n} from './agent/api.ts';\nimport { type RequestId } from './request_id.ts';\nimport { type Expiry, type RequestStatusResponseStatus } from './agent/http/index.ts';\nimport { type HttpHeaderField } from './agent/http/types.ts';\nimport { LookupPathStatus, LookupSubtreeStatus } from './certificate.ts';\nimport { bytesToHex } from '@noble/hashes/utils';\n\nexport enum ErrorKindEnum {\n  Trust = 'Trust',\n  Protocol = 'Protocol',\n  Reject = 'Reject',\n  Transport = 'Transport',\n  External = 'External',\n  Limit = 'Limit',\n  Input = 'Input',\n  Unknown = 'Unknown',\n}\n\nexport type RequestContext = {\n  requestId?: RequestId;\n  senderPubKey: Uint8Array;\n  senderSignature: Uint8Array;\n  ingressExpiry: Expiry;\n};\n\nexport type CallContext = {\n  canisterId: Principal;\n  methodName: string;\n  httpDetails: HttpDetailsResponse;\n};\n\nabstract class ErrorCode {\n  public requestContext?: RequestContext;\n  public callContext?: CallContext;\n\n  constructor(public readonly isCertified: boolean = false) {}\n\n  public abstract toErrorMessage(): string;\n\n  public toString(): string {\n    let errorMessage = this.toErrorMessage();\n    if (this.requestContext) {\n      errorMessage +=\n        `\\nRequest context:\\n` +\n        `  Request ID (hex): ${this.requestContext.requestId ? bytesToHex(this.requestContext.requestId) : 'undefined'}\\n` +\n        `  Sender pubkey (hex): ${bytesToHex(this.requestContext.senderPubKey)}\\n` +\n        `  Sender signature (hex): ${bytesToHex(this.requestContext.senderSignature)}\\n` +\n        `  Ingress expiry: ${this.requestContext.ingressExpiry.toString()}`;\n    }\n    if (this.callContext) {\n      errorMessage +=\n        `\\nCall context:\\n` +\n        `  Canister ID: ${this.callContext.canisterId.toText()}\\n` +\n        `  Method name: ${this.callContext.methodName}\\n` +\n        `  HTTP details: ${JSON.stringify(this.callContext.httpDetails, null, 2)}`;\n    }\n    return errorMessage;\n  }\n}\n\n/**\n * An error that happens in the Agent. This is the root of all errors and should be used\n * everywhere in the Agent code (this package).\n *\n * To know if the error is certified, use the `isCertified` getter.\n */\nexport class AgentError extends Error {\n  public name = 'AgentError';\n  // override the Error.cause property\n  public readonly cause: { code: ErrorCode; kind: ErrorKindEnum };\n\n  get code(): ErrorCode {\n    return this.cause.code;\n  }\n  set code(code: ErrorCode) {\n    this.cause.code = code;\n  }\n\n  get kind(): ErrorKindEnum {\n    return this.cause.kind;\n  }\n  set kind(kind: ErrorKindEnum) {\n    this.cause.kind = kind;\n  }\n\n  /**\n   * Reads the `isCertified` property of the underlying error code.\n   * @returns `true` if the error is certified, `false` otherwise.\n   */\n  get isCertified(): boolean {\n    return this.code.isCertified;\n  }\n\n  constructor(code: ErrorCode, kind: ErrorKindEnum) {\n    super(code.toString());\n    this.cause = { code, kind };\n    Object.setPrototypeOf(this, AgentError.prototype);\n  }\n\n  public hasCode<C extends ErrorCode>(code: new (...args: never[]) => C): boolean {\n    return this.code instanceof code;\n  }\n\n  public toString(): string {\n    return `${this.name} (${this.kind}): ${this.message}`;\n  }\n}\n\nclass ErrorKind extends AgentError {\n  public static fromCode<C extends ErrorCode, E extends ErrorKind>(\n    this: new (code: C) => E,\n    code: C,\n  ): E {\n    return new this(code);\n  }\n}\n\nexport class TrustError extends ErrorKind {\n  public name = 'TrustError';\n\n  constructor(code: ErrorCode) {\n    super(code, ErrorKindEnum.Trust);\n    Object.setPrototypeOf(this, TrustError.prototype);\n  }\n}\n\nexport class ProtocolError extends ErrorKind {\n  public name = 'ProtocolError';\n\n  constructor(code: ErrorCode) {\n    super(code, ErrorKindEnum.Protocol);\n    Object.setPrototypeOf(this, ProtocolError.prototype);\n  }\n}\n\nexport class RejectError extends ErrorKind {\n  public name = 'RejectError';\n\n  constructor(code: ErrorCode) {\n    super(code, ErrorKindEnum.Reject);\n    Object.setPrototypeOf(this, RejectError.prototype);\n  }\n}\n\nexport class TransportError extends ErrorKind {\n  public name = 'TransportError';\n\n  constructor(code: ErrorCode) {\n    super(code, ErrorKindEnum.Transport);\n    Object.setPrototypeOf(this, TransportError.prototype);\n  }\n}\n\nexport class ExternalError extends ErrorKind {\n  public name = 'ExternalError';\n\n  constructor(code: ErrorCode) {\n    super(code, ErrorKindEnum.External);\n    Object.setPrototypeOf(this, ExternalError.prototype);\n  }\n}\n\nexport class LimitError extends ErrorKind {\n  public name = 'LimitError';\n\n  constructor(code: ErrorCode) {\n    super(code, ErrorKindEnum.Limit);\n    Object.setPrototypeOf(this, LimitError.prototype);\n  }\n}\n\nexport class InputError extends ErrorKind {\n  public name = 'InputError';\n\n  constructor(code: ErrorCode) {\n    super(code, ErrorKindEnum.Input);\n    Object.setPrototypeOf(this, InputError.prototype);\n  }\n}\n\nexport class UnknownError extends ErrorKind {\n  public name = 'UnknownError';\n\n  constructor(code: ErrorCode) {\n    super(code, ErrorKindEnum.Unknown);\n    Object.setPrototypeOf(this, UnknownError.prototype);\n  }\n}\n\nexport class CertificateVerificationErrorCode extends ErrorCode {\n  public name = 'CertificateVerificationErrorCode';\n\n  constructor(\n    public readonly reason: string,\n    public readonly error?: unknown,\n  ) {\n    super();\n    Object.setPrototypeOf(this, CertificateVerificationErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    let errorMessage = this.reason;\n    if (this.error) {\n      errorMessage += `: ${formatUnknownError(this.error)}`;\n    }\n    return `Certificate verification error: \"${errorMessage}\"`;\n  }\n}\n\nexport class CertificateTimeErrorCode extends ErrorCode {\n  public name = 'CertificateTimeErrorCode';\n\n  constructor(\n    public readonly maxAgeInMinutes: number,\n    public readonly certificateTime: Date,\n    public readonly currentTime: Date,\n    public readonly timeDiffMsecs: number,\n    public readonly ageType: 'past' | 'future',\n  ) {\n    super();\n    Object.setPrototypeOf(this, CertificateTimeErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Certificate is signed more than ${this.maxAgeInMinutes} minutes in the ${this.ageType}. Certificate time: ${this.certificateTime.toISOString()} Current time: ${this.currentTime.toISOString()} Clock drift: ${this.timeDiffMsecs}ms`;\n  }\n}\n\nexport class CertificateHasTooManyDelegationsErrorCode extends ErrorCode {\n  public name = 'CertificateHasTooManyDelegationsErrorCode';\n\n  constructor() {\n    super();\n    Object.setPrototypeOf(this, CertificateHasTooManyDelegationsErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return 'Certificate has too many delegations';\n  }\n}\n\nexport class CertificateNotAuthorizedErrorCode extends ErrorCode {\n  public name = 'CertificateNotAuthorizedErrorCode';\n\n  constructor(\n    public readonly canisterId: Principal,\n    public readonly subnetId: Principal,\n  ) {\n    super();\n    Object.setPrototypeOf(this, CertificateNotAuthorizedErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `The certificate contains a delegation that does not include the canister ${this.canisterId.toText()} in the canister_ranges field. Subnet ID: ${this.subnetId.toText()}`;\n  }\n}\n\nexport class LookupErrorCode extends ErrorCode {\n  public name = 'LookupErrorCode';\n\n  constructor(\n    public readonly message: string,\n    public readonly lookupStatus: LookupPathStatus | LookupSubtreeStatus,\n  ) {\n    super();\n    Object.setPrototypeOf(this, LookupErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `${this.message}. Lookup status: ${this.lookupStatus}`;\n  }\n}\n\nexport class MalformedLookupFoundValueErrorCode extends ErrorCode {\n  public name = 'MalformedLookupFoundValueErrorCode';\n\n  constructor(public readonly message: string) {\n    super();\n    Object.setPrototypeOf(this, MalformedLookupFoundValueErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return this.message;\n  }\n}\n\nexport class MissingLookupValueErrorCode extends ErrorCode {\n  public name = 'MissingLookupValueErrorCode';\n\n  constructor(public readonly message: string) {\n    super();\n    Object.setPrototypeOf(this, MissingLookupValueErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return this.message;\n  }\n}\n\nexport class DerKeyLengthMismatchErrorCode extends ErrorCode {\n  public name = 'DerKeyLengthMismatchErrorCode';\n\n  constructor(\n    public readonly expectedLength: number,\n    public readonly actualLength: number,\n  ) {\n    super();\n    Object.setPrototypeOf(this, DerKeyLengthMismatchErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `BLS DER-encoded public key must be ${this.expectedLength} bytes long, but is ${this.actualLength} bytes long`;\n  }\n}\n\nexport class DerPrefixMismatchErrorCode extends ErrorCode {\n  public name = 'DerPrefixMismatchErrorCode';\n\n  constructor(\n    public readonly expectedPrefix: Uint8Array,\n    public readonly actualPrefix: Uint8Array,\n  ) {\n    super();\n    Object.setPrototypeOf(this, DerPrefixMismatchErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `BLS DER-encoded public key is invalid. Expected the following prefix: ${bytesToHex(this.expectedPrefix)}, but got ${bytesToHex(this.actualPrefix)}`;\n  }\n}\n\nexport class DerDecodeLengthMismatchErrorCode extends ErrorCode {\n  public name = 'DerDecodeLengthMismatchErrorCode';\n\n  constructor(\n    public readonly expectedLength: number,\n    public readonly actualLength: number,\n  ) {\n    super();\n    Object.setPrototypeOf(this, DerDecodeLengthMismatchErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `DER payload mismatch: Expected length ${this.expectedLength}, actual length: ${this.actualLength}`;\n  }\n}\n\nexport class DerDecodeErrorCode extends ErrorCode {\n  public name = 'DerDecodeErrorCode';\n\n  constructor(public readonly error: string) {\n    super();\n    Object.setPrototypeOf(this, DerDecodeErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Failed to decode DER: ${this.error}`;\n  }\n}\n\nexport class DerEncodeErrorCode extends ErrorCode {\n  public name = 'DerEncodeErrorCode';\n\n  constructor(public readonly error: string) {\n    super();\n    Object.setPrototypeOf(this, DerEncodeErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Failed to encode DER: ${this.error}`;\n  }\n}\n\nexport class CborDecodeErrorCode extends ErrorCode {\n  public name = 'CborDecodeErrorCode';\n\n  constructor(\n    public readonly error: unknown,\n    public readonly input: Uint8Array,\n  ) {\n    super();\n    Object.setPrototypeOf(this, CborDecodeErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Failed to decode CBOR: ${formatUnknownError(this.error)}, input: ${bytesToHex(this.input)}`;\n  }\n}\n\nexport class CborEncodeErrorCode extends ErrorCode {\n  public name = 'CborEncodeErrorCode';\n\n  constructor(\n    public readonly error: unknown,\n    public readonly value: unknown,\n  ) {\n    super();\n    Object.setPrototypeOf(this, CborEncodeErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Failed to encode CBOR: ${formatUnknownError(this.error)}, input: ${this.value}`;\n  }\n}\n\nexport class HexDecodeErrorCode extends ErrorCode {\n  public name = 'HexDecodeErrorCode';\n\n  constructor(public readonly error: string) {\n    super();\n    Object.setPrototypeOf(this, HexDecodeErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Failed to decode hex: ${this.error}`;\n  }\n}\n\nexport class TimeoutWaitingForResponseErrorCode extends ErrorCode {\n  public name = 'TimeoutWaitingForResponseErrorCode';\n\n  constructor(\n    public readonly message: string,\n    public readonly requestId?: RequestId,\n    public readonly status?: RequestStatusResponseStatus,\n  ) {\n    super();\n    Object.setPrototypeOf(this, TimeoutWaitingForResponseErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    let errorMessage = `${this.message}\\n`;\n    if (this.requestId) {\n      errorMessage += `  Request ID: ${bytesToHex(this.requestId)}\\n`;\n    }\n    if (this.status) {\n      errorMessage += `  Request status: ${this.status}\\n`;\n    }\n    return errorMessage;\n  }\n}\n\nexport class CertificateOutdatedErrorCode extends ErrorCode {\n  public name = 'CertificateOutdatedErrorCode';\n\n  constructor(\n    public readonly maxIngressExpiryInMinutes: number,\n    public readonly requestId: RequestId,\n    public readonly retryTimes?: number,\n  ) {\n    super();\n    Object.setPrototypeOf(this, CertificateOutdatedErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    let errorMessage = `Certificate is stale (over ${this.maxIngressExpiryInMinutes} minutes). Is the computer's clock synchronized?\\n  Request ID: ${bytesToHex(this.requestId)}\\n`;\n    if (this.retryTimes !== undefined) {\n      errorMessage += `  Retried ${this.retryTimes} times.`;\n    }\n    return errorMessage;\n  }\n}\n\nexport class CertifiedRejectErrorCode extends ErrorCode {\n  public name = 'CertifiedRejectErrorCode';\n\n  constructor(\n    public readonly requestId: RequestId,\n    public readonly rejectCode: ReplicaRejectCode,\n    public readonly rejectMessage: string,\n    public readonly rejectErrorCode: string | undefined,\n  ) {\n    super(true);\n    Object.setPrototypeOf(this, CertifiedRejectErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return (\n      `The replica returned a rejection error:\\n` +\n      `  Request ID: ${bytesToHex(this.requestId)}\\n` +\n      `  Reject code: ${this.rejectCode}\\n` +\n      `  Reject text: ${this.rejectMessage}\\n` +\n      `  Error code: ${this.rejectErrorCode}\\n`\n    );\n  }\n}\n\nexport class UncertifiedRejectErrorCode extends ErrorCode {\n  public name = 'UncertifiedRejectErrorCode';\n\n  constructor(\n    public readonly requestId: RequestId,\n    public readonly rejectCode: ReplicaRejectCode,\n    public readonly rejectMessage: string,\n    public readonly rejectErrorCode: string | undefined,\n    public readonly signatures: NodeSignature[] | undefined,\n  ) {\n    super();\n    Object.setPrototypeOf(this, UncertifiedRejectErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return (\n      `The replica returned a rejection error:\\n` +\n      `  Request ID: ${bytesToHex(this.requestId)}\\n` +\n      `  Reject code: ${this.rejectCode}\\n` +\n      `  Reject text: ${this.rejectMessage}\\n` +\n      `  Error code: ${this.rejectErrorCode}\\n`\n    );\n  }\n}\n\nexport class UncertifiedRejectUpdateErrorCode extends ErrorCode {\n  public name = 'UncertifiedRejectUpdateErrorCode';\n\n  constructor(\n    public readonly requestId: RequestId,\n    public readonly rejectCode: ReplicaRejectCode,\n    public readonly rejectMessage: string,\n    public readonly rejectErrorCode: string | undefined,\n  ) {\n    super();\n    Object.setPrototypeOf(this, UncertifiedRejectUpdateErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return (\n      `The replica returned a rejection error:\\n` +\n      `  Request ID: ${bytesToHex(this.requestId)}\\n` +\n      `  Reject code: ${this.rejectCode}\\n` +\n      `  Reject text: ${this.rejectMessage}\\n` +\n      `  Error code: ${this.rejectErrorCode}\\n`\n    );\n  }\n}\n\nexport class RequestStatusDoneNoReplyErrorCode extends ErrorCode {\n  public name = 'RequestStatusDoneNoReplyErrorCode';\n\n  constructor(public readonly requestId: RequestId) {\n    super();\n    Object.setPrototypeOf(this, RequestStatusDoneNoReplyErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return (\n      `Call was marked as done but we never saw the reply:\\n` +\n      `  Request ID: ${bytesToHex(this.requestId)}\\n`\n    );\n  }\n}\n\nexport class MissingRootKeyErrorCode extends ErrorCode {\n  public name = 'MissingRootKeyErrorCode';\n\n  constructor(public readonly shouldFetchRootKey?: boolean) {\n    super();\n    Object.setPrototypeOf(this, MissingRootKeyErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    if (this.shouldFetchRootKey === undefined) {\n      return 'Agent is missing root key';\n    }\n    return `Agent is missing root key and the shouldFetchRootKey value is set to ${this.shouldFetchRootKey}. The root key should only be unknown if you are in local development. Otherwise you should avoid fetching and use the default IC Root Key or the known root key of your environment.`;\n  }\n}\n\nexport class HashValueErrorCode extends ErrorCode {\n  public name = 'HashValueErrorCode';\n\n  constructor(public readonly value: unknown) {\n    super();\n    Object.setPrototypeOf(this, HashValueErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Attempt to hash a value of unsupported type: ${this.value}`;\n  }\n}\n\nexport class HttpDefaultFetchErrorCode extends ErrorCode {\n  public name = 'HttpDefaultFetchErrorCode';\n\n  constructor(public readonly error: string) {\n    super();\n    Object.setPrototypeOf(this, HttpDefaultFetchErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return this.error;\n  }\n}\n\nexport class IdentityInvalidErrorCode extends ErrorCode {\n  public name = 'IdentityInvalidErrorCode';\n\n  constructor() {\n    super();\n    Object.setPrototypeOf(this, IdentityInvalidErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return \"This identity has expired due this application's security policy. Please refresh your authentication.\";\n  }\n}\n\nexport class IngressExpiryInvalidErrorCode extends ErrorCode {\n  public name = 'IngressExpiryInvalidErrorCode';\n\n  constructor(\n    public readonly message: string,\n    public readonly providedIngressExpiryInMinutes: number,\n  ) {\n    super();\n    Object.setPrototypeOf(this, IngressExpiryInvalidErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `${this.message}. Provided ingress expiry time is ${this.providedIngressExpiryInMinutes} minutes.`;\n  }\n}\n\nexport class CreateHttpAgentErrorCode extends ErrorCode {\n  public name = 'CreateHttpAgentErrorCode';\n\n  constructor() {\n    super();\n    Object.setPrototypeOf(this, CreateHttpAgentErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return 'Failed to create agent from provided agent';\n  }\n}\n\nexport class MalformedSignatureErrorCode extends ErrorCode {\n  public name = 'MalformedSignatureErrorCode';\n\n  constructor(public readonly error: string) {\n    super();\n    Object.setPrototypeOf(this, MalformedSignatureErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Query response contained a malformed signature: ${this.error}`;\n  }\n}\n\nexport class MissingSignatureErrorCode extends ErrorCode {\n  public name = 'MissingSignatureErrorCode';\n\n  constructor() {\n    super();\n    Object.setPrototypeOf(this, MissingSignatureErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return 'Query response did not contain any node signatures';\n  }\n}\n\nexport class MalformedPublicKeyErrorCode extends ErrorCode {\n  public name = 'MalformedPublicKeyErrorCode';\n\n  constructor() {\n    super();\n    Object.setPrototypeOf(this, MalformedPublicKeyErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return 'Read state response contained a malformed public key';\n  }\n}\n\nexport class QuerySignatureVerificationFailedErrorCode extends ErrorCode {\n  public name = 'QuerySignatureVerificationFailedErrorCode';\n\n  constructor(public readonly nodeId: string) {\n    super();\n    Object.setPrototypeOf(this, QuerySignatureVerificationFailedErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Query signature verification failed. Node ID: ${this.nodeId}`;\n  }\n}\n\nexport class UnexpectedErrorCode extends ErrorCode {\n  public name = 'UnexpectedErrorCode';\n\n  constructor(public readonly error: unknown) {\n    super();\n    Object.setPrototypeOf(this, UnexpectedErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Unexpected error: ${formatUnknownError(this.error)}`;\n  }\n}\n\nexport class HashTreeDecodeErrorCode extends ErrorCode {\n  public name = 'HashTreeDecodeErrorCode';\n\n  constructor(public readonly error: string) {\n    super();\n    Object.setPrototypeOf(this, HashTreeDecodeErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Failed to decode certificate: ${this.error}`;\n  }\n}\n\nexport class HttpErrorCode extends ErrorCode {\n  public name = 'HttpErrorCode';\n\n  constructor(\n    public readonly status: number,\n    public readonly statusText: string,\n    public readonly headers: HttpHeaderField[],\n    public readonly bodyText?: string,\n  ) {\n    super();\n    Object.setPrototypeOf(this, HttpErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    let errorMessage =\n      'HTTP request failed:\\n' +\n      `  Status: ${this.status} (${this.statusText})\\n` +\n      `  Headers: ${JSON.stringify(this.headers)}\\n`;\n    if (this.bodyText) {\n      errorMessage += `  Body: ${this.bodyText}\\n`;\n    }\n    return errorMessage;\n  }\n}\n\nexport class HttpV3ApiNotSupportedErrorCode extends ErrorCode {\n  public name = 'HttpV3ApiNotSupportedErrorCode';\n\n  constructor() {\n    super();\n    Object.setPrototypeOf(this, HttpV3ApiNotSupportedErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return 'HTTP request failed: v3 API is not supported';\n  }\n}\n\nexport class HttpFetchErrorCode extends ErrorCode {\n  public name = 'HttpFetchErrorCode';\n\n  constructor(public readonly error: unknown) {\n    super();\n    Object.setPrototypeOf(this, HttpFetchErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Failed to fetch HTTP request: ${formatUnknownError(this.error)}`;\n  }\n}\n\nexport class MissingCanisterIdErrorCode extends ErrorCode {\n  public name = 'MissingCanisterIdErrorCode';\n\n  constructor(public readonly receivedCanisterId: unknown) {\n    super();\n    Object.setPrototypeOf(this, MissingCanisterIdErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Canister ID is required, but received ${typeof this.receivedCanisterId} instead. If you are using automatically generated declarations, this may be because your application is not setting the canister ID in process.env correctly.`;\n  }\n}\n\nexport class InvalidReadStateRequestErrorCode extends ErrorCode {\n  public name = 'InvalidReadStateRequestErrorCode';\n\n  constructor(public readonly request: unknown) {\n    super();\n    Object.setPrototypeOf(this, InvalidReadStateRequestErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Invalid read state request: ${this.request}`;\n  }\n}\n\nexport class ExpiryJsonDeserializeErrorCode extends ErrorCode {\n  public name = 'ExpiryJsonDeserializeErrorCode';\n\n  constructor(public readonly error: string) {\n    super();\n    Object.setPrototypeOf(this, ExpiryJsonDeserializeErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Failed to deserialize expiry: ${this.error}`;\n  }\n}\n\nfunction formatUnknownError(error: unknown): string {\n  if (error instanceof Error) {\n    return error.stack ?? error.message;\n  }\n  try {\n    return JSON.stringify(error);\n  } catch {\n    return String(error);\n  }\n}\n\n/**\n * Special error used to indicate that a code path is unreachable.\n *\n * For internal use only.\n */\nexport const UNREACHABLE_ERROR = new Error('unreachable');\n", "import { Principal } from '@dfinity/principal';\nimport { type HttpAgentRequest } from './agent/http/types.ts';\nimport { requestIdOf } from './request_id.ts';\nimport { bytesToHex, concatBytes } from '@noble/hashes/utils';\nimport { IC_REQUEST_DOMAIN_SEPARATOR } from './constants.ts';\n/**\n * A Key Pair, containing a secret and public key.\n */\nexport interface KeyPair {\n  secretKey: Uint8Array;\n  publicKey: PublicKey;\n}\n\n/**\n * A public key that is DER encoded. This is a branded Uint8Array.\n */\nexport type DerEncodedPublicKey = Uint8Array & { __derEncodedPublicKey__?: void };\n\n/**\n * A signature array buffer.\n */\nexport type Signature = Uint8Array & { __signature__: void };\n\n/**\n * A Public Key implementation.\n */\nexport interface PublicKey {\n  toDer(): DerEncodedPublicKey;\n  // rawKey, toRaw, and derKey are optional for backwards compatibility.\n  toRaw?(): Uint8Array;\n  rawKey?: Uint8Array;\n  derKey?: DerEncodedPublicKey;\n}\n\n/**\n * A General Identity object. This does not have to be a private key (for example,\n * the Anonymous identity), but it must be able to transform request.\n */\nexport interface Identity {\n  /**\n   * Get the principal represented by this identity. Normally should be a\n   * `Principal.selfAuthenticating()`.\n   */\n  getPrincipal(): Principal;\n\n  /**\n   * Transform a request into a signed version of the request. This is done last\n   * after the transforms on the body of a request. The returned object can be\n   * anything, but must be serializable to CBOR.\n   */\n  transformRequest(request: HttpAgentRequest): Promise<unknown>;\n}\n\n/**\n * An Identity that can sign blobs.\n */\nexport abstract class SignIdentity implements Identity {\n  protected _principal: Principal | undefined;\n\n  /**\n   * Returns the public key that would match this identity's signature.\n   */\n  public abstract getPublicKey(): PublicKey;\n\n  /**\n   * Signs a blob of data, with this identity's private key.\n   */\n  public abstract sign(blob: Uint8Array): Promise<Signature>;\n\n  /**\n   * Get the principal represented by this identity. Normally should be a\n   * `Principal.selfAuthenticating()`.\n   */\n  public getPrincipal(): Principal {\n    if (!this._principal) {\n      this._principal = Principal.selfAuthenticating(new Uint8Array(this.getPublicKey().toDer()));\n    }\n    return this._principal;\n  }\n\n  /**\n   * Transform a request into a signed version of the request. This is done last\n   * after the transforms on the body of a request. The returned object can be\n   * anything, but must be serializable to CBOR.\n   * @param request - internet computer request to transform\n   */\n  public async transformRequest(request: HttpAgentRequest): Promise<unknown> {\n    const { body, ...fields } = request;\n    const requestId = requestIdOf(body);\n    return {\n      ...fields,\n      body: {\n        content: body,\n        sender_pubkey: this.getPublicKey().toDer(),\n        sender_sig: await this.sign(concatBytes(IC_REQUEST_DOMAIN_SEPARATOR, requestId)),\n      },\n    };\n  }\n}\n\nexport class AnonymousIdentity implements Identity {\n  public getPrincipal(): Principal {\n    return Principal.anonymous();\n  }\n\n  public async transformRequest(request: HttpAgentRequest): Promise<unknown> {\n    return {\n      ...request,\n      body: { content: request.body },\n    };\n  }\n}\n\n/*\n * We need to communicate with other agents on the page about identities,\n * but those messages may need to go across boundaries where it's not possible to\n * serialize/deserialize object prototypes easily.\n * So these are lightweight, serializable objects that contain enough information to recreate\n * SignIdentities, but don't commit to having all methods of SignIdentity.\n *\n * Use Case:\n * * DOM Events that let differently-versioned components communicate to one another about\n *   Identities, even if they're using slightly different versions of agent packages to\n *   create/interpret them.\n */\nexport interface AnonymousIdentityDescriptor {\n  type: 'AnonymousIdentity';\n}\nexport interface PublicKeyIdentityDescriptor {\n  type: 'PublicKeyIdentity';\n  publicKey: string;\n}\nexport type IdentityDescriptor = AnonymousIdentityDescriptor | PublicKeyIdentityDescriptor;\n\n/**\n * Create an IdentityDescriptor from a @dfinity/identity Identity\n * @param identity - identity describe in returned descriptor\n */\nexport function createIdentityDescriptor(\n  identity: SignIdentity | AnonymousIdentity,\n): IdentityDescriptor {\n  const identityIndicator: IdentityDescriptor =\n    'getPublicKey' in identity\n      ? { type: 'PublicKeyIdentity', publicKey: bytesToHex(identity.getPublicKey().toDer()) }\n      : { type: 'AnonymousIdentity' };\n  return identityIndicator;\n}\n", "import { lebEncode, compare } from '@dfinity/candid';\nimport { Principal } from '@dfinity/principal';\nimport { HashValueErrorCode, InputError } from './errors.ts';\nimport { uint8FromBufLike } from './utils/buffer.ts';\nimport { concatBytes } from '@noble/hashes/utils';\nimport { sha256 } from '@noble/hashes/sha2';\n\nexport type RequestId = Uint8Array & { __requestId__: void };\n\ninterface ToHashable {\n  toHash(): unknown;\n}\n\n/**\n *\n * @param value unknown value\n * @returns Uint8Array\n */\nexport function hashValue(value: unknown): Uint8Array {\n  if (typeof value === 'string') {\n    return hashString(value);\n  } else if (typeof value === 'number') {\n    return sha256(lebEncode(value));\n  } else if (value instanceof Uint8Array || ArrayBuffer.isView(value)) {\n    return sha256(uint8FromBufLike(value));\n  } else if (Array.isArray(value)) {\n    const vals = value.map(hashValue);\n    return sha256(concatBytes(...vals));\n  } else if (value && typeof value === 'object' && (value as Principal)._isPrincipal) {\n    return sha256((value as Principal).toUint8Array());\n  } else if (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof (value as ToHashable).toHash === 'function'\n  ) {\n    return hashValue((value as ToHashable).toHash());\n    // TODO This should be move to a specific async method as the webauthn flow required\n    // the flow to be synchronous to ensure Safari touch id works.\n    // } else if (value instanceof Promise) {\n    //   return value.then(x => hashValue(x));\n  } else if (typeof value === 'object') {\n    return hashOfMap(value as Record<string, unknown>);\n  } else if (typeof value === 'bigint') {\n    // Do this check much later than the other bigint check because this one is much less\n    // type-safe.\n    // So we want to try all the high-assurance type guards before this 'probable' one.\n    return sha256(lebEncode(value));\n  }\n  throw InputError.fromCode(new HashValueErrorCode(value));\n}\n\nconst hashString = (value: string): Uint8Array => {\n  const encoded = new TextEncoder().encode(value);\n  return sha256(encoded);\n};\n\n/**\n * Get the RequestId of the provided ic-ref request.\n * RequestId is the result of the representation-independent-hash function.\n * https://sdk.dfinity.org/docs/interface-spec/index.html#hash-of-map\n * @param request - ic-ref request to hash into RequestId\n */\nexport function requestIdOf(request: Record<string, unknown>): RequestId {\n  return hashOfMap(request) as RequestId;\n}\n\n/**\n * Hash a map into a Uint8Array using the representation-independent-hash function.\n * https://sdk.dfinity.org/docs/interface-spec/index.html#hash-of-map\n * @param map - Any non-nested object\n * @returns Uint8Array\n */\nexport function hashOfMap(map: Record<string, unknown>): Uint8Array {\n  const hashed: Array<[Uint8Array, Uint8Array]> = Object.entries(map)\n    .filter(([, value]) => value !== undefined)\n    .map(([key, value]: [string, unknown]) => {\n      const hashedKey = hashString(key);\n      const hashedValue = hashValue(value);\n\n      return [hashedKey, hashedValue] as [Uint8Array, Uint8Array];\n    });\n\n  const traversed: Array<[Uint8Array, Uint8Array]> = hashed;\n\n  const sorted: Array<[Uint8Array, Uint8Array]> = traversed.sort(([k1], [k2]) => {\n    return compare(k1, k2);\n  });\n\n  const concatenated = concatBytes(...sorted.map(x => concatBytes(...x)));\n  const result = sha256(concatenated);\n  return result;\n}\n", "/**\n * Returns a true Uint8Array from an ArrayBufferLike object.\n * @param bufLike a buffer-like object\n * @returns Uint8Array\n */\nexport function uint8FromBufLike(\n  bufLike:\n    | ArrayBuffer\n    | Uint8Array\n    | DataView\n    | ArrayBufferView\n    | ArrayBufferLike\n    | [number]\n    | number[]\n    | { buffer: ArrayBuffer },\n): Uint8Array {\n  if (!bufLike) {\n    throw new Error('Input cannot be null or undefined');\n  }\n\n  if (bufLike instanceof Uint8Array) {\n    return bufLike;\n  }\n  if (bufLike instanceof ArrayBuffer) {\n    return new Uint8Array(bufLike);\n  }\n  if (Array.isArray(bufLike)) {\n    return new Uint8Array(bufLike);\n  }\n  if ('buffer' in bufLike) {\n    return uint8FromBufLike(bufLike.buffer);\n  }\n  return new Uint8Array(bufLike);\n}\n\n/**\n * Returns a true ArrayBuffer from a Uint8Array, as Uint8Array.buffer is unsafe.\n * @param {Uint8Array} arr Uint8Array to convert\n * @returns ArrayBuffer\n */\nexport function uint8ToBuf(arr: Uint8Array): ArrayBuffer {\n  const buf = new ArrayBuffer(arr.byteLength);\n  const view = new Uint8Array(buf);\n  view.set(arr);\n  return buf;\n}\n\n/**\n * Compares two Uint8Arrays for equality.\n * @param a The first Uint8Array.\n * @param b The second Uint8Array.\n * @returns True if the Uint8Arrays are equal, false otherwise.\n */\nexport function uint8Equals(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n", "// Default delta for ingress expiry is 5 minutes.\nexport const DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS = 5 * 60 * 1000;\n\n/**\n * The `\\x0Aic-request` domain separator used in the signature of IC requests.\n */\nexport const IC_REQUEST_DOMAIN_SEPARATOR = new TextEncoder().encode('\\x0Aic-request');\n\n/**\n * The `\\x0Bic-response` domain separator used in the signature of IC responses.\n */\nexport const IC_RESPONSE_DOMAIN_SEPARATOR = new TextEncoder().encode('\\x0Bic-response');\n\n/**\n * The `\\x1Aic-request-auth-delegation` domain separator used in the signature of delegations.\n */\nexport const IC_REQUEST_AUTH_DELEGATION_DOMAIN_SEPARATOR = new TextEncoder().encode(\n  '\\x1Aic-request-auth-delegation',\n);\n", "import { Principal } from '@dfinity/principal';\nimport * as cbor from '@dfinity/cbor';\nimport { CborDecodeErrorCode, CborEncodeErrorCode, InputError } from './errors.ts';\nimport { Expiry } from './agent/index.ts';\n\n/**\n * Used to extend classes that need to provide a custom value for the CBOR encoding process.\n */\nexport abstract class ToCborValue {\n  /**\n   * Returns a value that can be encoded with CBOR. Typically called in the replacer function of the {@link encode} function.\n   */\n  public abstract toCborValue(): cbor.CborValue;\n}\n\nfunction hasCborValueMethod(value: unknown): value is ToCborValue {\n  return typeof value === 'object' && value !== null && 'toCborValue' in value;\n}\n\n/**\n * Encode a JavaScript value into CBOR. If the value is an instance of {@link ToCborValue},\n * the {@link ToCborValue.toCborValue} method will be called to get the value to encode.\n * @param value The value to encode\n */\nexport function encode(value: unknown): Uint8Array {\n  try {\n    return cbor.encodeWithSelfDescribedTag(value, value => {\n      if (Principal.isPrincipal(value)) {\n        return value.toUint8Array();\n      }\n\n      if (Expiry.isExpiry(value)) {\n        return value.toBigInt();\n      }\n\n      if (hasCborValueMethod(value)) {\n        return value.toCborValue();\n      }\n\n      return value;\n    });\n  } catch (error) {\n    throw InputError.fromCode(new CborEncodeErrorCode(error, value));\n  }\n}\n\n/**\n * Decode a CBOR encoded value into a JavaScript value.\n * @param input The CBOR encoded value\n */\nexport function decode<T>(input: Uint8Array): T {\n  try {\n    return cbor.decode(input) as T;\n  } catch (error) {\n    throw InputError.fromCode(new CborDecodeErrorCode(error, input));\n  }\n}\n\n// Not strictly necessary, we're just keeping it for backwards compatibility.\nexport const Cbor = {\n  encode,\n  decode,\n};\n", "export class DecodingError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodingError';\n  }\n}\n", "export type CborValue<T = any> = ReplacedCborValue<T> | T;\n\nexport type ReplacedCborValue<T = any> =\n  | CborNumber\n  | string\n  | ArrayBuffer\n  | Uint8Array\n  | CborValue<T>[]\n  | CborMap<T>\n  | CborSimple;\n\n/**\n * The tag number `55799`, the self-described tag for CBOR.\n * The serialization of this tag's head is `0xd9d9f7`.\n * @see {@link https://www.rfc-editor.org/rfc/rfc8949.html#section-3.4.6}\n */\nexport const CBOR_SELF_DESCRIBED_TAG = 55799;\n\nexport type CborNumber = number | bigint;\n\nexport const CBOR_STOP_CODE = Symbol('CBOR_STOP_CODE');\n\nexport type CborSimple = boolean | null | undefined | typeof CBOR_STOP_CODE;\n\nexport enum CborSimpleType {\n  False = 0x14,\n  True = 0x15,\n  Null = 0x16,\n  Undefined = 0x17,\n  Break = 0x1f,\n}\n\nexport type CborMap<T = any> =\n  | {\n      [key: string]: CborValue<T>;\n    }\n  | {\n      [key: string | number]: CborValue<T>;\n    }\n  | {\n      [key: string | symbol]: CborValue<T>;\n    }\n  | {\n      [key: string | number | symbol]: CborValue<T>;\n    };\n\nexport enum CborMajorType {\n  UnsignedInteger = 0,\n  NegativeInteger = 1,\n  ByteString = 2,\n  TextString = 3,\n  Array = 4,\n  Map = 5,\n  Tag = 6,\n  Simple = 7,\n}\n\nexport const TOKEN_VALUE_MAX = 0x17;\nexport const ONE_BYTE_MAX = 0xff;\nexport const TWO_BYTES_MAX = 0xffff;\nexport const FOUR_BYTES_MAX = 0xffffffff;\n/**\n * The maximum value that can be encoded in 8 bytes: `18446744073709551615n`.\n */\nexport const EIGHT_BYTES_MAX = BigInt('0xffffffffffffffff');\n\nexport enum CborMinorType {\n  Value = 23,\n  OneByte = 24,\n  TwoBytes = 25,\n  FourBytes = 26,\n  EightBytes = 27,\n  Indefinite = 31,\n}\n", "export const IS_LITTLE_ENDIAN = false;\n", "export function isNil<T>(\n  value: T | null | undefined,\n): value is null | undefined {\n  return value === null || value === undefined;\n}\n\nexport function isNotNil<T>(value: T | null | undefined): value is T {\n  return !isNil(value);\n}\n", "export function resizeUint8Array(\n  array: Uint8Array,\n  newSize: number,\n): Uint8Array {\n  const newArray = new Uint8Array(newSize);\n  newArray.set(array);\n  return newArray;\n}\n", "import {\n  CBOR_SELF_DESCRIBED_TAG,\n  CBOR_STOP_CODE,\n  CborMajorType,\n  CborMap,\n  CborMinorType,\n  CborNumber,\n  CborSimple,\n  CborSimpleType,\n  CborValue,\n} from '../cbor-value';\nimport { IS_LITTLE_ENDIAN, isNil } from '../util';\nimport { DecodingError } from './decoding-error';\n\nconst textDecoder = new TextDecoder();\n\nfunction decodeMajorType(firstByte: number): CborMajorType {\n  return (firstByte & 0b1110_0000) >> 5;\n}\n\nfunction decodeInfo(firstByte: number): number {\n  return firstByte & 0b0001_1111;\n}\n\nlet cborBytes = new Uint8Array();\nlet dataView: DataView | undefined;\nlet bytesOffset = 0;\n\n/**\n * A function that can be used to manipulate the decoded value.\n * See {@link decode} for more information.\n * @param value - The value to manipulate.\n * @param key - The current key in a map, or the current stringified index in an array.\n * @returns The manipulated value.\n */\nexport type Reviver<K extends CborValue = CborValue> = (\n  value: K,\n  key?: K extends CborValue ? string : keyof K,\n) => [K] extends [never] ? CborValue : K;\n\n/**\n * Decodes a CBOR byte array into a value.\n * See {@link Reviver} for more information.\n * @param input - The CBOR byte array to decode.\n * @param reviver - A function that can be used to manipulate the decoded value.\n * @returns The decoded value.\n *\n * @example Simple\n * ```ts\n * const value = true;\n * const encoded = encode(value); // returns `Uint8Array [245]` (which is \"F5\" in hex)\n * const decoded = decode(encoded); // returns `true`\n * ```\n *\n * @example Reviver\n * ```ts\n * const bytes = ...; // Uint8Array corresponding to the CBOR encoding of `{ a: 1, b: 2 }`\n * const reviver: Reviver = val => (typeof val === 'number' ? val * 2 : val);\n * decode(bytes, reviver); // returns `{ a: 2, b: 4 }`\n * ```\n */\nexport function decode<T extends CborValue = CborValue>(\n  input: Uint8Array,\n  reviver?: Reviver<T>,\n): T {\n  cborBytes = input;\n  bytesOffset = 0;\n\n  const decodedItem = decodeItem(reviver as Reviver | undefined) as T;\n  return (reviver?.(decodedItem as T) ?? decodedItem) as T;\n}\n\nfunction decodeItem(reviver?: Reviver): CborValue {\n  const [majorType, info] = decodeNextByte();\n\n  switch (majorType) {\n    case CborMajorType.UnsignedInteger:\n      return decodeUnsignedInteger(info);\n\n    case CborMajorType.NegativeInteger:\n      return decodeNegativeInteger(info);\n\n    case CborMajorType.ByteString:\n      return decodeByteString(info);\n\n    case CborMajorType.TextString:\n      return decodeTextString(info);\n\n    case CborMajorType.Array:\n      return decodeArray(info, reviver);\n\n    case CborMajorType.Map:\n      return decodeMap(info, reviver);\n\n    case CborMajorType.Tag:\n      return decodeTag(info, reviver);\n\n    case CborMajorType.Simple:\n      return decodeSimple(info);\n  }\n\n  throw new DecodingError(`Unsupported major type: ${majorType}`);\n}\n\nfunction decodeNextByte(): [CborMajorType, number] {\n  const firstByte = cborBytes.at(bytesOffset);\n  if (isNil(firstByte)) {\n    throw new DecodingError('Provided CBOR data is empty');\n  }\n\n  const majorType = decodeMajorType(firstByte);\n  const info = decodeInfo(firstByte);\n\n  bytesOffset++;\n  return [majorType, info];\n}\n\nfunction decodeArray(info: number, reviver?: Reviver): CborValue[] {\n  const arrayLength = decodeUnsignedInteger(info);\n\n  if (arrayLength === Infinity) {\n    const values: CborValue[] = [];\n    let decodedItem = decodeItem(reviver);\n\n    while (decodedItem !== CBOR_STOP_CODE) {\n      values.push(reviver?.(decodedItem) ?? decodedItem);\n      decodedItem = decodeItem(reviver);\n    }\n\n    return values;\n  }\n\n  const values = new Array<CborValue>(arrayLength);\n  for (let i = 0; i < arrayLength; i++) {\n    const decodedItem = decodeItem(reviver);\n    values[i] = reviver?.(decodedItem) ?? decodedItem;\n  }\n  return values;\n}\n\nfunction decodeSimple(info: number): CborSimple {\n  switch (info) {\n    case CborSimpleType.False: {\n      return false;\n    }\n    case CborSimpleType.True: {\n      return true;\n    }\n    case CborSimpleType.Null: {\n      return null;\n    }\n    case CborSimpleType.Undefined: {\n      return undefined;\n    }\n    case CborSimpleType.Break: {\n      return CBOR_STOP_CODE;\n    }\n  }\n\n  throw new DecodingError(`Unrecognized simple type: ${info.toString(2)}`);\n}\n\nfunction decodeMap(info: number, reviver?: Reviver): CborMap {\n  const mapLength = decodeUnsignedInteger(info);\n  const map: CborMap = {};\n\n  if (mapLength === Infinity) {\n    let [majorType, info] = decodeNextByte();\n\n    while (\n      majorType !== CborMajorType.Simple &&\n      info !== CborSimpleType.Break\n    ) {\n      const key = decodeTextString(info);\n      const decodedItem = decodeItem(reviver);\n      map[key] = reviver?.(decodedItem, key) ?? decodedItem;\n\n      [majorType, info] = decodeNextByte();\n    }\n\n    return map;\n  }\n\n  for (let i = 0; i < mapLength; i++) {\n    const [majorType, info] = decodeNextByte();\n\n    if (majorType !== CborMajorType.TextString) {\n      throw new DecodingError('Map keys must be text strings');\n    }\n\n    const key = decodeTextString(info);\n    const decodedItem = decodeItem(reviver);\n    map[key] = reviver?.(decodedItem, key) ?? decodedItem;\n  }\n\n  return map;\n}\n\nfunction decodeUnsignedInteger(info: number): CborNumber {\n  if (info <= CborMinorType.Value) {\n    return info;\n  }\n\n  dataView = new DataView(cborBytes.buffer, cborBytes.byteOffset + bytesOffset);\n  switch (info) {\n    case CborMinorType.OneByte:\n      bytesOffset++;\n      return dataView.getUint8(0);\n\n    case CborMinorType.TwoBytes:\n      bytesOffset += 2;\n      return dataView.getUint16(0, IS_LITTLE_ENDIAN);\n\n    case CborMinorType.FourBytes:\n      bytesOffset += 4;\n      return dataView.getUint32(0, IS_LITTLE_ENDIAN);\n\n    case CborMinorType.EightBytes:\n      bytesOffset += 8;\n      return dataView.getBigUint64(0, IS_LITTLE_ENDIAN);\n\n    case CborMinorType.Indefinite:\n      return Infinity;\n\n    default:\n      throw new DecodingError(`Unsupported integer info: ${info.toString(2)}`);\n  }\n}\n\nfunction decodeNegativeInteger(info: number): CborNumber {\n  const value = decodeUnsignedInteger(info);\n  const negativeValue = typeof value === 'number' ? -1 - value : -1n - value;\n\n  return negativeValue;\n}\n\nfunction decodeByteString(info: number): Uint8Array {\n  const byteLength = decodeUnsignedInteger(info);\n  if (byteLength > Number.MAX_SAFE_INTEGER) {\n    throw new DecodingError('Byte length is too large');\n  }\n\n  const safeByteLength = Number(byteLength);\n  bytesOffset += safeByteLength;\n  return cborBytes.slice(bytesOffset - safeByteLength, bytesOffset);\n}\n\nfunction decodeTextString(info: number): string {\n  const bytes = decodeByteString(info);\n\n  return textDecoder.decode(bytes);\n}\n\nfunction decodeTag(info: number, reviver?: Reviver): CborValue {\n  const value = decodeUnsignedInteger(info);\n\n  if (value === CBOR_SELF_DESCRIBED_TAG) {\n    return decodeItem(reviver);\n  }\n\n  throw new DecodingError(`Unsupported tag: ${value}.`);\n}\n", "export class EncodingError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'SerializationError';\n  }\n}\n", "import {\n  CborMajorType,\n  CborMap,\n  CborMinorType,\n  CborNumber,\n  CborSimple,\n  CborSimpleType,\n  CborValue,\n  ReplacedCborValue,\n  EIGHT_BYTES_MAX,\n  FOUR_BYTES_MAX,\n  ONE_BYTE_MAX,\n  TOKEN_VALUE_MAX,\n  TWO_BYTES_MAX,\n  CBOR_SELF_DESCRIBED_TAG,\n} from '../cbor-value';\nimport { EncodingError } from './encoding-error';\nimport { IS_LITTLE_ENDIAN, resizeUint8Array } from '../util';\n\nconst INITIAL_BUFFER_SIZE = 2 * 1_024;\nconst SAFE_BUFFER_END_OFFSET = 100;\n\nconst textEncoder = new TextEncoder();\n\nfunction encodeMajorType(majorType: CborMajorType): number {\n  return majorType << 5;\n}\n\nlet target = new Uint8Array(INITIAL_BUFFER_SIZE);\nlet targetView = new DataView(target.buffer);\nlet bytesOffset = 0;\nlet mapEntries: [string, CborValue][] = [];\n\n/**\n * A function that can be used to manipulate the input before it is encoded.\n * See {@link encode} for more information.\n * @param value - The value to manipulate.\n * @param key - The current key in a map, or the current stringified index in an array.\n * @returns The manipulated value.\n */\nexport type Replacer<T = any> = (\n  value: CborValue<T>,\n  key?: string,\n) => ReplacedCborValue<T>;\n\n/**\n * Encodes a value into a CBOR byte array.\n * @param value - The value to encode.\n * @param replacer - A function that can be used to manipulate the input before it is encoded.\n * @returns The encoded value.\n *\n * @example Simple\n * ```ts\n * const value = true;\n * const encoded = encode(value); // returns `Uint8Array [245]` (which is \"F5\" in hex)\n * ```\n *\n * @example Replacer\n * ```ts\n * const replacer: Replacer = val => (typeof val === 'number' ? val * 2 : val);\n * encode({ a: 1, b: 2 }, replacer); // returns the Uint8Array corresponding to the CBOR encoding of `{ a: 2, b: 4 }`\n * ```\n */\nexport function encode<T = any>(\n  value: CborValue<T>,\n  replacer?: Replacer<T>,\n): Uint8Array {\n  bytesOffset = 0;\n\n  const transformedValue = replacer?.(value) ?? value;\n  encodeItem(transformedValue, replacer);\n\n  return target.slice(0, bytesOffset);\n}\n\n/**\n * Encodes a value into a CBOR byte array (same as {@link encode}), but prepends the self-described CBOR tag (55799).\n * @param value - The value to encode.\n * @param replacer - A function that can be used to manipulate the input before it is encoded.\n * @returns The encoded value with the self-described CBOR tag.\n *\n * @example\n * ```ts\n * const value = true;\n * const encoded = encodeWithSelfDescribedTag(value); // returns the Uint8Array [217, 217, 247, 245] (which is \"D9D9F7F5\" in hex)\n * ```\n */\nexport function encodeWithSelfDescribedTag<T = any>(\n  value: CborValue<T>,\n  replacer?: Replacer<T>,\n): Uint8Array {\n  bytesOffset = 0;\n\n  const transformedValue = replacer?.(value) ?? value;\n  encodeTag(CBOR_SELF_DESCRIBED_TAG, transformedValue, replacer);\n\n  return target.slice(0, bytesOffset);\n}\n\nfunction encodeItem(item: CborValue, replacer?: Replacer): void {\n  if (bytesOffset > target.length - SAFE_BUFFER_END_OFFSET) {\n    target = resizeUint8Array(target, target.length * 2);\n    targetView = new DataView(target.buffer);\n  }\n\n  if (item === false || item === true || item === null || item === undefined) {\n    encodeSimple(item);\n    return;\n  }\n\n  if (typeof item === 'number' || typeof item === 'bigint') {\n    encodeNumber(item);\n    return;\n  }\n\n  if (typeof item === 'string') {\n    encodeTextString(item);\n    return;\n  }\n\n  if (item instanceof Uint8Array) {\n    encodeByteString(item);\n    return;\n  }\n\n  if (item instanceof ArrayBuffer) {\n    encodeByteString(new Uint8Array(item));\n    return;\n  }\n\n  if (Array.isArray(item)) {\n    encodeArray(item, replacer);\n    return;\n  }\n\n  if (typeof item === 'object') {\n    encodeMap(item, replacer);\n    return;\n  }\n\n  throw new EncodingError(`Unsupported type: ${typeof item}`);\n}\n\nfunction encodeArray(items: CborValue[], replacer?: Replacer): void {\n  encodeHeader(CborMajorType.Array, items.length);\n\n  items.forEach((item, i) => {\n    encodeItem(replacer?.(item, i.toString()) ?? item, replacer);\n  });\n}\n\nfunction encodeMap(map: CborMap, replacer?: Replacer): void {\n  mapEntries = Object.entries(map);\n\n  encodeHeader(CborMajorType.Map, mapEntries.length);\n\n  mapEntries.forEach(([key, value]) => {\n    encodeTextString(key);\n    encodeItem(replacer?.(value, key) ?? value, replacer);\n  });\n}\n\nfunction encodeHeader(majorType: CborMajorType, value: CborNumber): void {\n  if (value <= TOKEN_VALUE_MAX) {\n    targetView.setUint8(\n      bytesOffset++,\n      encodeMajorType(majorType) | Number(value),\n    );\n    return;\n  }\n\n  if (value <= ONE_BYTE_MAX) {\n    targetView.setUint8(\n      bytesOffset++,\n      encodeMajorType(majorType) | CborMinorType.OneByte,\n    );\n    targetView.setUint8(bytesOffset, Number(value));\n    bytesOffset += 1;\n    return;\n  }\n\n  if (value <= TWO_BYTES_MAX) {\n    targetView.setUint8(\n      bytesOffset++,\n      encodeMajorType(majorType) | CborMinorType.TwoBytes,\n    );\n    targetView.setUint16(bytesOffset, Number(value), IS_LITTLE_ENDIAN);\n    bytesOffset += 2;\n    return;\n  }\n\n  if (value <= FOUR_BYTES_MAX) {\n    targetView.setUint8(\n      bytesOffset++,\n      encodeMajorType(majorType) | CborMinorType.FourBytes,\n    );\n    targetView.setUint32(bytesOffset, Number(value), IS_LITTLE_ENDIAN);\n    bytesOffset += 4;\n    return;\n  }\n\n  if (value <= EIGHT_BYTES_MAX) {\n    targetView.setUint8(\n      bytesOffset++,\n      encodeMajorType(majorType) | CborMinorType.EightBytes,\n    );\n    targetView.setBigUint64(bytesOffset, BigInt(value), IS_LITTLE_ENDIAN);\n    bytesOffset += 8;\n    return;\n  }\n\n  throw new EncodingError(`Value too large to encode: ${value}`);\n}\n\nfunction encodeSimple(value: CborSimple): void {\n  encodeHeader(CborMajorType.Simple, mapSimple(value));\n}\n\nfunction mapSimple(value: CborSimple): CborSimpleType {\n  if (value === false) {\n    return CborSimpleType.False;\n  }\n\n  if (value === true) {\n    return CborSimpleType.True;\n  }\n\n  if (value === null) {\n    return CborSimpleType.Null;\n  }\n\n  if (value === undefined) {\n    return CborSimpleType.Undefined;\n  }\n\n  throw new EncodingError(`Unrecognized simple value: ${value.toString()}`);\n}\n\nfunction encodeBytes(majorType: CborMajorType, value: Uint8Array): void {\n  encodeHeader(majorType, value.length);\n\n  if (bytesOffset > target.length - value.length) {\n    target = resizeUint8Array(target, target.length + value.length);\n    targetView = new DataView(target.buffer);\n  }\n  target.set(value, bytesOffset);\n  bytesOffset += value.length;\n}\n\nfunction encodeInteger(majorType: CborMajorType, value: CborNumber): void {\n  encodeHeader(majorType, value);\n}\n\nfunction encodeUnsignedInteger(value: CborNumber): void {\n  encodeInteger(CborMajorType.UnsignedInteger, value);\n}\n\nfunction encodeNegativeInteger(value: CborNumber): void {\n  encodeInteger(\n    CborMajorType.NegativeInteger,\n    typeof value === 'bigint' ? -1n - value : -1 - value,\n  );\n}\n\nfunction encodeNumber(value: CborNumber): void {\n  value >= 0 ? encodeUnsignedInteger(value) : encodeNegativeInteger(value);\n}\n\nfunction encodeTextString(value: string): void {\n  encodeBytes(CborMajorType.TextString, textEncoder.encode(value));\n}\n\nfunction encodeByteString(value: Uint8Array): void {\n  encodeBytes(CborMajorType.ByteString, value);\n}\n\nfunction encodeTag(tag: number, value: CborValue, replacer?: Replacer): void {\n  encodeHeader(CborMajorType.Tag, tag);\n  encodeItem(value, replacer);\n}\n", "import { lebEncode } from '@dfinity/candid';\nimport {\n  Endpoint,\n  type HttpAgentRequest,\n  type HttpAgentRequestTransformFn,\n  type HttpHeaderField,\n  makeNonce,\n  type Nonce,\n} from './types.ts';\nimport { ExpiryJsonDeserializeErrorCode, InputError } from '../../errors.ts';\n\nexport const JSON_KEY_EXPIRY = '__expiry__';\nconst SECONDS_TO_MILLISECONDS = BigInt(1_000);\nconst MILLISECONDS_TO_NANOSECONDS = BigInt(1_000_000);\nconst MINUTES_TO_SECONDS = BigInt(60);\n\nconst EXPIRY_DELTA_THRESHOLD_MILLISECONDS = BigInt(90) * SECONDS_TO_MILLISECONDS;\n\nfunction roundMillisToSeconds(millis: bigint): bigint {\n  return millis / SECONDS_TO_MILLISECONDS;\n}\n\nfunction roundMillisToMinutes(millis: bigint): bigint {\n  return roundMillisToSeconds(millis) / MINUTES_TO_SECONDS;\n}\n\nexport type JsonnableExpiry = {\n  [JSON_KEY_EXPIRY]: string;\n};\n\nexport class Expiry {\n  public readonly _isExpiry = true;\n\n  private constructor(private readonly __expiry__: bigint) {}\n\n  /**\n   * Creates an Expiry object from a delta in milliseconds.\n   * If the delta is less than 90 seconds, the expiry is rounded down to the nearest second.\n   * Otherwise, the expiry is rounded down to the nearest minute.\n   * @param deltaInMs The milliseconds to add to the current time.\n   * @param clockDriftMs The milliseconds to add to the current time, typically the clock drift between IC network clock and the client's clock. Defaults to `0` if not provided.\n   * @returns {Expiry} The constructed Expiry object.\n   */\n  public static fromDeltaInMilliseconds(deltaInMs: number, clockDriftMs: number = 0): Expiry {\n    const deltaMs = BigInt(deltaInMs);\n    const expiryMs = BigInt(Date.now()) + deltaMs + BigInt(clockDriftMs);\n\n    let roundedExpirySeconds: bigint;\n    if (deltaMs < EXPIRY_DELTA_THRESHOLD_MILLISECONDS) {\n      roundedExpirySeconds = roundMillisToSeconds(expiryMs);\n    } else {\n      const roundedExpiryMinutes = roundMillisToMinutes(expiryMs);\n      roundedExpirySeconds = roundedExpiryMinutes * MINUTES_TO_SECONDS;\n    }\n\n    return new Expiry(roundedExpirySeconds * SECONDS_TO_MILLISECONDS * MILLISECONDS_TO_NANOSECONDS);\n  }\n\n  public toBigInt(): bigint {\n    return this.__expiry__;\n  }\n\n  public toHash(): Uint8Array {\n    return lebEncode(this.__expiry__);\n  }\n\n  public toString(): string {\n    return this.__expiry__.toString();\n  }\n\n  /**\n   * Serializes to JSON\n   * @returns {JsonnableExpiry} a JSON object with a single key, {@link JSON_KEY_EXPIRY}, whose value is the expiry as a string\n   */\n  public toJSON(): JsonnableExpiry {\n    return { [JSON_KEY_EXPIRY]: this.toString() };\n  }\n\n  /**\n   * Deserializes a {@link JsonnableExpiry} object from a JSON string.\n   * @param input The JSON string to deserialize.\n   * @returns {Expiry} The deserialized Expiry object.\n   */\n  public static fromJSON(input: string): Expiry {\n    const obj = JSON.parse(input);\n    if (obj[JSON_KEY_EXPIRY]) {\n      try {\n        const expiry = BigInt(obj[JSON_KEY_EXPIRY]);\n        return new Expiry(expiry);\n      } catch (error) {\n        throw new InputError(new ExpiryJsonDeserializeErrorCode(`Not a valid BigInt: ${error}`));\n      }\n    }\n    throw new InputError(\n      new ExpiryJsonDeserializeErrorCode(`The input does not contain the key ${JSON_KEY_EXPIRY}`),\n    );\n  }\n\n  public static isExpiry(other: unknown): other is Expiry {\n    return (\n      other instanceof Expiry ||\n      (typeof other === 'object' &&\n        other !== null &&\n        '_isExpiry' in other &&\n        (other as { _isExpiry: boolean })['_isExpiry'] === true &&\n        '__expiry__' in other &&\n        typeof (other as { __expiry__: bigint })['__expiry__'] === 'bigint')\n    );\n  }\n}\n\n/**\n * Create a Nonce transform, which takes a function that returns a Buffer, and adds it\n * as the nonce to every call requests.\n * @param nonceFn A function that returns a buffer. By default uses a semi-random method.\n */\nexport function makeNonceTransform(nonceFn: () => Nonce = makeNonce): HttpAgentRequestTransformFn {\n  return async (request: HttpAgentRequest) => {\n    // Nonce needs to be inserted into the header for all requests, to enable logs to be correlated with requests.\n    const headers = request.request.headers;\n    // TODO: uncomment this when the http proxy supports it.\n    // headers.set('X-IC-Request-ID', toHex(new Uint8Array(nonce)));\n    request.request.headers = headers;\n\n    // Nonce only needs to be inserted into the body for async calls, to prevent replay attacks.\n    if (request.endpoint === Endpoint.Call) {\n      request.body.nonce = nonceFn();\n    }\n  };\n}\n\n/**\n * Create a transform that adds a delay (by default 5 minutes) to the expiry.\n * @param delayInMilliseconds The delay to add to the call time, in milliseconds.\n */\nexport function makeExpiryTransform(delayInMilliseconds: number): HttpAgentRequestTransformFn {\n  return async (request: HttpAgentRequest) => {\n    request.body.ingress_expiry = Expiry.fromDeltaInMilliseconds(delayInMilliseconds);\n  };\n}\n\n/**\n * Maps the default fetch headers field to the serializable HttpHeaderField.\n * @param headers Fetch definition of the headers type\n * @returns array of header fields\n */\nexport function httpHeadersTransform(headers: Headers): HttpHeaderField[] {\n  const headerFields: HttpHeaderField[] = [];\n  headers.forEach((value, key) => {\n    headerFields.push([key, value]);\n  });\n  return headerFields;\n}\n", "import type { Principal } from '@dfinity/principal';\nimport { Expiry } from './transforms.ts';\nimport { randomNumber } from '../../utils/random.ts';\n\n/**\n * @internal\n */\nexport enum Endpoint {\n  Query = 'read',\n  ReadState = 'read_state',\n  Call = 'call',\n}\n\n// An HttpAgent request, before it gets encoded and sent to the server.\n// We create an empty request that we will fill later.\nexport type HttpAgentRequest =\n  | HttpAgentQueryRequest\n  | HttpAgentSubmitRequest\n  | HttpAgentReadStateRequest;\n\nexport interface HttpAgentBaseRequest {\n  readonly endpoint: Endpoint;\n  request: RequestInit;\n}\n\nexport type HttpHeaderField = [string, string];\n\nexport interface HttpAgentSubmitRequest extends HttpAgentBaseRequest {\n  readonly endpoint: Endpoint.Call;\n  body: CallRequest;\n}\n\nexport interface HttpAgentQueryRequest extends HttpAgentBaseRequest {\n  readonly endpoint: Endpoint.Query;\n  body: ReadRequest;\n}\n\nexport interface HttpAgentReadStateRequest extends HttpAgentBaseRequest {\n  readonly endpoint: Endpoint.ReadState;\n  body: ReadRequest;\n}\n\nexport interface Signed<T> {\n  content: T;\n  sender_pubkey: ArrayBuffer;\n  sender_sig: ArrayBuffer;\n}\n\nexport interface UnSigned<T> {\n  content: T;\n}\n\nexport type Envelope<T> = Signed<T> | UnSigned<T>;\n\nexport interface HttpAgentRequestTransformFn {\n  (args: HttpAgentRequest): Promise<HttpAgentRequest | undefined | void>;\n  priority?: number;\n}\n\n// The fields in a \"call\" submit request.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface CallRequest extends Record<string, any> {\n  request_type: SubmitRequestType.Call;\n  canister_id: Principal;\n  method_name: string;\n  arg: Uint8Array;\n  sender: Uint8Array | Principal;\n  ingress_expiry: Expiry;\n  nonce?: Nonce;\n}\n\n// The types of values allowed in the `request_type` field for submit requests.\nexport enum SubmitRequestType {\n  Call = 'call',\n}\n\n// The types of values allowed in the `request_type` field for read requests.\nexport enum ReadRequestType {\n  Query = 'query',\n  ReadState = 'read_state',\n}\n\n// The fields in a \"query\" read request.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface QueryRequest extends Record<string, any> {\n  request_type: ReadRequestType.Query;\n  canister_id: Principal;\n  method_name: string;\n  arg: Uint8Array;\n  sender: Uint8Array | Principal;\n  ingress_expiry: Expiry;\n  nonce?: Nonce;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface ReadStateRequest extends Record<string, any> {\n  request_type: ReadRequestType.ReadState;\n  paths: Uint8Array[][];\n  ingress_expiry: Expiry;\n  sender: Uint8Array | Principal;\n}\n\nexport type ReadRequest = QueryRequest | ReadStateRequest;\n\n// A Nonce that can be used for calls.\nexport type Nonce = Uint8Array & { __nonce__: void };\n\n/**\n * Create a random Nonce, based on random values\n */\nexport function makeNonce(): Nonce {\n  // Encode 128 bits.\n  const buffer = new ArrayBuffer(16);\n  const view = new DataView(buffer);\n  const rand1 = randomNumber();\n  const rand2 = randomNumber();\n  const rand3 = randomNumber();\n  const rand4 = randomNumber();\n\n  view.setUint32(0, rand1);\n  view.setUint32(4, rand2);\n  view.setUint32(8, rand3);\n  view.setUint32(12, rand4);\n\n  return Object.assign(new Uint8Array(buffer), { __nonce__: undefined });\n}\n", "/**\n * Generates a random unsigned 32-bit integer between 0 and 0xffffffff\n * @returns {number} a random number\n */\nexport const randomNumber = (): number => {\n  // determine whether browser crypto is available\n  if (typeof window !== 'undefined' && !!window.crypto && !!window.crypto.getRandomValues) {\n    const array = new Uint32Array(1);\n    window.crypto.getRandomValues(array);\n    return array[0];\n  }\n  // A second check for webcrypto, in case it is loaded under global instead of window\n  if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n    const array = new Uint32Array(1);\n    crypto.getRandomValues(array);\n    return array[0];\n  }\n\n  type nodeCrypto = {\n    randomInt: (min: number, max: number) => number;\n  };\n\n  // determine whether node crypto is available\n  if (typeof crypto !== 'undefined' && (crypto as unknown as nodeCrypto).randomInt) {\n    return (crypto as unknown as nodeCrypto).randomInt(0, 0xffffffff);\n  }\n\n  // fall back to Math.random\n  return Math.floor(Math.random() * 0xffffffff);\n};\n", "import { Principal } from '@dfinity/principal';\nimport {\n  CertificateVerificationErrorCode,\n  MissingRootKeyErrorCode,\n  CertificateNotAuthorizedErrorCode,\n  LookupErrorCode,\n  DerKeyLengthMismatchErrorCode,\n  ExternalError,\n  ProtocolError,\n  TrustError,\n  AgentError,\n  UnknownError,\n  HashTreeDecodeErrorCode,\n  UnexpectedErrorCode,\n  InputError,\n  CertificateTimeErrorCode,\n} from '../errors.ts';\nimport { HttpAgent } from '../agent/http/index.ts';\nimport {\n  type Cert,\n  Certificate,\n  flatten_forks,\n  check_canister_ranges,\n  LookupPathStatus,\n  lookup_path,\n  lookupResultToBuffer,\n  lookup_subtree,\n  type LabeledHashTree,\n  LookupSubtreeStatus,\n} from '../certificate.ts';\nimport * as cbor from '../cbor.ts';\nimport { decodeLeb128, decodeTime } from '../utils/leb.ts';\nimport { type DerEncodedPublicKey } from '../auth.ts';\nimport { utf8ToBytes, bytesToHex } from '@noble/hashes/utils';\n\n/**\n * Represents the useful information about a subnet\n * @param {string} subnetId the principal id of the canister's subnet\n * @param {string[]} nodeKeys the keys of the individual nodes in the subnet\n */\nexport type SubnetStatus = {\n  // Principal as a string\n  subnetId: string;\n  nodeKeys: Map<string, DerEncodedPublicKey>;\n  metrics?: {\n    num_canisters: bigint;\n    canister_state_bytes: bigint;\n    consumed_cycles_total: {\n      current: bigint;\n      deleted: bigint;\n    };\n    update_transactions_total: bigint;\n  };\n};\n\n/**\n * Types of an entry on the canisterStatus map.\n * An entry of null indicates that the request failed, due to lack of permissions or the result being missing.\n */\nexport type Status =\n  | string\n  | Uint8Array\n  | Date\n  | Uint8Array[]\n  | Principal[]\n  | SubnetStatus\n  | bigint\n  | null;\n\n/**\n * Interface to define a custom path. Nested paths will be represented as individual buffers, and can be created from text using TextEncoder.\n * @param {string} key the key to use to access the returned value in the canisterStatus map\n * @param {Uint8Array[]} path the path to the desired value, represented as an array of buffers\n * @param {string} decodeStrategy the strategy to use to decode the returned value\n */\nexport class CustomPath implements CustomPath {\n  public key: string;\n  public path: Uint8Array[] | string;\n  public decodeStrategy: 'cbor' | 'hex' | 'leb128' | 'utf-8' | 'raw';\n  constructor(\n    key: string,\n    path: Uint8Array[] | string,\n    decodeStrategy: 'cbor' | 'hex' | 'leb128' | 'utf-8' | 'raw',\n  ) {\n    this.key = key;\n    this.path = path;\n    this.decodeStrategy = decodeStrategy;\n  }\n}\n\n/**\n * @deprecated Use {@link CustomPath} instead\n * @param {string} key the key to use to access the returned value in the canisterStatus map\n * @param {string} path the path to the desired value, represented as a string\n * @param {string} decodeStrategy the strategy to use to decode the returned value\n */\nexport interface MetaData {\n  kind: 'metadata';\n  key: string;\n  path: string | Uint8Array;\n  decodeStrategy: 'cbor' | 'hex' | 'leb128' | 'utf-8' | 'raw';\n}\n\n/**\n * Pre-configured fields for canister status paths\n */\nexport type Path =\n  | 'time'\n  | 'controllers'\n  | 'subnet'\n  | 'module_hash'\n  | 'candid'\n  | MetaData\n  | CustomPath;\n\nexport type StatusMap = Map<Path | string, Status>;\n\nexport type CanisterStatusOptions = {\n  /**\n   * The effective canister ID to use in the underlying {@link HttpAgent.readState} call.\n   */\n  canisterId: Principal;\n  /**\n   * The agent to use to make the canister request. Must be authenticated.\n   */\n  agent: HttpAgent;\n  /**\n   * The paths to request.\n   * @default []\n   */\n  paths?: Path[] | Set<Path>;\n  /**\n   * Whether to disable the certificate freshness checks.\n   * @default false\n   */\n  disableCertificateTimeVerification?: boolean;\n};\n\n/**\n * Requests information from a canister's `read_state` endpoint.\n * Can be used to request information about the canister's controllers, time, module hash, candid interface, and more.\n * @param {CanisterStatusOptions} options The configuration for the canister status request.\n * @see {@link CanisterStatusOptions} for detailed options.\n * @returns {Promise<StatusMap>} A map populated with data from the requested paths. Each path is a key in the map, and the value is the data obtained from the certificate for that path.\n * @example\n * const status = await canisterStatus({\n *   paths: ['controllers', 'candid'],\n *   ...options\n * });\n *\n * const controllers = status.get('controllers');\n */\nexport const request = async (options: CanisterStatusOptions): Promise<StatusMap> => {\n  const { agent, paths, disableCertificateTimeVerification = false } = options;\n  const canisterId = Principal.from(options.canisterId);\n\n  const uniquePaths = [...new Set(paths)];\n  const status = new Map<string | Path, Status>();\n\n  const promises = uniquePaths.map((path, index) => {\n    const encodedPath = encodePath(path, canisterId);\n\n    return (async () => {\n      try {\n        if (agent.rootKey === null) {\n          throw ExternalError.fromCode(new MissingRootKeyErrorCode());\n        }\n\n        const rootKey = agent.rootKey;\n\n        const response = await agent.readState(canisterId, {\n          paths: [encodedPath],\n        });\n\n        const certificate = await Certificate.create({\n          certificate: response.certificate,\n          rootKey,\n          canisterId,\n          disableTimeVerification: disableCertificateTimeVerification,\n          agent,\n        });\n\n        const lookup = (cert: Certificate, path: Path) => {\n          if (path === 'subnet') {\n            const data = fetchNodeKeys(response.certificate, canisterId, rootKey);\n            return {\n              path,\n              data,\n            };\n          } else {\n            return {\n              path,\n              data: lookupResultToBuffer(cert.lookup_path(encodedPath)),\n            };\n          }\n        };\n\n        // must pass in the rootKey if we have no delegation\n        const { path, data } = lookup(certificate, uniquePaths[index]);\n        if (!data) {\n          // Typically, the cert lookup will throw\n          console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n          if (typeof path === 'string') {\n            status.set(path, null);\n          } else {\n            status.set(path.key, null);\n          }\n        } else {\n          switch (path) {\n            case 'time': {\n              status.set(path, decodeTime(data));\n              break;\n            }\n            case 'controllers': {\n              status.set(path, decodeControllers(data));\n              break;\n            }\n            case 'module_hash': {\n              status.set(path, bytesToHex(data));\n              break;\n            }\n            case 'subnet': {\n              status.set(path, data);\n              break;\n            }\n            case 'candid': {\n              status.set(path, new TextDecoder().decode(data));\n              break;\n            }\n            default: {\n              // Check for CustomPath signature\n              if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n                switch (path.decodeStrategy) {\n                  case 'raw':\n                    status.set(path.key, data);\n                    break;\n                  case 'leb128': {\n                    status.set(path.key, decodeLeb128(data));\n                    break;\n                  }\n                  case 'cbor': {\n                    status.set(path.key, cbor.decode(data));\n                    break;\n                  }\n                  case 'hex': {\n                    status.set(path.key, bytesToHex(data));\n                    break;\n                  }\n                  case 'utf-8': {\n                    status.set(path.key, new TextDecoder().decode(data));\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // Throw on certificate errors\n        if (\n          error instanceof AgentError &&\n          (error.hasCode(CertificateVerificationErrorCode) ||\n            error.hasCode(CertificateTimeErrorCode))\n        ) {\n          throw error;\n        }\n        if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n          status.set(path.key, null);\n        } else {\n          status.set(path, null);\n        }\n        console.group();\n        console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n        console.warn(error);\n        console.groupEnd();\n      }\n    })();\n  });\n\n  // Fetch all values separately, as each option can fail\n  await Promise.all(promises);\n\n  return status;\n};\n\nexport const fetchNodeKeys = (\n  certificate: Uint8Array,\n  canisterId: Principal,\n  root_key?: Uint8Array,\n): SubnetStatus => {\n  if (!canisterId._isPrincipal) {\n    throw InputError.fromCode(new UnexpectedErrorCode('Invalid canisterId'));\n  }\n  const cert = cbor.decode<Cert>(certificate);\n  const tree = cert.tree;\n  let delegation = cert.delegation;\n  let subnetId: Principal;\n  if (delegation && delegation.subnet_id) {\n    subnetId = Principal.fromUint8Array(new Uint8Array(delegation.subnet_id));\n  }\n\n  // On local replica, with System type subnet, there is no delegation\n  else if (!delegation && typeof root_key !== 'undefined') {\n    subnetId = Principal.selfAuthenticating(new Uint8Array(root_key));\n    delegation = {\n      subnet_id: subnetId.toUint8Array(),\n      certificate: new Uint8Array(0),\n    };\n  }\n  // otherwise use default NNS subnet id\n  else {\n    subnetId = Principal.selfAuthenticating(\n      Principal.fromText(\n        'tdb26-jop6k-aogll-7ltgs-eruif-6kk7m-qpktf-gdiqx-mxtrf-vb5e6-eqe',\n      ).toUint8Array(),\n    );\n    delegation = {\n      subnet_id: subnetId.toUint8Array(),\n      certificate: new Uint8Array(0),\n    };\n  }\n\n  const canisterInRange = check_canister_ranges({ canisterId, subnetId, tree });\n  if (!canisterInRange) {\n    throw TrustError.fromCode(new CertificateNotAuthorizedErrorCode(canisterId, subnetId));\n  }\n\n  const subnetLookupResult = lookup_subtree(['subnet', delegation.subnet_id, 'node'], tree);\n  if (subnetLookupResult.status !== LookupSubtreeStatus.Found) {\n    throw ProtocolError.fromCode(new LookupErrorCode('Node not found', subnetLookupResult.status));\n  }\n  if (subnetLookupResult.value instanceof Uint8Array) {\n    throw UnknownError.fromCode(new HashTreeDecodeErrorCode('Invalid node tree'));\n  }\n\n  // The forks are all labeled trees with the <node_id> label\n  const nodeForks = flatten_forks(subnetLookupResult.value) as Array<LabeledHashTree>;\n  const nodeKeys = new Map<string, DerEncodedPublicKey>();\n\n  nodeForks.forEach(fork => {\n    const node_id = Principal.from(fork[1]).toText();\n    const publicKeyLookupResult = lookup_path(['public_key'], fork[2]);\n    if (publicKeyLookupResult.status !== LookupPathStatus.Found) {\n      throw ProtocolError.fromCode(\n        new LookupErrorCode('Public key not found', publicKeyLookupResult.status),\n      );\n    }\n\n    const derEncodedPublicKey = publicKeyLookupResult.value;\n    if (derEncodedPublicKey.byteLength !== 44) {\n      throw ProtocolError.fromCode(\n        new DerKeyLengthMismatchErrorCode(44, derEncodedPublicKey.byteLength),\n      );\n    } else {\n      nodeKeys.set(node_id, derEncodedPublicKey as DerEncodedPublicKey);\n    }\n  });\n\n  return {\n    subnetId: Principal.fromUint8Array(new Uint8Array(delegation.subnet_id)).toText(),\n    nodeKeys,\n  };\n};\n\nexport const encodePath = (path: Path, canisterId: Principal): Uint8Array[] => {\n  const canisterUint8Array = canisterId.toUint8Array();\n  switch (path) {\n    case 'time':\n      return [utf8ToBytes('time')];\n    case 'controllers':\n      return [utf8ToBytes('canister'), canisterUint8Array, utf8ToBytes('controllers')];\n    case 'module_hash':\n      return [utf8ToBytes('canister'), canisterUint8Array, utf8ToBytes('module_hash')];\n    case 'subnet':\n      return [utf8ToBytes('subnet')];\n    case 'candid':\n      return [\n        utf8ToBytes('canister'),\n        canisterUint8Array,\n        utf8ToBytes('metadata'),\n        utf8ToBytes('candid:service'),\n      ];\n    default: {\n      // Check for CustomPath signature\n      if ('key' in path && 'path' in path) {\n        // For simplified metadata queries\n        if (typeof path['path'] === 'string' || path['path'] instanceof Uint8Array) {\n          const metaPath = path.path;\n          const encoded = typeof metaPath === 'string' ? utf8ToBytes(metaPath) : metaPath;\n\n          return [utf8ToBytes('canister'), canisterUint8Array, utf8ToBytes('metadata'), encoded];\n\n          // For non-metadata, return the provided custompath\n        } else {\n          return path['path'];\n        }\n      }\n    }\n  }\n  throw UnknownError.fromCode(\n    new UnexpectedErrorCode(\n      `Error while encoding your path for canister status. Please ensure that your path ${path} was formatted correctly.`,\n    ),\n  );\n};\n\n// Controllers are CBOR-encoded buffers\nconst decodeControllers = (buf: Uint8Array): Principal[] => {\n  const controllersRaw = cbor.decode<Uint8Array[]>(buf);\n  return controllersRaw.map(buf => {\n    return Principal.fromUint8Array(buf);\n  });\n};\n", "import * as cbor from './cbor.ts';\nimport {\n  CertificateHasTooManyDelegationsErrorCode,\n  CertificateNotAuthorizedErrorCode,\n  CertificateTimeErrorCode,\n  CertificateVerificationErrorCode,\n  DerKeyLengthMismatchErrorCode,\n  DerPrefixMismatchErrorCode,\n  ProtocolError,\n  LookupErrorCode,\n  TrustError,\n  UnknownError,\n  HashTreeDecodeErrorCode,\n  UNREACHABLE_ERROR,\n  MalformedLookupFoundValueErrorCode,\n  MissingLookupValueErrorCode,\n  UnexpectedErrorCode,\n} from './errors.ts';\nimport { Principal } from '@dfinity/principal';\nimport * as bls from './utils/bls.ts';\nimport { decodeTime } from './utils/leb.ts';\nimport { bytesToHex, concatBytes, hexToBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { uint8Equals } from './utils/buffer.ts';\nimport { sha256 } from '@noble/hashes/sha2';\nimport type { HttpAgent } from './agent/http/index.ts';\nimport type { Agent } from './agent/api.ts';\n\nconst MINUTES_TO_MSEC = 60 * 1000;\nconst HOURS_TO_MINUTES = 60;\nconst DAYS_TO_HOURS = 24;\nconst DAYS_TO_MINUTES = DAYS_TO_HOURS * HOURS_TO_MINUTES;\n\nconst DEFAULT_CERTIFICATE_MAX_AGE_IN_MINUTES = 5;\nconst DEFAULT_CERTIFICATE_MAX_MINUTES_IN_FUTURE = 5;\n// For now, we don't want to set a strict timeout on the certificate delegation freshness,\n// so we set the max age really far in the past.\nconst DEFAULT_CERTIFICATE_DELEGATION_MAX_AGE_IN_MINUTES = 30 * DAYS_TO_MINUTES;\n\nexport interface Cert {\n  tree: HashTree;\n  signature: Uint8Array;\n  delegation?: Delegation;\n}\n\nexport enum NodeType {\n  Empty = 0,\n  Fork = 1,\n  Labeled = 2,\n  Leaf = 3,\n  Pruned = 4,\n}\n\nexport type NodePath = Array<Uint8Array | string>;\nexport type NodeLabel = Uint8Array & { __nodeLabel__: void };\nexport type NodeValue = Uint8Array & { __nodeValue__: void };\nexport type NodeHash = Uint8Array & { __nodeHash__: void };\n\nexport type EmptyHashTree = [NodeType.Empty];\nexport type ForkHashTree = [NodeType.Fork, HashTree, HashTree];\nexport type LabeledHashTree = [NodeType.Labeled, NodeLabel, HashTree];\nexport type LeafHashTree = [NodeType.Leaf, NodeValue];\nexport type PrunedHashTree = [NodeType.Pruned, NodeHash];\n\nexport type HashTree =\n  | EmptyHashTree\n  | ForkHashTree\n  | LabeledHashTree\n  | LeafHashTree\n  | PrunedHashTree;\n\n/**\n * Make a human readable string out of a hash tree.\n * @param tree The hash tree to convert to a string\n */\nexport function hashTreeToString(tree: HashTree): string {\n  const indent = (s: string) =>\n    s\n      .split('\\n')\n      .map(x => '  ' + x)\n      .join('\\n');\n  function labelToString(label: Uint8Array): string {\n    const decoder = new TextDecoder(undefined, { fatal: true });\n    try {\n      return JSON.stringify(decoder.decode(label));\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (e) {\n      return `data(...${label.byteLength} bytes)`;\n    }\n  }\n\n  switch (tree[0]) {\n    case NodeType.Empty:\n      return '()';\n    case NodeType.Fork: {\n      if (tree[1] instanceof Array && tree[2] instanceof Uint8Array) {\n        const left = hashTreeToString(tree[1]);\n        const right = hashTreeToString(tree[2]);\n        return `sub(\\n left:\\n${indent(left)}\\n---\\n right:\\n${indent(right)}\\n)`;\n      } else {\n        throw UnknownError.fromCode(new HashTreeDecodeErrorCode('Invalid tree structure for fork'));\n      }\n    }\n    case NodeType.Labeled: {\n      if (tree[1] instanceof Uint8Array && tree[2] instanceof Uint8Array) {\n        const label = labelToString(tree[1]);\n        const sub = hashTreeToString(tree[2]);\n        return `label(\\n label:\\n${indent(label)}\\n sub:\\n${indent(sub)}\\n)`;\n      } else {\n        throw UnknownError.fromCode(\n          new HashTreeDecodeErrorCode('Invalid tree structure for labeled'),\n        );\n      }\n    }\n    case NodeType.Leaf: {\n      if (!tree[1]) {\n        throw UnknownError.fromCode(new HashTreeDecodeErrorCode('Invalid tree structure for leaf'));\n      } else if (Array.isArray(tree[1])) {\n        return JSON.stringify(tree[1]);\n      }\n      return `leaf(...${tree[1].byteLength} bytes)`;\n    }\n    case NodeType.Pruned: {\n      if (!tree[1]) {\n        throw UnknownError.fromCode(\n          new HashTreeDecodeErrorCode('Invalid tree structure for pruned'),\n        );\n      } else if (Array.isArray(tree[1])) {\n        return JSON.stringify(tree[1]);\n      }\n\n      return `pruned(${bytesToHex(new Uint8Array(tree[1]))}`;\n    }\n    default: {\n      return `unknown(${JSON.stringify(tree[0])})`;\n    }\n  }\n}\n\ninterface Delegation extends Record<string, unknown> {\n  subnet_id: Uint8Array;\n  certificate: Uint8Array;\n}\n\nfunction isBufferGreaterThan(a: Uint8Array, b: Uint8Array): boolean {\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] > b[i]) {\n      return true;\n    }\n  }\n  return false;\n}\n\ntype VerifyFunc = (pk: Uint8Array, sig: Uint8Array, msg: Uint8Array) => Promise<boolean> | boolean;\n\nexport interface CreateCertificateOptions {\n  /**\n   * The bytes encoding the certificate to be verified\n   */\n  certificate: Uint8Array;\n  /**\n   * The root key against which to verify the certificate\n   * (normally, the root key of the IC main network)\n   */\n  rootKey: Uint8Array;\n  /**\n   * The effective canister ID of the request when verifying a response, or\n   * the signing canister ID when verifying a certified variable.\n   */\n  canisterId: Principal;\n  /**\n   * BLS Verification strategy. Default strategy uses bls12_381 from @noble/curves\n   */\n  blsVerify?: VerifyFunc;\n\n  /**\n   * The maximum age of the certificate in minutes. Default is 5 minutes.\n   * This is used to verify the time the certificate was signed, particularly for validating Delegation certificates, which can live for longer than the default window of +/- 5 minutes. If the certificate is\n   * older than the specified age, it will fail verification.\n   * @default 5\n   */\n  maxAgeInMinutes?: number;\n\n  /**\n   * Overrides the maxAgeInMinutes setting and skips comparing the client's time against the certificate. Used for scenarios where the machine's clock is known to be out of sync, or for inspecting expired certificates.\n   * @default false\n   */\n  disableTimeVerification?: boolean;\n\n  /**\n   * The agent used to sync time with the IC network, if the certificate fails the freshness check.\n   * If the agent does not implement the {@link HttpAgent.getTimeDiffMsecs}, {@link HttpAgent.hasSyncedTime} and {@link HttpAgent.syncTime} methods,\n   * time will not be synced in case of a freshness check failure.\n   * @default undefined\n   */\n  agent?: Agent;\n}\n\nexport class Certificate {\n  public cert: Cert;\n  #disableTimeVerification: boolean = false;\n  #agent: Pick<HttpAgent, 'getTimeDiffMsecs' | 'hasSyncedTime' | 'syncTime'> | undefined =\n    undefined;\n\n  /**\n   * Create a new instance of a certificate, automatically verifying it.\n   * @param {CreateCertificateOptions} options {@link CreateCertificateOptions}\n   * @throws if the verification of the certificate fails\n   */\n  public static async create(options: CreateCertificateOptions): Promise<Certificate> {\n    const cert = Certificate.createUnverified(options);\n\n    await cert.verify();\n    return cert;\n  }\n\n  private static createUnverified(options: CreateCertificateOptions): Certificate {\n    return new Certificate(\n      options.certificate,\n      options.rootKey,\n      options.canisterId,\n      options.blsVerify ?? bls.blsVerify,\n      options.maxAgeInMinutes,\n      options.disableTimeVerification,\n      options.agent,\n    );\n  }\n\n  private constructor(\n    certificate: Uint8Array,\n    private _rootKey: Uint8Array,\n    private _canisterId: Principal,\n    private _blsVerify: VerifyFunc,\n    private _maxAgeInMinutes: number = DEFAULT_CERTIFICATE_MAX_AGE_IN_MINUTES,\n    disableTimeVerification: boolean = false,\n    agent?: Agent,\n  ) {\n    this.#disableTimeVerification = disableTimeVerification;\n    this.cert = cbor.decode(certificate);\n\n    if (agent && 'getTimeDiffMsecs' in agent && 'hasSyncedTime' in agent && 'syncTime' in agent) {\n      this.#agent = agent as Pick<HttpAgent, 'getTimeDiffMsecs' | 'hasSyncedTime' | 'syncTime'>;\n    }\n  }\n\n  /**\n   * Lookup a path in the certificate tree, using {@link lookup_path}.\n   * @param path The path to lookup.\n   * @returns The result of the lookup.\n   */\n  public lookup_path(path: NodePath): LookupResult {\n    return lookup_path(path, this.cert.tree);\n  }\n\n  /**\n   * Lookup a subtree in the certificate tree, using {@link lookup_subtree}.\n   * @param path The path to lookup.\n   * @returns The result of the lookup.\n   */\n  public lookup_subtree(path: NodePath): SubtreeLookupResult {\n    return lookup_subtree(path, this.cert.tree);\n  }\n\n  private async verify(): Promise<void> {\n    const rootHash = await reconstruct(this.cert.tree);\n    const derKey = await this._checkDelegationAndGetKey(this.cert.delegation);\n    const sig = this.cert.signature;\n    const key = extractDER(derKey);\n    const msg = concatBytes(domain_sep('ic-state-root'), rootHash);\n\n    const lookupTime = lookupResultToBuffer(this.lookup_path(['time']));\n    if (!lookupTime) {\n      // Should never happen - time is always present in IC certificates\n      throw ProtocolError.fromCode(\n        new CertificateVerificationErrorCode('Certificate does not contain a time'),\n      );\n    }\n\n    // Certificate time verification checks\n    if (!this.#disableTimeVerification) {\n      const timeDiffMsecs = this.#agent?.getTimeDiffMsecs() ?? 0;\n      const maxAgeInMsec = this._maxAgeInMinutes * MINUTES_TO_MSEC;\n      const now = new Date();\n      const adjustedNow = now.getTime() + timeDiffMsecs;\n      const earliestCertificateTime = adjustedNow - maxAgeInMsec;\n      const latestCertificateTime =\n        adjustedNow + DEFAULT_CERTIFICATE_MAX_MINUTES_IN_FUTURE * MINUTES_TO_MSEC;\n\n      const certTime = decodeTime(lookupTime);\n\n      const isCertificateTimePast = certTime.getTime() < earliestCertificateTime;\n      const isCertificateTimeFuture = certTime.getTime() > latestCertificateTime;\n\n      if (\n        (isCertificateTimePast || isCertificateTimeFuture) &&\n        this.#agent &&\n        !this.#agent.hasSyncedTime()\n      ) {\n        await this.#agent.syncTime(this._canisterId);\n        return await this.verify();\n      }\n\n      if (isCertificateTimePast) {\n        throw TrustError.fromCode(\n          new CertificateTimeErrorCode(this._maxAgeInMinutes, certTime, now, timeDiffMsecs, 'past'),\n        );\n      } else if (isCertificateTimeFuture) {\n        if (this.#agent?.hasSyncedTime()) {\n          // This case should never happen, and it signals a bug in either the replica or the local system.\n          throw UnknownError.fromCode(\n            new UnexpectedErrorCode(\n              'System time has been synced with the IC network, but certificate is still too far in the future.',\n            ),\n          );\n        }\n        throw TrustError.fromCode(\n          new CertificateTimeErrorCode(5, certTime, now, timeDiffMsecs, 'future'),\n        );\n      }\n    }\n\n    try {\n      const sigVer = await this._blsVerify(key, sig, msg);\n      if (!sigVer) {\n        throw TrustError.fromCode(new CertificateVerificationErrorCode('Invalid signature'));\n      }\n    } catch (err) {\n      throw TrustError.fromCode(\n        new CertificateVerificationErrorCode('Signature verification failed', err),\n      );\n    }\n  }\n\n  private async _checkDelegationAndGetKey(d: Delegation | undefined): Promise<Uint8Array> {\n    if (!d) {\n      return this._rootKey;\n    }\n\n    const cert = Certificate.createUnverified({\n      certificate: d.certificate,\n      rootKey: this._rootKey,\n      canisterId: this._canisterId,\n      blsVerify: this._blsVerify,\n      disableTimeVerification: this.#disableTimeVerification,\n      maxAgeInMinutes: DEFAULT_CERTIFICATE_DELEGATION_MAX_AGE_IN_MINUTES,\n      agent: this.#agent as HttpAgent,\n    });\n\n    if (cert.cert.delegation) {\n      throw ProtocolError.fromCode(new CertificateHasTooManyDelegationsErrorCode());\n    }\n\n    await cert.verify();\n\n    const subnetIdBytes = d.subnet_id;\n    const subnetId = Principal.fromUint8Array(subnetIdBytes);\n\n    const canisterInRange = check_canister_ranges({\n      canisterId: this._canisterId,\n      subnetId,\n      tree: cert.cert.tree,\n    });\n    if (!canisterInRange) {\n      throw TrustError.fromCode(new CertificateNotAuthorizedErrorCode(this._canisterId, subnetId));\n    }\n\n    const publicKeyLookup = lookupResultToBuffer(\n      cert.lookup_path(['subnet', subnetIdBytes, 'public_key']),\n    );\n    if (!publicKeyLookup) {\n      throw TrustError.fromCode(\n        new MissingLookupValueErrorCode(\n          `Could not find subnet key for subnet ID ${subnetId.toText()}`,\n        ),\n      );\n    }\n    return publicKeyLookup;\n  }\n}\n\nconst DER_PREFIX = hexToBytes(\n  '308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100',\n);\nconst KEY_LENGTH = 96;\n\nfunction extractDER(buf: Uint8Array): Uint8Array {\n  const expectedLength = DER_PREFIX.byteLength + KEY_LENGTH;\n  if (buf.byteLength !== expectedLength) {\n    throw ProtocolError.fromCode(new DerKeyLengthMismatchErrorCode(expectedLength, buf.byteLength));\n  }\n  const prefix = buf.slice(0, DER_PREFIX.byteLength);\n  if (!uint8Equals(prefix, DER_PREFIX)) {\n    throw ProtocolError.fromCode(new DerPrefixMismatchErrorCode(DER_PREFIX, prefix));\n  }\n\n  return buf.slice(DER_PREFIX.byteLength);\n}\n\n/**\n * Utility function to constrain the type of a lookup result\n * @param result the result of a lookup\n * @returns {Uint8Array | undefined} the value if the lookup was found, `undefined` otherwise\n */\nexport function lookupResultToBuffer(result: LookupResult): Uint8Array | undefined {\n  if (result.status !== LookupPathStatus.Found) {\n    return undefined;\n  }\n\n  if (result.value instanceof Uint8Array) {\n    return result.value;\n  }\n\n  return undefined;\n}\n\n/**\n * @param t The hash tree to reconstruct\n */\nexport async function reconstruct(t: HashTree): Promise<Uint8Array> {\n  switch (t[0]) {\n    case NodeType.Empty:\n      return sha256(domain_sep('ic-hashtree-empty'));\n    case NodeType.Pruned:\n      return t[1];\n    case NodeType.Leaf:\n      return sha256(concatBytes(domain_sep('ic-hashtree-leaf'), t[1]));\n    case NodeType.Labeled:\n      return sha256(concatBytes(domain_sep('ic-hashtree-labeled'), t[1], await reconstruct(t[2])));\n    case NodeType.Fork:\n      return sha256(\n        concatBytes(\n          domain_sep('ic-hashtree-fork'),\n          await reconstruct(t[1]),\n          await reconstruct(t[2]),\n        ),\n      );\n    default:\n      throw UNREACHABLE_ERROR;\n  }\n}\n\n/**\n * Creates a domain separator for hashing by encoding the input string\n * with its length as a prefix.\n * @param s - The input string to encode.\n * @returns A Uint8Array containing the encoded domain separator.\n */\nexport function domain_sep(s: string): Uint8Array {\n  const len = new Uint8Array([s.length]);\n  const str = new TextEncoder().encode(s);\n  return concatBytes(len, str);\n}\n\nfunction pathToLabel(path: NodePath): NodeLabel {\n  return (typeof path[0] === 'string' ? utf8ToBytes(path[0]) : path[0]) as NodeLabel;\n}\n\nexport enum LookupPathStatus {\n  Unknown = 'Unknown',\n  Absent = 'Absent',\n  Found = 'Found',\n  Error = 'Error',\n}\n\nexport interface LookupPathResultAbsent {\n  status: LookupPathStatus.Absent;\n}\n\nexport interface LookupPathResultUnknown {\n  status: LookupPathStatus.Unknown;\n}\n\nexport interface LookupPathResultFound {\n  status: LookupPathStatus.Found;\n  value: Uint8Array;\n}\n\nexport interface LookupPathResultError {\n  status: LookupPathStatus.Error;\n}\n\nexport type LookupResult =\n  | LookupPathResultAbsent\n  | LookupPathResultUnknown\n  | LookupPathResultFound\n  | LookupPathResultError;\n\nexport enum LookupSubtreeStatus {\n  Absent = 'Absent',\n  Unknown = 'Unknown',\n  Found = 'Found',\n}\n\nexport interface LookupSubtreeResultAbsent {\n  status: LookupSubtreeStatus.Absent;\n}\n\nexport interface LookupSubtreeResultUnknown {\n  status: LookupSubtreeStatus.Unknown;\n}\n\nexport interface LookupSubtreeResultFound {\n  status: LookupSubtreeStatus.Found;\n  value: HashTree;\n}\n\nexport type SubtreeLookupResult =\n  | LookupSubtreeResultAbsent\n  | LookupSubtreeResultUnknown\n  | LookupSubtreeResultFound;\n\nexport enum LookupLabelStatus {\n  Absent = 'Absent',\n  Unknown = 'Unknown',\n  Found = 'Found',\n  Less = 'Less',\n  Greater = 'Greater',\n}\n\nexport interface LookupLabelResultAbsent {\n  status: LookupLabelStatus.Absent;\n}\n\nexport interface LookupLabelResultUnknown {\n  status: LookupLabelStatus.Unknown;\n}\n\nexport interface LookupLabelResultFound {\n  status: LookupLabelStatus.Found;\n  value: HashTree;\n}\n\nexport interface LookupLabelResultGreater {\n  status: LookupLabelStatus.Greater;\n}\n\nexport interface LookupLabelResultLess {\n  status: LookupLabelStatus.Less;\n}\n\nexport type LabelLookupResult =\n  | LookupLabelResultAbsent\n  | LookupLabelResultUnknown\n  | LookupLabelResultFound\n  | LookupLabelResultGreater\n  | LookupLabelResultLess;\n\n/**\n * Lookup a path in a tree. If the path is a subtree, use {@link lookup_subtree} instead.\n * @param path the path to look up\n * @param tree the tree to search\n * @returns {LookupResult} the result of the lookup\n */\nexport function lookup_path(path: NodePath, tree: HashTree): LookupResult {\n  if (path.length === 0) {\n    switch (tree[0]) {\n      case NodeType.Empty: {\n        return {\n          status: LookupPathStatus.Absent,\n        };\n      }\n\n      case NodeType.Leaf: {\n        if (!tree[1]) {\n          throw UnknownError.fromCode(\n            new HashTreeDecodeErrorCode('Invalid tree structure for leaf'),\n          );\n        }\n\n        if (tree[1] instanceof Uint8Array) {\n          return {\n            status: LookupPathStatus.Found,\n            value: tree[1].slice(tree[1].byteOffset, tree[1].byteLength + tree[1].byteOffset),\n          };\n        }\n\n        throw UNREACHABLE_ERROR;\n      }\n\n      case NodeType.Pruned: {\n        return {\n          status: LookupPathStatus.Unknown,\n        };\n      }\n\n      case NodeType.Labeled:\n      case NodeType.Fork: {\n        return {\n          status: LookupPathStatus.Error,\n        };\n      }\n\n      default: {\n        throw UNREACHABLE_ERROR;\n      }\n    }\n  }\n\n  const label = pathToLabel(path);\n  const lookupResult = find_label(label, tree);\n\n  switch (lookupResult.status) {\n    case LookupLabelStatus.Found: {\n      return lookup_path(path.slice(1), lookupResult.value);\n    }\n\n    case LookupLabelStatus.Absent:\n    case LookupLabelStatus.Greater:\n    case LookupLabelStatus.Less: {\n      return {\n        status: LookupPathStatus.Absent,\n      };\n    }\n\n    case LookupLabelStatus.Unknown: {\n      return {\n        status: LookupPathStatus.Unknown,\n      };\n    }\n\n    default: {\n      throw UNREACHABLE_ERROR;\n    }\n  }\n}\n\n/**\n * Lookup a subtree in a tree.\n * @param path the path to look up\n * @param tree the tree to search\n * @returns {SubtreeLookupResult} the result of the lookup\n */\nexport function lookup_subtree(path: NodePath, tree: HashTree): SubtreeLookupResult {\n  if (path.length === 0) {\n    return {\n      status: LookupSubtreeStatus.Found,\n      value: tree,\n    };\n  }\n\n  const label = pathToLabel(path);\n  const lookupResult = find_label(label, tree);\n\n  switch (lookupResult.status) {\n    case LookupLabelStatus.Found: {\n      return lookup_subtree(path.slice(1), lookupResult.value);\n    }\n\n    case LookupLabelStatus.Unknown: {\n      return {\n        status: LookupSubtreeStatus.Unknown,\n      };\n    }\n\n    case LookupLabelStatus.Absent:\n    case LookupLabelStatus.Greater:\n    case LookupLabelStatus.Less: {\n      return {\n        status: LookupSubtreeStatus.Absent,\n      };\n    }\n\n    default: {\n      throw UNREACHABLE_ERROR;\n    }\n  }\n}\n\n/**\n * If the tree is a fork, flatten it into an array of trees\n * @param {HashTree} t the tree to flatten\n * @returns {HashTree[]} the flattened tree\n */\nexport function flatten_forks(t: HashTree): Array<LabeledHashTree | LeafHashTree | PrunedHashTree> {\n  switch (t[0]) {\n    case NodeType.Empty:\n      return [];\n    case NodeType.Fork:\n      return flatten_forks(t[1]).concat(flatten_forks(t[2]));\n    default:\n      return [t];\n  }\n}\n\n/**\n * Find a label in a tree\n * @param label the label to find\n * @param tree the tree to search\n * @returns {LabelLookupResult} the result of the label lookup\n */\nexport function find_label(label: NodeLabel, tree: HashTree): LabelLookupResult {\n  switch (tree[0]) {\n    // if we have a labelled node, compare the node's label to the one we are\n    // looking for\n    case NodeType.Labeled:\n      // if the label we're searching for is greater than this node's label,\n      // we need to keep searching\n      if (isBufferGreaterThan(label, tree[1])) {\n        return {\n          status: LookupLabelStatus.Greater,\n        };\n      }\n\n      // if the label we're searching for is equal this node's label, we can\n      // stop searching and return the found node\n      if (uint8Equals(label, tree[1])) {\n        return {\n          status: LookupLabelStatus.Found,\n          value: tree[2],\n        };\n      }\n\n      // if the label we're searching for is not greater than or equal to this\n      // node's label, then it's less than this node's label, and we can stop\n      // searching because we've looked too far\n      return {\n        status: LookupLabelStatus.Less,\n      };\n\n    // if we have a fork node, we need to search both sides, starting with the left\n    case NodeType.Fork: {\n      // search in the left node\n      const leftLookupResult = find_label(label, tree[1]);\n\n      switch (leftLookupResult.status) {\n        // if the label we're searching for is greater than the left node lookup,\n        // we need to search the right node\n        case LookupLabelStatus.Greater: {\n          const rightLookupResult = find_label(label, tree[2]);\n\n          // if the label we're searching for is less than the right node lookup,\n          // then we can stop searching and say that the label is provably Absent\n          if (rightLookupResult.status === LookupLabelStatus.Less) {\n            return {\n              status: LookupLabelStatus.Absent,\n            };\n          }\n\n          // if the label we're searching for is less than or equal to the right\n          // node lookup, then we let the caller handle it\n          return rightLookupResult;\n        }\n\n        // if the left node returns an uncertain result, we need to search the\n        // right node\n        case LookupLabelStatus.Unknown: {\n          const rightLookupResult = find_label(label, tree[2]);\n\n          // if the label we're searching for is less than the right node lookup,\n          // then we also need to return an uncertain result\n          if (rightLookupResult.status === LookupLabelStatus.Less) {\n            return {\n              status: LookupLabelStatus.Unknown,\n            };\n          }\n\n          // if the label we're searching for is less than or equal to the right\n          // node lookup, then we let the caller handle it\n          return rightLookupResult;\n        }\n\n        // if the label we're searching for is not greater than the left node\n        // lookup, or the result is not uncertain, we stop searching and return\n        // whatever the result of the left node lookup was, which can be either\n        // Found or Absent\n        default: {\n          return leftLookupResult;\n        }\n      }\n    }\n\n    // if we encounter a Pruned node, we can't know for certain if the label\n    // we're searching for is present or not\n    case NodeType.Pruned:\n      return {\n        status: LookupLabelStatus.Unknown,\n      };\n\n    // if the current node is Empty, or a Leaf, we can stop searching because\n    // we know for sure that the label we're searching for is not present\n    default:\n      return {\n        status: LookupLabelStatus.Absent,\n      };\n  }\n}\n\n/**\n * Check if a canister ID falls within the canister ranges of a given subnet\n * @param params the parameters with which to check the canister ranges\n * @param params.canisterId the canister ID to check\n * @param params.subnetId the subnet ID from which to check the canister ranges\n * @param params.tree the hash tree in which to lookup the subnet's canister ranges\n * @returns {boolean} `true` if the canister is in the range, `false` otherwise\n */\nexport function check_canister_ranges(params: {\n  canisterId: Principal;\n  subnetId: Principal;\n  tree: HashTree;\n}): boolean {\n  const { canisterId, subnetId, tree } = params;\n  const rangeLookup = lookup_path(['subnet', subnetId.toUint8Array(), 'canister_ranges'], tree);\n\n  if (rangeLookup.status !== LookupPathStatus.Found) {\n    throw ProtocolError.fromCode(\n      new LookupErrorCode(\n        `Could not find canister ranges for subnet ${subnetId.toText()}`,\n        rangeLookup.status,\n      ),\n    );\n  }\n\n  if (!(rangeLookup.value instanceof Uint8Array)) {\n    throw ProtocolError.fromCode(\n      new MalformedLookupFoundValueErrorCode(\n        `Could not find canister ranges for subnet ${subnetId.toText()}`,\n      ),\n    );\n  }\n\n  const ranges_arr = cbor.decode<Array<[Uint8Array, Uint8Array]>>(rangeLookup.value);\n  const ranges: Array<[Principal, Principal]> = ranges_arr.map(v => [\n    Principal.fromUint8Array(v[0]),\n    Principal.fromUint8Array(v[1]),\n  ]);\n\n  const canisterInRange = ranges.some(r => r[0].ltEq(canisterId) && r[1].gtEq(canisterId));\n\n  return canisterInRange;\n}\n", "import { bls12_381 } from '@noble/curves/bls12-381';\nimport { bytesToHex } from '@noble/hashes/utils';\n\nexport let verify: (pk: Uint8Array, sig: Uint8Array, msg: Uint8Array) => boolean;\n\n/**\n *\n * @param pk primary key: Uint8Array\n * @param sig signature: Uint8Array\n * @param msg message: Uint8Array\n * @returns boolean\n */\nexport function blsVerify(pk: Uint8Array, sig: Uint8Array, msg: Uint8Array): boolean {\n  const primaryKey = typeof pk === 'string' ? pk : bytesToHex(pk);\n  const signature = typeof sig === 'string' ? sig : bytesToHex(sig);\n  const message = typeof msg === 'string' ? msg : bytesToHex(msg);\n  return bls12_381.verifyShortSignature(signature, message, primaryKey);\n}\n", "/**\n * bls12-381 is pairing-friendly Barreto-Lynn-Scott elliptic curve construction allowing to:\n\n* Construct zk-SNARKs at the ~120-bit security, as per [Barbulescu-Duquesne 2017](https://hal.science/hal-01534101/file/main.pdf)\n* Efficiently verify N aggregate signatures with 1 pairing and N ec additions:\nthe Boneh-Lynn-Shacham signature scheme is orders of magnitude more efficient than Schnorr\n\nBLS can mean 2 different things:\n\n* Barreto-Lynn-Scott: BLS12, a Pairing Friendly Elliptic Curve\n* Boneh-Lynn-Shacham: A Signature Scheme.\n\n### Summary\n\n1. BLS Relies on expensive bilinear pairing\n2. Secret Keys: 32 bytes\n3. Public Keys: 48 OR 96 bytes - big-endian x coordinate of point on G1 OR G2 curve\n4. Signatures: 96 OR 48 bytes - big-endian x coordinate of point on G2 OR G1 curve\n5. The 12 stands for the Embedding degree.\n\nModes of operation:\n\n* Long signatures:  48-byte keys + 96-byte sigs (G1 keys + G2 sigs).\n* Short signatures: 96-byte keys + 48-byte sigs (G2 keys + G1 sigs).\n\n### Formulas\n\n- `P = pk x G` - public keys\n- `S = pk x H(m)` - signing, uses hash-to-curve on m\n- `e(P, H(m)) == e(G, S)` - verification using pairings\n- `e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))` - signature aggregation\n\n### Curves\n\nG1 is ordinary elliptic curve. G2 is extension field curve, think \"over complex numbers\".\n\n- G1: y² = x³ + 4\n- G2: y² = x³ + 4(u + 1) where u = √−1; r-order subgroup of E'(Fp²), M-type twist\n\n### Towers\n\nPairing G1 + G2 produces element in Fp₁₂, 12-degree polynomial.\nFp₁₂ is usually implemented using tower of lower-degree polynomials for speed.\n\n- Fp₁₂ = Fp₆² => Fp₂³\n- Fp(u) / (u² - β) where β = -1\n- Fp₂(v) / (v³ - ξ) where ξ = u + 1\n- Fp₆(w) / (w² - γ) where γ = v\n- Fp²[u] = Fp/u²+1\n- Fp⁶[v] = Fp²/v³-1-u\n- Fp¹²[w] = Fp⁶/w²-v\n\n### Params\n\n* Embedding degree (k): 12\n* Seed is sometimes named x or t\n* t = -15132376222941642752\n* p = (t-1)² * (t⁴-t²+1)/3 + t\n* r = t⁴-t²+1\n* Ate loop size: X\n\nTo verify curve parameters, see\n[pairing-friendly-curves spec](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-pairing-friendly-curves-11).\nBasic math is done over finite fields over p.\nMore complicated math is done over polynominal extension fields.\n\n### Compatibility and notes\n1. It is compatible with Algorand, Chia, Dfinity, Ethereum, Filecoin, ZEC.\nFilecoin uses little endian byte arrays for secret keys - make sure to reverse byte order.\n2. Make sure to correctly select mode: \"long signature\" or \"short signature\".\n3. Compatible with specs:\n   RFC 9380,\n   [cfrg-pairing-friendly-curves-11](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-pairing-friendly-curves-11),\n   [cfrg-bls-signature-05](https://datatracker.ietf.org/doc/draft-irtf-cfrg-bls-signature/).\n\n *\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2.js';\nimport { bls, type CurveFn } from './abstract/bls.ts';\nimport { Field, type IField } from './abstract/modular.ts';\nimport {\n  abytes,\n  bitLen,\n  bitMask,\n  bytesToHex,\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  numberToBytesBE,\n  type Hex,\n} from './utils.ts';\n// Types\nimport { isogenyMap } from './abstract/hash-to-curve.ts';\nimport type { BigintTuple, Fp, Fp12, Fp2, Fp6 } from './abstract/tower.ts';\nimport { psiFrobenius, tower12 } from './abstract/tower.ts';\nimport {\n  mapToCurveSimpleSWU,\n  type AffinePoint,\n  type WeierstrassOpts,\n  type WeierstrassPoint,\n  type WeierstrassPointCons,\n} from './abstract/weierstrass.ts';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\n// To verify math:\n// https://tools.ietf.org/html/draft-irtf-cfrg-pairing-friendly-curves-11\n\n// The BLS parameter x (seed) for BLS12-381. NOTE: it is negative!\n// x = -2^63 - 2^62 - 2^60 - 2^57 - 2^48 - 2^16\nconst BLS_X = BigInt('0xd201000000010000');\n// t = x (called differently in different places)\n// const t = -BLS_X;\nconst BLS_X_LEN = bitLen(BLS_X);\n\n// a=0, b=4\n// P is characteristic of field Fp, in which curve calculations are done.\n// p = (t-1)² * (t⁴-t²+1)/3 + t\n// bls12_381_Fp = (t-1n)**2n * (t**4n - t**2n + 1n) / 3n + t\n// r*h is curve order, amount of points on curve,\n// where r is order of prime subgroup and h is cofactor.\n// r = t⁴-t²+1\n// r = (t**4n - t**2n + 1n)\n// cofactor h of G1: (t - 1)²/3\n// cofactorG1 = (t-1n)**2n/3n\n// x = 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507\n// y = 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569\nconst bls12_381_CURVE_G1: WeierstrassOpts<bigint> = {\n  p: BigInt(\n    '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'\n  ),\n  n: BigInt('0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001'),\n  h: BigInt('0x396c8c005555e1568c00aaab0000aaab'),\n  a: _0n,\n  b: _4n,\n  Gx: BigInt(\n    '0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb'\n  ),\n  Gy: BigInt(\n    '0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1'\n  ),\n};\n\n// CURVE FIELDS\nexport const bls12_381_Fr: IField<bigint> = Field(bls12_381_CURVE_G1.n, {\n  modFromBytes: true,\n  isLE: true,\n});\nconst { Fp, Fp2, Fp6, Fp12 } = tower12({\n  ORDER: bls12_381_CURVE_G1.p,\n  X_LEN: BLS_X_LEN,\n  // Finite extension field over irreducible polynominal.\n  // Fp(u) / (u² - β) where β = -1\n  FP2_NONRESIDUE: [_1n, _1n],\n  Fp2mulByB: ({ c0, c1 }) => {\n    const t0 = Fp.mul(c0, _4n); // 4 * c0\n    const t1 = Fp.mul(c1, _4n); // 4 * c1\n    // (T0-T1) + (T0+T1)*i\n    return { c0: Fp.sub(t0, t1), c1: Fp.add(t0, t1) };\n  },\n  Fp12finalExponentiate: (num) => {\n    const x = BLS_X;\n    // this^(q⁶) / this\n    const t0 = Fp12.div(Fp12.frobeniusMap(num, 6), num);\n    // t0^(q²) * t0\n    const t1 = Fp12.mul(Fp12.frobeniusMap(t0, 2), t0);\n    const t2 = Fp12.conjugate(Fp12._cyclotomicExp(t1, x));\n    const t3 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicSquare(t1)), t2);\n    const t4 = Fp12.conjugate(Fp12._cyclotomicExp(t3, x));\n    const t5 = Fp12.conjugate(Fp12._cyclotomicExp(t4, x));\n    const t6 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicExp(t5, x)), Fp12._cyclotomicSquare(t2));\n    const t7 = Fp12.conjugate(Fp12._cyclotomicExp(t6, x));\n    const t2_t5_pow_q2 = Fp12.frobeniusMap(Fp12.mul(t2, t5), 2);\n    const t4_t1_pow_q3 = Fp12.frobeniusMap(Fp12.mul(t4, t1), 3);\n    const t6_t1c_pow_q1 = Fp12.frobeniusMap(Fp12.mul(t6, Fp12.conjugate(t1)), 1);\n    const t7_t3c_t1 = Fp12.mul(Fp12.mul(t7, Fp12.conjugate(t3)), t1);\n    // (t2 * t5)^(q²) * (t4 * t1)^(q³) * (t6 * t1.conj)^(q^1) * t7 * t3.conj * t1\n    return Fp12.mul(Fp12.mul(Fp12.mul(t2_t5_pow_q2, t4_t1_pow_q3), t6_t1c_pow_q1), t7_t3c_t1);\n  },\n});\n\n// GLV endomorphism Ψ(P), for fast cofactor clearing\nconst { G2psi, G2psi2 } = psiFrobenius(Fp, Fp2, Fp2.div(Fp2.ONE, Fp2.NONRESIDUE)); // 1/(u+1)\n\n/**\n * Default hash_to_field / hash-to-curve for BLS.\n * m: 1 for G1, 2 for G2\n * k: target security level in bits\n * hash: any function, e.g. BBS+ uses BLAKE2: see [github](https://github.com/hyperledger/aries-framework-go/issues/2247).\n * Parameter values come from [section 8.8.2 of RFC 9380](https://www.rfc-editor.org/rfc/rfc9380#section-8.8.2).\n */\nconst htfDefaults = Object.freeze({\n  DST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  encodeDST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  p: Fp.ORDER,\n  m: 2,\n  k: 128,\n  expand: 'xmd',\n  hash: sha256,\n});\n\n// a=0, b=4\n// cofactor h of G2\n// (t^8 - 4t^7 + 5t^6 - 4t^4 + 6t^3 - 4t^2 - 4t + 13)/9\n// cofactorG2 = (t**8n - 4n*t**7n + 5n*t**6n - 4n*t**4n + 6n*t**3n - 4n*t**2n - 4n*t+13n)/9n\n// x = 3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758*u + 352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160\n// y = 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582*u + 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905\nconst bls12_381_CURVE_G2 = {\n  p: Fp2.ORDER,\n  n: bls12_381_CURVE_G1.n,\n  h: BigInt(\n    '0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5'\n  ),\n  a: Fp2.ZERO,\n  b: Fp2.fromBigTuple([_4n, _4n]),\n  Gx: Fp2.fromBigTuple([\n    BigInt(\n      '0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8'\n    ),\n    BigInt(\n      '0x13e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e'\n    ),\n  ]),\n  Gy: Fp2.fromBigTuple([\n    BigInt(\n      '0x0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801'\n    ),\n    BigInt(\n      '0x0606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be'\n    ),\n  ]),\n};\n\n// Encoding utils\n// Compressed point of infinity\n// Set compressed & point-at-infinity bits\nconst COMPZERO = setMask(Fp.toBytes(_0n), { infinity: true, compressed: true });\n\nfunction parseMask(bytes: Uint8Array) {\n  // Copy, so we can remove mask data. It will be removed also later, when Fp.create will call modulo.\n  bytes = bytes.slice();\n  const mask = bytes[0] & 0b1110_0000;\n  const compressed = !!((mask >> 7) & 1); // compression bit (0b1000_0000)\n  const infinity = !!((mask >> 6) & 1); // point at infinity bit (0b0100_0000)\n  const sort = !!((mask >> 5) & 1); // sort bit (0b0010_0000)\n  bytes[0] &= 0b0001_1111; // clear mask (zero first 3 bits)\n  return { compressed, infinity, sort, value: bytes };\n}\n\nfunction setMask(\n  bytes: Uint8Array,\n  mask: { compressed?: boolean; infinity?: boolean; sort?: boolean }\n) {\n  if (bytes[0] & 0b1110_0000) throw new Error('setMask: non-empty mask');\n  if (mask.compressed) bytes[0] |= 0b1000_0000;\n  if (mask.infinity) bytes[0] |= 0b0100_0000;\n  if (mask.sort) bytes[0] |= 0b0010_0000;\n  return bytes;\n}\n\nfunction pointG1ToBytes(\n  _c: WeierstrassPointCons<Fp>,\n  point: WeierstrassPoint<Fp>,\n  isComp: boolean\n) {\n  const { BYTES: L, ORDER: P } = Fp;\n  const is0 = point.is0();\n  const { x, y } = point.toAffine();\n  if (isComp) {\n    if (is0) return COMPZERO.slice();\n    const sort = Boolean((y * _2n) / P);\n    return setMask(numberToBytesBE(x, L), { compressed: true, sort });\n  } else {\n    if (is0) {\n      return concatBytes(Uint8Array.of(0x40), new Uint8Array(2 * L - 1));\n    } else {\n      return concatBytes(numberToBytesBE(x, L), numberToBytesBE(y, L));\n    }\n  }\n}\n\nfunction signatureG1ToBytes(point: WeierstrassPoint<Fp>) {\n  point.assertValidity();\n  const { BYTES: L, ORDER: P } = Fp;\n  const { x, y } = point.toAffine();\n  if (point.is0()) return COMPZERO.slice();\n  const sort = Boolean((y * _2n) / P);\n  return setMask(numberToBytesBE(x, L), { compressed: true, sort });\n}\n\nfunction pointG1FromBytes(bytes: Uint8Array): AffinePoint<Fp> {\n  const { compressed, infinity, sort, value } = parseMask(bytes);\n  const { BYTES: L, ORDER: P } = Fp;\n  if (value.length === 48 && compressed) {\n    const compressedValue = bytesToNumberBE(value);\n    // Zero\n    const x = Fp.create(compressedValue & bitMask(Fp.BITS));\n    if (infinity) {\n      if (x !== _0n) throw new Error('invalid G1 point: non-empty, at infinity, with compression');\n      return { x: _0n, y: _0n };\n    }\n    const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381_CURVE_G1.b)); // y² = x³ + b\n    let y = Fp.sqrt(right);\n    if (!y) throw new Error('invalid G1 point: compressed point');\n    if ((y * _2n) / P !== BigInt(sort)) y = Fp.neg(y);\n    return { x: Fp.create(x), y: Fp.create(y) };\n  } else if (value.length === 96 && !compressed) {\n    // Check if the infinity flag is set\n    const x = bytesToNumberBE(value.subarray(0, L));\n    const y = bytesToNumberBE(value.subarray(L));\n    if (infinity) {\n      if (x !== _0n || y !== _0n) throw new Error('G1: non-empty point at infinity');\n      return bls12_381.G1.Point.ZERO.toAffine();\n    }\n    return { x: Fp.create(x), y: Fp.create(y) };\n  } else {\n    throw new Error('invalid G1 point: expected 48/96 bytes');\n  }\n}\n\nfunction signatureG1FromBytes(hex: Hex): WeierstrassPoint<Fp> {\n  const { infinity, sort, value } = parseMask(ensureBytes('signatureHex', hex, 48));\n  const P = Fp.ORDER;\n  const Point = bls12_381.G1.Point;\n  const compressedValue = bytesToNumberBE(value);\n  // Zero\n  if (infinity) return Point.ZERO;\n  const x = Fp.create(compressedValue & bitMask(Fp.BITS));\n  const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381_CURVE_G1.b)); // y² = x³ + b\n  let y = Fp.sqrt(right);\n  if (!y) throw new Error('invalid G1 point: compressed');\n  const aflag = BigInt(sort);\n  if ((y * _2n) / P !== aflag) y = Fp.neg(y);\n  const point = Point.fromAffine({ x, y });\n  point.assertValidity();\n  return point;\n}\n\nfunction pointG2ToBytes(\n  _c: WeierstrassPointCons<Fp2>,\n  point: WeierstrassPoint<Fp2>,\n  isComp: boolean\n) {\n  const { BYTES: L, ORDER: P } = Fp;\n  const is0 = point.is0();\n  const { x, y } = point.toAffine();\n  if (isComp) {\n    if (is0) return concatBytes(COMPZERO, numberToBytesBE(_0n, L));\n    const flag = Boolean(y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P);\n    return concatBytes(\n      setMask(numberToBytesBE(x.c1, L), { compressed: true, sort: flag }),\n      numberToBytesBE(x.c0, L)\n    );\n  } else {\n    if (is0) return concatBytes(Uint8Array.of(0x40), new Uint8Array(4 * L - 1));\n    const { re: x0, im: x1 } = Fp2.reim(x);\n    const { re: y0, im: y1 } = Fp2.reim(y);\n    return concatBytes(\n      numberToBytesBE(x1, L),\n      numberToBytesBE(x0, L),\n      numberToBytesBE(y1, L),\n      numberToBytesBE(y0, L)\n    );\n  }\n}\n\nfunction signatureG2ToBytes(point: WeierstrassPoint<Fp2>) {\n  point.assertValidity();\n  const { BYTES: L } = Fp;\n  if (point.is0()) return concatBytes(COMPZERO, numberToBytesBE(_0n, L));\n  const { x, y } = point.toAffine();\n  const { re: x0, im: x1 } = Fp2.reim(x);\n  const { re: y0, im: y1 } = Fp2.reim(y);\n  const tmp = y1 > _0n ? y1 * _2n : y0 * _2n;\n  const sort = Boolean((tmp / Fp.ORDER) & _1n);\n  const z2 = x0;\n  return concatBytes(\n    setMask(numberToBytesBE(x1, L), { sort, compressed: true }),\n    numberToBytesBE(z2, L)\n  );\n}\n\nfunction pointG2FromBytes(bytes: Uint8Array): AffinePoint<Fp2> {\n  const { BYTES: L, ORDER: P } = Fp;\n  const { compressed, infinity, sort, value } = parseMask(bytes);\n  if (\n    (!compressed && !infinity && sort) || // 00100000\n    (!compressed && infinity && sort) || // 01100000\n    (sort && infinity && compressed) // 11100000\n  ) {\n    throw new Error('invalid encoding flag: ' + (bytes[0] & 0b1110_0000));\n  }\n  const slc = (b: Uint8Array, from: number, to?: number) => bytesToNumberBE(b.slice(from, to));\n  if (value.length === 96 && compressed) {\n    if (infinity) {\n      // check that all bytes are 0\n      if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\n        throw new Error('invalid G2 point: compressed');\n      }\n      return { x: Fp2.ZERO, y: Fp2.ZERO };\n    }\n    const x_1 = slc(value, 0, L);\n    const x_0 = slc(value, L, 2 * L);\n    const x = Fp2.create({ c0: Fp.create(x_0), c1: Fp.create(x_1) });\n    const right = Fp2.add(Fp2.pow(x, _3n), bls12_381_CURVE_G2.b); // y² = x³ + 4 * (u+1) = x³ + b\n    let y = Fp2.sqrt(right);\n    const Y_bit = y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P ? _1n : _0n;\n    y = sort && Y_bit > 0 ? y : Fp2.neg(y);\n    return { x, y };\n  } else if (value.length === 192 && !compressed) {\n    if (infinity) {\n      if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\n        throw new Error('invalid G2 point: uncompressed');\n      }\n      return { x: Fp2.ZERO, y: Fp2.ZERO };\n    }\n    const x1 = slc(value, 0 * L, 1 * L);\n    const x0 = slc(value, 1 * L, 2 * L);\n    const y1 = slc(value, 2 * L, 3 * L);\n    const y0 = slc(value, 3 * L, 4 * L);\n    return { x: Fp2.fromBigTuple([x0, x1]), y: Fp2.fromBigTuple([y0, y1]) };\n  } else {\n    throw new Error('invalid G2 point: expected 96/192 bytes');\n  }\n}\n\nfunction signatureG2FromBytes(hex: Hex) {\n  const { ORDER: P } = Fp;\n  // TODO: Optimize, it's very slow because of sqrt.\n  const { infinity, sort, value } = parseMask(ensureBytes('signatureHex', hex));\n  const Point = bls12_381.G2.Point;\n  const half = value.length / 2;\n  if (half !== 48 && half !== 96)\n    throw new Error('invalid compressed signature length, expected 96/192 bytes');\n  const z1 = bytesToNumberBE(value.slice(0, half));\n  const z2 = bytesToNumberBE(value.slice(half));\n  // Indicates the infinity point\n  if (infinity) return Point.ZERO;\n  const x1 = Fp.create(z1 & bitMask(Fp.BITS));\n  const x2 = Fp.create(z2);\n  const x = Fp2.create({ c0: x2, c1: x1 });\n  const y2 = Fp2.add(Fp2.pow(x, _3n), bls12_381_CURVE_G2.b); // y² = x³ + 4\n  // The slow part\n  let y = Fp2.sqrt(y2);\n  if (!y) throw new Error('Failed to find a square root');\n\n  // Choose the y whose leftmost bit of the imaginary part is equal to the a_flag1\n  // If y1 happens to be zero, then use the bit of y0\n  const { re: y0, im: y1 } = Fp2.reim(y);\n  const aflag1 = BigInt(sort);\n  const isGreater = y1 > _0n && (y1 * _2n) / P !== aflag1;\n  const is0 = y1 === _0n && (y0 * _2n) / P !== aflag1;\n  if (isGreater || is0) y = Fp2.neg(y);\n  const point = Point.fromAffine({ x, y });\n  point.assertValidity();\n  return point;\n}\n\n/**\n * bls12-381 pairing-friendly curve.\n * @example\n * import { bls12_381 as bls } from '@noble/curves/bls12-381';\n * // G1 keys, G2 signatures\n * const privateKey = '67d53f170b908cabb9eb326c3c337762d59289a8fec79f7bc9254b584b73265c';\n * const message = '64726e3da8';\n * const publicKey = bls.getPublicKey(privateKey);\n * const signature = bls.sign(message, privateKey);\n * const isValid = bls.verify(signature, message, publicKey);\n */\nexport const bls12_381: CurveFn = bls({\n  // Fields\n  fields: {\n    Fp,\n    Fp2,\n    Fp6,\n    Fp12,\n    Fr: bls12_381_Fr,\n  },\n  // G1: y² = x³ + 4\n  G1: {\n    ...bls12_381_CURVE_G1,\n    Fp,\n    htfDefaults: { ...htfDefaults, m: 1, DST: 'BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_NUL_' },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    isTorsionFree: (c, point): boolean => {\n      // GLV endomorphism ψ(P)\n      const beta = BigInt(\n        '0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'\n      );\n      const phi = new c(Fp.mul(point.X, beta), point.Y, point.Z);\n      // TODO: unroll\n      const xP = point.multiplyUnsafe(BLS_X).negate(); // [x]P\n      const u2P = xP.multiplyUnsafe(BLS_X); // [u2]P\n      return u2P.equals(phi);\n    },\n    // Clear cofactor of G1\n    // https://eprint.iacr.org/2019/403\n    clearCofactor: (_c, point) => {\n      // return this.multiplyUnsafe(CURVE.h);\n      return point.multiplyUnsafe(BLS_X).add(point); // x*P + P\n    },\n    mapToCurve: mapToG1,\n    fromBytes: pointG1FromBytes,\n    toBytes: pointG1ToBytes,\n    ShortSignature: {\n      fromBytes(bytes: Uint8Array) {\n        abytes(bytes);\n        return signatureG1FromBytes(bytes);\n      },\n      fromHex(hex: Hex): WeierstrassPoint<Fp> {\n        return signatureG1FromBytes(hex);\n      },\n      toBytes(point: WeierstrassPoint<Fp>) {\n        return signatureG1ToBytes(point);\n      },\n      toRawBytes(point: WeierstrassPoint<Fp>) {\n        return signatureG1ToBytes(point);\n      },\n      toHex(point: WeierstrassPoint<Fp>) {\n        return bytesToHex(signatureG1ToBytes(point));\n      },\n    },\n  },\n  G2: {\n    ...bls12_381_CURVE_G2,\n    Fp: Fp2,\n    // https://datatracker.ietf.org/doc/html/rfc9380#name-clearing-the-cofactor\n    // https://datatracker.ietf.org/doc/html/rfc9380#name-cofactor-clearing-for-bls12\n    hEff: BigInt(\n      '0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551'\n    ),\n    htfDefaults: { ...htfDefaults },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    mapToCurve: mapToG2,\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    // Older version: https://eprint.iacr.org/2019/814.pdf\n    isTorsionFree: (c, P): boolean => {\n      return P.multiplyUnsafe(BLS_X).negate().equals(G2psi(c, P)); // ψ(P) == [u](P)\n    },\n    // Maps the point into the prime-order subgroup G2.\n    // clear_cofactor_bls12381_g2 from RFC 9380.\n    // https://eprint.iacr.org/2017/419.pdf\n    // prettier-ignore\n    clearCofactor: (c, P) => {\n      const x = BLS_X;\n      let t1 = P.multiplyUnsafe(x).negate();  // [-x]P\n      let t2 = G2psi(c, P);                   // Ψ(P)\n      let t3 = P.double();                    // 2P\n      t3 = G2psi2(c, t3);                     // Ψ²(2P)\n      t3 = t3.subtract(t2);                   // Ψ²(2P) - Ψ(P)\n      t2 = t1.add(t2);                        // [-x]P + Ψ(P)\n      t2 = t2.multiplyUnsafe(x).negate();     // [x²]P - [x]Ψ(P)\n      t3 = t3.add(t2);                        // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P)\n      t3 = t3.subtract(t1);                   // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P\n      const Q = t3.subtract(P);               // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P - 1P\n      return Q;                               // [x²-x-1]P + [x-1]Ψ(P) + Ψ²(2P)\n    },\n    fromBytes: pointG2FromBytes,\n    toBytes: pointG2ToBytes,\n    Signature: {\n      fromBytes(bytes: Uint8Array): WeierstrassPoint<Fp2> {\n        abytes(bytes);\n        return signatureG2FromBytes(bytes);\n      },\n      fromHex(hex: Hex): WeierstrassPoint<Fp2> {\n        return signatureG2FromBytes(hex);\n      },\n      toBytes(point: WeierstrassPoint<Fp2>) {\n        return signatureG2ToBytes(point);\n      },\n      toRawBytes(point: WeierstrassPoint<Fp2>) {\n        return signatureG2ToBytes(point);\n      },\n      toHex(point: WeierstrassPoint<Fp2>) {\n        return bytesToHex(signatureG2ToBytes(point));\n      },\n    },\n  },\n  params: {\n    ateLoopSize: BLS_X, // The BLS parameter x for BLS12-381\n    r: bls12_381_CURVE_G1.n, // order; z⁴ − z² + 1; CURVE.n from other curves\n    xNegative: true,\n    twistType: 'multiplicative',\n  },\n  htfDefaults,\n  hash: sha256,\n});\n\n// 3-isogeny map from E' to E https://www.rfc-editor.org/rfc/rfc9380#appendix-E.3\nconst isogenyMapG2 = isogenyMap(\n  Fp2,\n  [\n    // xNum\n    [\n      [\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\n      ],\n      [\n        '0x0',\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71a',\n      ],\n      [\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71e',\n        '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38d',\n      ],\n      [\n        '0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1',\n        '0x0',\n      ],\n    ],\n    // xDen\n    [\n      [\n        '0x0',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63',\n      ],\n      [\n        '0xc',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f',\n      ],\n      ['0x1', '0x0'], // LAST 1\n    ],\n    // yNum\n    [\n      [\n        '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\n        '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\n      ],\n      [\n        '0x0',\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97be',\n      ],\n      [\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71c',\n        '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38f',\n      ],\n      [\n        '0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10',\n        '0x0',\n      ],\n    ],\n    // yDen\n    [\n      [\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\n      ],\n      [\n        '0x0',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3',\n      ],\n      [\n        '0x12',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99',\n      ],\n      ['0x1', '0x0'], // LAST 1\n    ],\n  ].map((i) => i.map((pair) => Fp2.fromBigTuple(pair.map(BigInt) as BigintTuple))) as [\n    Fp2[],\n    Fp2[],\n    Fp2[],\n    Fp2[],\n  ]\n);\n// 11-isogeny map from E' to E\nconst isogenyMapG1 = isogenyMap(\n  Fp,\n  [\n    // xNum\n    [\n      '0x11a05f2b1e833340b809101dd99815856b303e88a2d7005ff2627b56cdb4e2c85610c2d5f2e62d6eaeac1662734649b7',\n      '0x17294ed3e943ab2f0588bab22147a81c7c17e75b2f6a8417f565e33c70d1e86b4838f2a6f318c356e834eef1b3cb83bb',\n      '0xd54005db97678ec1d1048c5d10a9a1bce032473295983e56878e501ec68e25c958c3e3d2a09729fe0179f9dac9edcb0',\n      '0x1778e7166fcc6db74e0609d307e55412d7f5e4656a8dbf25f1b33289f1b330835336e25ce3107193c5b388641d9b6861',\n      '0xe99726a3199f4436642b4b3e4118e5499db995a1257fb3f086eeb65982fac18985a286f301e77c451154ce9ac8895d9',\n      '0x1630c3250d7313ff01d1201bf7a74ab5db3cb17dd952799b9ed3ab9097e68f90a0870d2dcae73d19cd13c1c66f652983',\n      '0xd6ed6553fe44d296a3726c38ae652bfb11586264f0f8ce19008e218f9c86b2a8da25128c1052ecaddd7f225a139ed84',\n      '0x17b81e7701abdbe2e8743884d1117e53356de5ab275b4db1a682c62ef0f2753339b7c8f8c8f475af9ccb5618e3f0c88e',\n      '0x80d3cf1f9a78fc47b90b33563be990dc43b756ce79f5574a2c596c928c5d1de4fa295f296b74e956d71986a8497e317',\n      '0x169b1f8e1bcfa7c42e0c37515d138f22dd2ecb803a0c5c99676314baf4bb1b7fa3190b2edc0327797f241067be390c9e',\n      '0x10321da079ce07e272d8ec09d2565b0dfa7dccdde6787f96d50af36003b14866f69b771f8c285decca67df3f1605fb7b',\n      '0x6e08c248e260e70bd1e962381edee3d31d79d7e22c837bc23c0bf1bc24c6b68c24b1b80b64d391fa9c8ba2e8ba2d229',\n    ],\n    // xDen\n    [\n      '0x8ca8d548cff19ae18b2e62f4bd3fa6f01d5ef4ba35b48ba9c9588617fc8ac62b558d681be343df8993cf9fa40d21b1c',\n      '0x12561a5deb559c4348b4711298e536367041e8ca0cf0800c0126c2588c48bf5713daa8846cb026e9e5c8276ec82b3bff',\n      '0xb2962fe57a3225e8137e629bff2991f6f89416f5a718cd1fca64e00b11aceacd6a3d0967c94fedcfcc239ba5cb83e19',\n      '0x3425581a58ae2fec83aafef7c40eb545b08243f16b1655154cca8abc28d6fd04976d5243eecf5c4130de8938dc62cd8',\n      '0x13a8e162022914a80a6f1d5f43e7a07dffdfc759a12062bb8d6b44e833b306da9bd29ba81f35781d539d395b3532a21e',\n      '0xe7355f8e4e667b955390f7f0506c6e9395735e9ce9cad4d0a43bcef24b8982f7400d24bc4228f11c02df9a29f6304a5',\n      '0x772caacf16936190f3e0c63e0596721570f5799af53a1894e2e073062aede9cea73b3538f0de06cec2574496ee84a3a',\n      '0x14a7ac2a9d64a8b230b3f5b074cf01996e7f63c21bca68a81996e1cdf9822c580fa5b9489d11e2d311f7d99bbdcc5a5e',\n      '0xa10ecf6ada54f825e920b3dafc7a3cce07f8d1d7161366b74100da67f39883503826692abba43704776ec3a79a1d641',\n      '0x95fc13ab9e92ad4476d6e3eb3a56680f682b4ee96f7d03776df533978f31c1593174e4b4b7865002d6384d168ecdd0a',\n      '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n      '0x90d97c81ba24ee0259d1f094980dcfa11ad138e48a869522b52af6c956543d3cd0c7aee9b3ba3c2be9845719707bb33',\n      '0x134996a104ee5811d51036d776fb46831223e96c254f383d0f906343eb67ad34d6c56711962fa8bfe097e75a2e41c696',\n      '0xcc786baa966e66f4a384c86a3b49942552e2d658a31ce2c344be4b91400da7d26d521628b00523b8dfe240c72de1f6',\n      '0x1f86376e8981c217898751ad8746757d42aa7b90eeb791c09e4a3ec03251cf9de405aba9ec61deca6355c77b0e5f4cb',\n      '0x8cc03fdefe0ff135caf4fe2a21529c4195536fbe3ce50b879833fd221351adc2ee7f8dc099040a841b6daecf2e8fedb',\n      '0x16603fca40634b6a2211e11db8f0a6a074a7d0d4afadb7bd76505c3d3ad5544e203f6326c95a807299b23ab13633a5f0',\n      '0x4ab0b9bcfac1bbcb2c977d027796b3ce75bb8ca2be184cb5231413c4d634f3747a87ac2460f415ec961f8855fe9d6f2',\n      '0x987c8d5333ab86fde9926bd2ca6c674170a05bfe3bdd81ffd038da6c26c842642f64550fedfe935a15e4ca31870fb29',\n      '0x9fc4018bd96684be88c9e221e4da1bb8f3abd16679dc26c1e8b6e6a1f20cabe69d65201c78607a360370e577bdba587',\n      '0xe1bba7a1186bdb5223abde7ada14a23c42a0ca7915af6fe06985e7ed1e4d43b9b3f7055dd4eba6f2bafaaebca731c30',\n      '0x19713e47937cd1be0dfd0b8f1d43fb93cd2fcbcb6caf493fd1183e416389e61031bf3a5cce3fbafce813711ad011c132',\n      '0x18b46a908f36f6deb918c143fed2edcc523559b8aaf0c2462e6bfe7f911f643249d9cdf41b44d606ce07c8a4d0074d8e',\n      '0xb182cac101b9399d155096004f53f447aa7b12a3426b08ec02710e807b4633f06c851c1919211f20d4c04f00b971ef8',\n      '0x245a394ad1eca9b72fc00ae7be315dc757b3b080d4c158013e6632d3c40659cc6cf90ad1c232a6442d9d3f5db980133',\n      '0x5c129645e44cf1102a159f748c4a3fc5e673d81d7e86568d9ab0f5d396a7ce46ba1049b6579afb7866b1e715475224b',\n      '0x15e6be4e990f03ce4ea50b3b42df2eb5cb181d8f84965a3957add4fa95af01b2b665027efec01c7704b456be69c8b604',\n    ],\n    // yDen\n    [\n      '0x16112c4c3a9c98b252181140fad0eae9601a6de578980be6eec3232b5be72e7a07f3688ef60c206d01479253b03663c1',\n      '0x1962d75c2381201e1a0cbd6c43c348b885c84ff731c4d59ca4a10356f453e01f78a4260763529e3532f6102c2e49a03d',\n      '0x58df3306640da276faaae7d6e8eb15778c4855551ae7f310c35a5dd279cd2eca6757cd636f96f891e2538b53dbf67f2',\n      '0x16b7d288798e5395f20d23bf89edb4d1d115c5dbddbcd30e123da489e726af41727364f2c28297ada8d26d98445f5416',\n      '0xbe0e079545f43e4b00cc912f8228ddcc6d19c9f0f69bbb0542eda0fc9dec916a20b15dc0fd2ededda39142311a5001d',\n      '0x8d9e5297186db2d9fb266eaac783182b70152c65550d881c5ecd87b6f0f5a6449f38db9dfa9cce202c6477faaf9b7ac',\n      '0x166007c08a99db2fc3ba8734ace9824b5eecfdfa8d0cf8ef5dd365bc400a0051d5fa9c01a58b1fb93d1a1399126a775c',\n      '0x16a3ef08be3ea7ea03bcddfabba6ff6ee5a4375efa1f4fd7feb34fd206357132b920f5b00801dee460ee415a15812ed9',\n      '0x1866c8ed336c61231a1be54fd1d74cc4f9fb0ce4c6af5920abc5750c4bf39b4852cfe2f7bb9248836b233d9d55535d4a',\n      '0x167a55cda70a6e1cea820597d94a84903216f763e13d87bb5308592e7ea7d4fbc7385ea3d529b35e346ef48bb8913f55',\n      '0x4d2f259eea405bd48f010a01ad2911d9c6dd039bb61a6290e591b36e636a5c871a5c29f4f83060400f8b49cba8f6aa8',\n      '0xaccbb67481d033ff5852c1e48c50c477f94ff8aefce42d28c0f9a88cea7913516f968986f7ebbea9684b529e2561092',\n      '0xad6b9514c767fe3c3613144b45f1496543346d98adf02267d5ceef9a00d9b8693000763e3b90ac11e99b138573345cc',\n      '0x2660400eb2e4f3b628bdd0d53cd76f2bf565b94e72927c1cb748df27942480e420517bd8714cc80d1fadc1326ed06f7',\n      '0xe0fa1d816ddc03e6b24255e0d7819c171c40f65e273b853324efcd6356caa205ca2f570f13497804415473a1d634b8f',\n      '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n  ].map((i) => i.map((j) => BigInt(j))) as [Fp[], Fp[], Fp[], Fp[]]\n);\n\n// Optimized SWU Map - Fp to G1\nconst G1_SWU = mapToCurveSimpleSWU(Fp, {\n  A: Fp.create(\n    BigInt(\n      '0x144698a3b8e9433d693a02c96d4982b0ea985383ee66a8d8e8981aefd881ac98936f8da0e0f97f5cf428082d584c1d'\n    )\n  ),\n  B: Fp.create(\n    BigInt(\n      '0x12e2908d11688030018b12e8753eee3b2016c1f0f24f4070a0b9c14fcef35ef55a23215a316ceaa5d1cc48e98e172be0'\n    )\n  ),\n  Z: Fp.create(BigInt(11)),\n});\n// SWU Map - Fp2 to G2': y² = x³ + 240i * x + 1012 + 1012i\nconst G2_SWU = mapToCurveSimpleSWU(Fp2, {\n  A: Fp2.create({ c0: Fp.create(_0n), c1: Fp.create(BigInt(240)) }), // A' = 240 * I\n  B: Fp2.create({ c0: Fp.create(BigInt(1012)), c1: Fp.create(BigInt(1012)) }), // B' = 1012 * (1 + I)\n  Z: Fp2.create({ c0: Fp.create(BigInt(-2)), c1: Fp.create(BigInt(-1)) }), // Z: -(2 + I)\n});\n\nfunction mapToG1(scalars: bigint[]) {\n  const { x, y } = G1_SWU(Fp.create(scalars[0]));\n  return isogenyMapG1(x, y);\n}\nfunction mapToG2(scalars: bigint[]) {\n  const { x, y } = G2_SWU(Fp2.fromBigTuple(scalars as BigintTuple));\n  return isogenyMapG2(x, y);\n}\n", "/**\n * BLS != BLS.\n * The file implements BLS (Boneh-Lynn-Shacham) signatures.\n * Used in both BLS (Barreto-Lynn-Scott) and BN (Barreto-Naehrig)\n * families of pairing-friendly curves.\n * Consists of two curves: G1 and G2:\n * - G1 is a subgroup of (x, y) E(Fq) over y² = x³ + 4.\n * - G2 is a subgroup of ((x₁, x₂+i), (y₁, y₂+i)) E(Fq²) over y² = x³ + 4(1 + i) where i is √-1\n * - Gt, created by bilinear (ate) pairing e(G1, G2), consists of p-th roots of unity in\n *   Fq^k where k is embedding degree. Only degree 12 is currently supported, 24 is not.\n * Pairing is used to aggregate and verify signatures.\n * There are two modes of operation:\n * - Long signatures:  X-byte keys + 2X-byte sigs (G1 keys + G2 sigs).\n * - Short signatures: 2X-byte keys + X-byte sigs (G2 keys + G1 sigs).\n * @module\n **/\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  abytes,\n  ensureBytes,\n  memoized,\n  randomBytes,\n  type CHash,\n  type Hex,\n  type PrivKey,\n} from '../utils.ts';\nimport { normalizeZ } from './curve.ts';\nimport {\n  createHasher,\n  type H2CHasher,\n  type H2CHashOpts,\n  type H2COpts,\n  type H2CPointConstructor,\n  type htfBasicOpts,\n  type MapToCurve,\n} from './hash-to-curve.ts';\nimport { getMinHashLength, mapHashToField, type IField } from './modular.ts';\nimport type { Fp12, Fp12Bls, Fp2, Fp2Bls, Fp6Bls } from './tower.ts';\nimport {\n  _normFnElement,\n  weierstrassPoints,\n  type CurvePointsRes,\n  type CurvePointsType,\n  type WeierstrassPoint,\n  type WeierstrassPointCons,\n} from './weierstrass.ts';\n\ntype Fp = bigint; // Can be different field?\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n\nexport type TwistType = 'multiplicative' | 'divisive';\n\nexport type ShortSignatureCoder<Fp> = {\n  fromBytes(bytes: Uint8Array): WeierstrassPoint<Fp>;\n  fromHex(hex: Hex): WeierstrassPoint<Fp>;\n  toBytes(point: WeierstrassPoint<Fp>): Uint8Array;\n  toHex(point: WeierstrassPoint<Fp>): string;\n  /** @deprecated use `toBytes` */\n  toRawBytes(point: WeierstrassPoint<Fp>): Uint8Array;\n};\n\nexport type SignatureCoder<Fp> = {\n  fromBytes(bytes: Uint8Array): WeierstrassPoint<Fp>;\n  fromHex(hex: Hex): WeierstrassPoint<Fp>;\n  toBytes(point: WeierstrassPoint<Fp>): Uint8Array;\n  toHex(point: WeierstrassPoint<Fp>): string;\n  /** @deprecated use `toBytes` */\n  toRawBytes(point: WeierstrassPoint<Fp>): Uint8Array;\n};\n\nexport type BlsFields = {\n  Fp: IField<Fp>;\n  Fr: IField<bigint>;\n  Fp2: Fp2Bls;\n  Fp6: Fp6Bls;\n  Fp12: Fp12Bls;\n};\n\nexport type PostPrecomputePointAddFn = (\n  Rx: Fp2,\n  Ry: Fp2,\n  Rz: Fp2,\n  Qx: Fp2,\n  Qy: Fp2\n) => { Rx: Fp2; Ry: Fp2; Rz: Fp2 };\nexport type PostPrecomputeFn = (\n  Rx: Fp2,\n  Ry: Fp2,\n  Rz: Fp2,\n  Qx: Fp2,\n  Qy: Fp2,\n  pointAdd: PostPrecomputePointAddFn\n) => void;\nexport type BlsPairing = {\n  Fp12: Fp12Bls;\n  calcPairingPrecomputes: (p: WeierstrassPoint<Fp2>) => Precompute;\n  millerLoopBatch: (pairs: [Precompute, Fp, Fp][]) => Fp12;\n  pairing: (P: WeierstrassPoint<Fp>, Q: WeierstrassPoint<Fp2>, withFinalExponent?: boolean) => Fp12;\n  pairingBatch: (\n    pairs: { g1: WeierstrassPoint<Fp>; g2: WeierstrassPoint<Fp2> }[],\n    withFinalExponent?: boolean\n  ) => Fp12;\n};\n// TODO: replace CurveType with this? It doesn't contain r however and has postPrecompute\nexport type BlsPairingParams = {\n  // NOTE: MSB is always ignored and used as marker for length,\n  // otherwise leading zeros will be lost.\n  // Can be different from 'X' (seed) param!\n  ateLoopSize: bigint;\n  xNegative: boolean;\n  twistType: TwistType; // BLS12-381: Multiplicative, BN254: Divisive\n  // This is super ugly hack for untwist point in BN254 after miller loop\n  postPrecompute?: PostPrecomputeFn;\n};\nexport type CurveType = {\n  G1: CurvePointsType<Fp> & {\n    ShortSignature: SignatureCoder<Fp>;\n    mapToCurve: MapToCurve<Fp>;\n    htfDefaults: H2COpts;\n  };\n  G2: CurvePointsType<Fp2> & {\n    Signature: SignatureCoder<Fp2>;\n    mapToCurve: MapToCurve<Fp2>;\n    htfDefaults: H2COpts;\n  };\n  fields: BlsFields;\n  params: {\n    // NOTE: MSB is always ignored and used as marker for length,\n    // otherwise leading zeros will be lost.\n    // Can be different from 'X' (seed) param!\n    ateLoopSize: BlsPairingParams['ateLoopSize'];\n    xNegative: BlsPairingParams['xNegative'];\n    r: bigint; // TODO: remove\n    twistType: BlsPairingParams['twistType']; // BLS12-381: Multiplicative, BN254: Divisive\n  };\n  htfDefaults: H2COpts;\n  hash: CHash; // Because we need outputLen for DRBG\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n  // This is super ugly hack for untwist point in BN254 after miller loop\n  postPrecompute?: PostPrecomputeFn;\n};\n\ntype PrecomputeSingle = [Fp2, Fp2, Fp2][];\ntype Precompute = PrecomputeSingle[];\n\n/**\n * BLS consists of two curves: G1 and G2:\n * - G1 is a subgroup of (x, y) E(Fq) over y² = x³ + 4.\n * - G2 is a subgroup of ((x₁, x₂+i), (y₁, y₂+i)) E(Fq²) over y² = x³ + 4(1 + i) where i is √-1\n */\nexport interface BLSCurvePair {\n  longSignatures: BLSSigs<bigint, Fp2>;\n  shortSignatures: BLSSigs<Fp2, bigint>;\n  millerLoopBatch: BlsPairing['millerLoopBatch'];\n  pairing: BlsPairing['pairing'];\n  pairingBatch: BlsPairing['pairingBatch'];\n  G1: { Point: WeierstrassPointCons<bigint> } & H2CHasher<Fp>;\n  G2: { Point: WeierstrassPointCons<Fp2> } & H2CHasher<Fp2>;\n  fields: {\n    Fp: IField<Fp>;\n    Fp2: Fp2Bls;\n    Fp6: Fp6Bls;\n    Fp12: Fp12Bls;\n    Fr: IField<bigint>;\n  };\n  utils: {\n    randomSecretKey: () => Uint8Array;\n    /** @deprecated use randomSecretKey */\n    randomPrivateKey: () => Uint8Array;\n    calcPairingPrecomputes: BlsPairing['calcPairingPrecomputes'];\n  };\n}\n\nexport type CurveFn = BLSCurvePair & {\n  /** @deprecated use `longSignatures.getPublicKey` */\n  getPublicKey: (secretKey: PrivKey) => Uint8Array;\n  /** @deprecated use `shortSignatures.getPublicKey` */\n  getPublicKeyForShortSignatures: (secretKey: PrivKey) => Uint8Array;\n  /** @deprecated use `longSignatures.sign` */\n  sign: {\n    (message: Hex, secretKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array;\n    (\n      message: WeierstrassPoint<Fp2>,\n      secretKey: PrivKey,\n      htfOpts?: htfBasicOpts\n    ): WeierstrassPoint<Fp2>;\n  };\n  /** @deprecated use `shortSignatures.sign` */\n  signShortSignature: {\n    (message: Hex, secretKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array;\n    (\n      message: WeierstrassPoint<Fp>,\n      secretKey: PrivKey,\n      htfOpts?: htfBasicOpts\n    ): WeierstrassPoint<Fp>;\n  };\n  /** @deprecated use `longSignatures.verify` */\n  verify: (\n    signature: Hex | WeierstrassPoint<Fp2>,\n    message: Hex | WeierstrassPoint<Fp2>,\n    publicKey: Hex | WeierstrassPoint<Fp>,\n    htfOpts?: htfBasicOpts\n  ) => boolean;\n  /** @deprecated use `shortSignatures.verify` */\n  verifyShortSignature: (\n    signature: Hex | WeierstrassPoint<Fp>,\n    message: Hex | WeierstrassPoint<Fp>,\n    publicKey: Hex | WeierstrassPoint<Fp2>,\n    htfOpts?: htfBasicOpts\n  ) => boolean;\n  verifyBatch: (\n    signature: Hex | WeierstrassPoint<Fp2>,\n    messages: (Hex | WeierstrassPoint<Fp2>)[],\n    publicKeys: (Hex | WeierstrassPoint<Fp>)[],\n    htfOpts?: htfBasicOpts\n  ) => boolean;\n  /** @deprecated use `longSignatures.aggregatePublicKeys` */\n  aggregatePublicKeys: {\n    (publicKeys: Hex[]): Uint8Array;\n    (publicKeys: WeierstrassPoint<Fp>[]): WeierstrassPoint<Fp>;\n  };\n  /** @deprecated use `longSignatures.aggregateSignatures` */\n  aggregateSignatures: {\n    (signatures: Hex[]): Uint8Array;\n    (signatures: WeierstrassPoint<Fp2>[]): WeierstrassPoint<Fp2>;\n  };\n  /** @deprecated use `shortSignatures.aggregateSignatures` */\n  aggregateShortSignatures: {\n    (signatures: Hex[]): Uint8Array;\n    (signatures: WeierstrassPoint<Fp>[]): WeierstrassPoint<Fp>;\n  };\n  G1: CurvePointsRes<Fp> & H2CHasher<Fp>;\n  G2: CurvePointsRes<Fp2> & H2CHasher<Fp2>;\n  /** @deprecated use `longSignatures.Signature` */\n  Signature: SignatureCoder<Fp2>;\n  /** @deprecated use `shortSignatures.Signature` */\n  ShortSignature: ShortSignatureCoder<Fp>;\n  params: {\n    ateLoopSize: bigint;\n    r: bigint;\n    twistType: TwistType;\n    /** @deprecated */\n    G1b: bigint;\n    /** @deprecated */\n    G2b: Fp2;\n  };\n};\n\ntype BLSInput = Hex | Uint8Array;\nexport interface BLSSigs<P, S> {\n  getPublicKey(secretKey: PrivKey): WeierstrassPoint<P>;\n  sign(hashedMessage: WeierstrassPoint<S>, secretKey: PrivKey): WeierstrassPoint<S>;\n  verify(\n    signature: WeierstrassPoint<S> | BLSInput,\n    message: WeierstrassPoint<S>,\n    publicKey: WeierstrassPoint<P> | BLSInput\n  ): boolean;\n  verifyBatch: (\n    signature: WeierstrassPoint<S> | BLSInput,\n    messages: WeierstrassPoint<S>[],\n    publicKeys: (WeierstrassPoint<P> | BLSInput)[]\n  ) => boolean;\n  aggregatePublicKeys(publicKeys: (WeierstrassPoint<P> | BLSInput)[]): WeierstrassPoint<P>;\n  aggregateSignatures(signatures: (WeierstrassPoint<S> | BLSInput)[]): WeierstrassPoint<S>;\n  hash(message: Uint8Array, DST?: string | Uint8Array, hashOpts?: H2CHashOpts): WeierstrassPoint<S>;\n  Signature: SignatureCoder<S>;\n}\n\n// Not used with BLS12-381 (no sequential `11` in X). Useful for other curves.\nfunction NAfDecomposition(a: bigint) {\n  const res = [];\n  // a>1 because of marker bit\n  for (; a > _1n; a >>= _1n) {\n    if ((a & _1n) === _0n) res.unshift(0);\n    else if ((a & _3n) === _3n) {\n      res.unshift(-1);\n      a += _1n;\n    } else res.unshift(1);\n  }\n  return res;\n}\n\nfunction aNonEmpty(arr: any[]) {\n  if (!Array.isArray(arr) || arr.length === 0) throw new Error('expected non-empty array');\n}\n\n// This should be enough for bn254, no need to export full stuff?\nfunction createBlsPairing(\n  fields: BlsFields,\n  G1: WeierstrassPointCons<Fp>,\n  G2: WeierstrassPointCons<Fp2>,\n  params: BlsPairingParams\n): BlsPairing {\n  const { Fp2, Fp12 } = fields;\n  const { twistType, ateLoopSize, xNegative, postPrecompute } = params;\n  type G1 = typeof G1.BASE;\n  type G2 = typeof G2.BASE;\n  // Applies sparse multiplication as line function\n  let lineFunction: (c0: Fp2, c1: Fp2, c2: Fp2, f: Fp12, Px: Fp, Py: Fp) => Fp12;\n  if (twistType === 'multiplicative') {\n    lineFunction = (c0: Fp2, c1: Fp2, c2: Fp2, f: Fp12, Px: Fp, Py: Fp) =>\n      Fp12.mul014(f, c0, Fp2.mul(c1, Px), Fp2.mul(c2, Py));\n  } else if (twistType === 'divisive') {\n    // NOTE: it should be [c0, c1, c2], but we use different order here to reduce complexity of\n    // precompute calculations.\n    lineFunction = (c0: Fp2, c1: Fp2, c2: Fp2, f: Fp12, Px: Fp, Py: Fp) =>\n      Fp12.mul034(f, Fp2.mul(c2, Py), Fp2.mul(c1, Px), c0);\n  } else throw new Error('bls: unknown twist type');\n\n  const Fp2div2 = Fp2.div(Fp2.ONE, Fp2.mul(Fp2.ONE, _2n));\n  function pointDouble(ell: PrecomputeSingle, Rx: Fp2, Ry: Fp2, Rz: Fp2) {\n    const t0 = Fp2.sqr(Ry); // Ry²\n    const t1 = Fp2.sqr(Rz); // Rz²\n    const t2 = Fp2.mulByB(Fp2.mul(t1, _3n)); // 3 * T1 * B\n    const t3 = Fp2.mul(t2, _3n); // 3 * T2\n    const t4 = Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(Ry, Rz)), t1), t0); // (Ry + Rz)² - T1 - T0\n    const c0 = Fp2.sub(t2, t0); // T2 - T0 (i)\n    const c1 = Fp2.mul(Fp2.sqr(Rx), _3n); // 3 * Rx²\n    const c2 = Fp2.neg(t4); // -T4 (-h)\n\n    ell.push([c0, c1, c2]);\n\n    Rx = Fp2.mul(Fp2.mul(Fp2.mul(Fp2.sub(t0, t3), Rx), Ry), Fp2div2); // ((T0 - T3) * Rx * Ry) / 2\n    Ry = Fp2.sub(Fp2.sqr(Fp2.mul(Fp2.add(t0, t3), Fp2div2)), Fp2.mul(Fp2.sqr(t2), _3n)); // ((T0 + T3) / 2)² - 3 * T2²\n    Rz = Fp2.mul(t0, t4); // T0 * T4\n    return { Rx, Ry, Rz };\n  }\n  function pointAdd(ell: PrecomputeSingle, Rx: Fp2, Ry: Fp2, Rz: Fp2, Qx: Fp2, Qy: Fp2) {\n    // Addition\n    const t0 = Fp2.sub(Ry, Fp2.mul(Qy, Rz)); // Ry - Qy * Rz\n    const t1 = Fp2.sub(Rx, Fp2.mul(Qx, Rz)); // Rx - Qx * Rz\n    const c0 = Fp2.sub(Fp2.mul(t0, Qx), Fp2.mul(t1, Qy)); // T0 * Qx - T1 * Qy == Ry * Qx  - Rx * Qy\n    const c1 = Fp2.neg(t0); // -T0 == Qy * Rz - Ry\n    const c2 = t1; // == Rx - Qx * Rz\n\n    ell.push([c0, c1, c2]);\n\n    const t2 = Fp2.sqr(t1); // T1²\n    const t3 = Fp2.mul(t2, t1); // T2 * T1\n    const t4 = Fp2.mul(t2, Rx); // T2 * Rx\n    const t5 = Fp2.add(Fp2.sub(t3, Fp2.mul(t4, _2n)), Fp2.mul(Fp2.sqr(t0), Rz)); // T3 - 2 * T4 + T0² * Rz\n    Rx = Fp2.mul(t1, t5); // T1 * T5\n    Ry = Fp2.sub(Fp2.mul(Fp2.sub(t4, t5), t0), Fp2.mul(t3, Ry)); // (T4 - T5) * T0 - T3 * Ry\n    Rz = Fp2.mul(Rz, t3); // Rz * T3\n    return { Rx, Ry, Rz };\n  }\n\n  // Pre-compute coefficients for sparse multiplication\n  // Point addition and point double calculations is reused for coefficients\n  // pointAdd happens only if bit set, so wNAF is reasonable. Unfortunately we cannot combine\n  // add + double in windowed precomputes here, otherwise it would be single op (since X is static)\n  const ATE_NAF = NAfDecomposition(ateLoopSize);\n\n  const calcPairingPrecomputes = memoized((point: G2) => {\n    const p = point;\n    const { x, y } = p.toAffine();\n    // prettier-ignore\n    const Qx = x, Qy = y, negQy = Fp2.neg(y);\n    // prettier-ignore\n    let Rx = Qx, Ry = Qy, Rz = Fp2.ONE;\n    const ell: Precompute = [];\n    for (const bit of ATE_NAF) {\n      const cur: PrecomputeSingle = [];\n      ({ Rx, Ry, Rz } = pointDouble(cur, Rx, Ry, Rz));\n      if (bit) ({ Rx, Ry, Rz } = pointAdd(cur, Rx, Ry, Rz, Qx, bit === -1 ? negQy : Qy));\n      ell.push(cur);\n    }\n    if (postPrecompute) {\n      const last = ell[ell.length - 1];\n      postPrecompute(Rx, Ry, Rz, Qx, Qy, pointAdd.bind(null, last));\n    }\n    return ell;\n  });\n\n  // Main pairing logic is here. Computes product of miller loops + final exponentiate\n  // Applies calculated precomputes\n  type MillerInput = [Precompute, Fp, Fp][];\n  function millerLoopBatch(pairs: MillerInput, withFinalExponent: boolean = false) {\n    let f12 = Fp12.ONE;\n    if (pairs.length) {\n      const ellLen = pairs[0][0].length;\n      for (let i = 0; i < ellLen; i++) {\n        f12 = Fp12.sqr(f12); // This allows us to do sqr only one time for all pairings\n        // NOTE: we apply multiple pairings in parallel here\n        for (const [ell, Px, Py] of pairs) {\n          for (const [c0, c1, c2] of ell[i]) f12 = lineFunction(c0, c1, c2, f12, Px, Py);\n        }\n      }\n    }\n    if (xNegative) f12 = Fp12.conjugate(f12);\n    return withFinalExponent ? Fp12.finalExponentiate(f12) : f12;\n  }\n  type PairingInput = { g1: G1; g2: G2 };\n  // Calculates product of multiple pairings\n  // This up to x2 faster than just `map(({g1, g2})=>pairing({g1,g2}))`\n  function pairingBatch(pairs: PairingInput[], withFinalExponent: boolean = true) {\n    const res: MillerInput = [];\n    // Cache precomputed toAffine for all points\n    normalizeZ(\n      G1,\n      pairs.map(({ g1 }) => g1)\n    );\n    normalizeZ(\n      G2,\n      pairs.map(({ g2 }) => g2)\n    );\n    for (const { g1, g2 } of pairs) {\n      if (g1.is0() || g2.is0()) throw new Error('pairing is not available for ZERO point');\n      // This uses toAffine inside\n      g1.assertValidity();\n      g2.assertValidity();\n      const Qa = g1.toAffine();\n      res.push([calcPairingPrecomputes(g2), Qa.x, Qa.y]);\n    }\n    return millerLoopBatch(res, withFinalExponent);\n  }\n  // Calculates bilinear pairing\n  function pairing(Q: G1, P: G2, withFinalExponent: boolean = true): Fp12 {\n    return pairingBatch([{ g1: Q, g2: P }], withFinalExponent);\n  }\n  return {\n    Fp12, // NOTE: we re-export Fp12 here because pairing results are Fp12!\n    millerLoopBatch,\n    pairing,\n    pairingBatch,\n    calcPairingPrecomputes,\n  };\n}\n\nfunction createBlsSig<P, S>(\n  blsPairing: BlsPairing,\n  PubCurve: CurvePointsRes<P> & H2CHasher<P>,\n  SigCurve: CurvePointsRes<S> & H2CHasher<S>,\n  SignatureCoder: SignatureCoder<S>,\n  isSigG1: boolean\n): BLSSigs<P, S> {\n  const { Fp12, pairingBatch } = blsPairing;\n  type PubPoint = WeierstrassPoint<P>;\n  type SigPoint = WeierstrassPoint<S>;\n  function normPub(point: PubPoint | BLSInput): PubPoint {\n    return point instanceof PubCurve.Point ? (point as PubPoint) : PubCurve.Point.fromHex(point);\n  }\n  function normSig(point: SigPoint | BLSInput): SigPoint {\n    return point instanceof SigCurve.Point ? (point as SigPoint) : SigCurve.Point.fromHex(point);\n  }\n  function amsg(m: unknown): SigPoint {\n    if (!(m instanceof SigCurve.Point))\n      throw new Error(`expected valid message hashed to ${!isSigG1 ? 'G2' : 'G1'} curve`);\n    return m as SigPoint;\n  }\n\n  type G1 = CurvePointsRes<Fp>['Point']['BASE'];\n  type G2 = CurvePointsRes<Fp2>['Point']['BASE'];\n  type PairingInput = { g1: G1; g2: G2 };\n  // What matters here is what point pairing API accepts as G1 or G2, not actual size or names\n  const pair: (a: PubPoint, b: SigPoint) => PairingInput = !isSigG1\n    ? (a: PubPoint, b: SigPoint) => ({ g1: a, g2: b }) as PairingInput\n    : (a: PubPoint, b: SigPoint) => ({ g1: b, g2: a }) as PairingInput;\n  return {\n    // P = pk x G\n    getPublicKey(secretKey: PrivKey): PubPoint {\n      // TODO: replace with\n      // const sec = PubCurve.Point.Fn.fromBytes(secretKey);\n      const sec = _normFnElement(PubCurve.Point.Fn, secretKey);\n      return PubCurve.Point.BASE.multiply(sec);\n    },\n    // S = pk x H(m)\n    sign(message: SigPoint, secretKey: PrivKey, unusedArg?: any): SigPoint {\n      if (unusedArg != null) throw new Error('sign() expects 2 arguments');\n      // TODO: replace with\n      // PubCurve.Point.Fn.fromBytes(secretKey)\n      const sec = _normFnElement(PubCurve.Point.Fn, secretKey);\n      amsg(message).assertValidity();\n      return message.multiply(sec);\n    },\n    // Checks if pairing of public key & hash is equal to pairing of generator & signature.\n    // e(P, H(m)) == e(G, S)\n    // e(S, G) == e(H(m), P)\n    verify(\n      signature: SigPoint | BLSInput,\n      message: SigPoint,\n      publicKey: PubPoint | BLSInput,\n      unusedArg?: any\n    ): boolean {\n      if (unusedArg != null) throw new Error('verify() expects 3 arguments');\n      signature = normSig(signature);\n      publicKey = normPub(publicKey);\n      const P = publicKey.negate();\n      const G = PubCurve.Point.BASE;\n      const Hm = amsg(message);\n      const S = signature;\n      // This code was changed in 1.9.x:\n      // Before it was G.negate() in G2, now it's always pubKey.negate\n      // e(P, -Q)===e(-P, Q)==e(P, Q)^-1. Negate can be done anywhere (as long it is done once per pair).\n      // We just moving sign, but since pairing is multiplicative, we doing X * X^-1 = 1\n      const exp = pairingBatch([pair(P, Hm), pair(G, S)]);\n      return Fp12.eql(exp, Fp12.ONE);\n    },\n    // https://ethresear.ch/t/fast-verification-of-multiple-bls-signatures/5407\n    // e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))\n    // TODO: maybe `{message: G2Hex, publicKey: G1Hex}[]` instead?\n    verifyBatch(\n      signature: SigPoint | BLSInput,\n      messages: SigPoint[],\n      publicKeys: (PubPoint | BLSInput)[]\n    ): boolean {\n      aNonEmpty(messages);\n      if (publicKeys.length !== messages.length)\n        throw new Error('amount of public keys and messages should be equal');\n      const sig = normSig(signature);\n      const nMessages = messages;\n      const nPublicKeys = publicKeys.map(normPub);\n      // NOTE: this works only for exact same object\n      const messagePubKeyMap = new Map<SigPoint, PubPoint[]>();\n      for (let i = 0; i < nPublicKeys.length; i++) {\n        const pub = nPublicKeys[i];\n        const msg = nMessages[i];\n        let keys = messagePubKeyMap.get(msg);\n        if (keys === undefined) {\n          keys = [];\n          messagePubKeyMap.set(msg, keys);\n        }\n        keys.push(pub);\n      }\n      const paired = [];\n      const G = PubCurve.Point.BASE;\n      try {\n        for (const [msg, keys] of messagePubKeyMap) {\n          const groupPublicKey = keys.reduce((acc, msg) => acc.add(msg));\n          paired.push(pair(groupPublicKey, msg));\n        }\n        paired.push(pair(G.negate(), sig));\n        return Fp12.eql(pairingBatch(paired), Fp12.ONE);\n      } catch {\n        return false;\n      }\n    },\n    // Adds a bunch of public key points together.\n    // pk1 + pk2 + pk3 = pkA\n    aggregatePublicKeys(publicKeys: (PubPoint | BLSInput)[]): PubPoint {\n      aNonEmpty(publicKeys);\n      publicKeys = publicKeys.map((pub) => normPub(pub));\n      const agg = (publicKeys as PubPoint[]).reduce((sum, p) => sum.add(p), PubCurve.Point.ZERO);\n      agg.assertValidity();\n      return agg;\n    },\n\n    // Adds a bunch of signature points together.\n    // pk1 + pk2 + pk3 = pkA\n    aggregateSignatures(signatures: (SigPoint | BLSInput)[]): SigPoint {\n      aNonEmpty(signatures);\n      signatures = signatures.map((sig) => normSig(sig));\n      const agg = (signatures as SigPoint[]).reduce((sum, s) => sum.add(s), SigCurve.Point.ZERO);\n      agg.assertValidity();\n      return agg;\n    },\n\n    hash(messageBytes: Uint8Array, DST?: string | Uint8Array): SigPoint {\n      abytes(messageBytes);\n      const opts = DST ? { DST } : undefined;\n      return SigCurve.hashToCurve(messageBytes, opts) as SigPoint;\n    },\n    Signature: SignatureCoder,\n  };\n}\n\n// G1_Point: ProjConstructor<bigint>, G2_Point: ProjConstructor<Fp2>,\nexport function bls(CURVE: CurveType): CurveFn {\n  // Fields are specific for curve, so for now we'll need to pass them with opts\n  const { Fp, Fr, Fp2, Fp6, Fp12 } = CURVE.fields;\n  // Point on G1 curve: (x, y)\n  const G1_ = weierstrassPoints(CURVE.G1);\n  const G1 = Object.assign(\n    G1_,\n    createHasher(G1_.Point, CURVE.G1.mapToCurve, {\n      ...CURVE.htfDefaults,\n      ...CURVE.G1.htfDefaults,\n    })\n  );\n  // Point on G2 curve (complex numbers): (x₁, x₂+i), (y₁, y₂+i)\n  const G2_ = weierstrassPoints(CURVE.G2);\n  const G2 = Object.assign(\n    G2_,\n    createHasher(G2_.Point as H2CPointConstructor<Fp2>, CURVE.G2.mapToCurve, {\n      ...CURVE.htfDefaults,\n      ...CURVE.G2.htfDefaults,\n    })\n  );\n  type G1 = typeof G1.Point.BASE;\n  type G2 = typeof G2.Point.BASE;\n\n  const pairingRes = createBlsPairing(CURVE.fields, G1.Point, G2.Point, {\n    ...CURVE.params,\n    postPrecompute: CURVE.postPrecompute,\n  });\n\n  const { millerLoopBatch, pairing, pairingBatch, calcPairingPrecomputes } = pairingRes;\n  const longSignatures = createBlsSig(pairingRes, G1, G2, CURVE.G2.Signature, false);\n  const shortSignatures = createBlsSig(pairingRes, G2, G1, CURVE.G1.ShortSignature, true);\n\n  const rand = CURVE.randomBytes || randomBytes;\n  const randomSecretKey = (): Uint8Array => {\n    const length = getMinHashLength(Fr.ORDER);\n    return mapHashToField(rand(length), Fr.ORDER);\n  };\n  const utils = {\n    randomSecretKey,\n    randomPrivateKey: randomSecretKey,\n    calcPairingPrecomputes,\n  };\n\n  // LEGACY code\n  type G1Hex = Hex | G1;\n  type G2Hex = Hex | G2;\n\n  const { ShortSignature } = CURVE.G1;\n  const { Signature } = CURVE.G2;\n\n  function normP1Hash(point: G1Hex, htfOpts?: htfBasicOpts): G1 {\n    return point instanceof G1.Point\n      ? point\n      : shortSignatures.hash(ensureBytes('point', point), htfOpts?.DST);\n  }\n  function normP2Hash(point: G2Hex, htfOpts?: htfBasicOpts): G2 {\n    return point instanceof G2.Point\n      ? point\n      : longSignatures.hash(ensureBytes('point', point), htfOpts?.DST);\n  }\n\n  function getPublicKey(privateKey: PrivKey): Uint8Array {\n    return longSignatures.getPublicKey(privateKey).toBytes(true);\n  }\n  function getPublicKeyForShortSignatures(privateKey: PrivKey): Uint8Array {\n    return shortSignatures.getPublicKey(privateKey).toBytes(true);\n  }\n  function sign(message: Hex, privateKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array;\n  function sign(message: G2, privateKey: PrivKey, htfOpts?: htfBasicOpts): G2;\n  function sign(message: G2Hex, privateKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array | G2 {\n    const Hm = normP2Hash(message, htfOpts);\n    const S = longSignatures.sign(Hm, privateKey);\n    return message instanceof G2.Point ? S : Signature.toBytes(S);\n  }\n  function signShortSignature(\n    message: Hex,\n    privateKey: PrivKey,\n    htfOpts?: htfBasicOpts\n  ): Uint8Array;\n  function signShortSignature(message: G1, privateKey: PrivKey, htfOpts?: htfBasicOpts): G1;\n  function signShortSignature(\n    message: G1Hex,\n    privateKey: PrivKey,\n    htfOpts?: htfBasicOpts\n  ): Uint8Array | G1 {\n    const Hm = normP1Hash(message, htfOpts);\n    const S = shortSignatures.sign(Hm, privateKey);\n    return message instanceof G1.Point ? S : ShortSignature.toBytes(S);\n  }\n  function verify(\n    signature: G2Hex,\n    message: G2Hex,\n    publicKey: G1Hex,\n    htfOpts?: htfBasicOpts\n  ): boolean {\n    const Hm = normP2Hash(message, htfOpts);\n    return longSignatures.verify(signature, Hm, publicKey);\n  }\n  function verifyShortSignature(\n    signature: G1Hex,\n    message: G1Hex,\n    publicKey: G2Hex,\n    htfOpts?: htfBasicOpts\n  ): boolean {\n    const Hm = normP1Hash(message, htfOpts);\n    return shortSignatures.verify(signature, Hm, publicKey);\n  }\n  function aggregatePublicKeys(publicKeys: Hex[]): Uint8Array;\n  function aggregatePublicKeys(publicKeys: G1[]): G1;\n  function aggregatePublicKeys(publicKeys: G1Hex[]): Uint8Array | G1 {\n    const agg = longSignatures.aggregatePublicKeys(publicKeys);\n    return publicKeys[0] instanceof G1.Point ? agg : agg.toBytes(true);\n  }\n  function aggregateSignatures(signatures: Hex[]): Uint8Array;\n  function aggregateSignatures(signatures: G2[]): G2;\n  function aggregateSignatures(signatures: G2Hex[]): Uint8Array | G2 {\n    const agg = longSignatures.aggregateSignatures(signatures);\n    return signatures[0] instanceof G2.Point ? agg : Signature.toBytes(agg);\n  }\n  function aggregateShortSignatures(signatures: Hex[]): Uint8Array;\n  function aggregateShortSignatures(signatures: G1[]): G1;\n  function aggregateShortSignatures(signatures: G1Hex[]): Uint8Array | G1 {\n    const agg = shortSignatures.aggregateSignatures(signatures);\n    return signatures[0] instanceof G1.Point ? agg : ShortSignature.toBytes(agg);\n  }\n  function verifyBatch(\n    signature: G2Hex,\n    messages: G2Hex[],\n    publicKeys: G1Hex[],\n    htfOpts?: htfBasicOpts\n  ): boolean {\n    const Hm = messages.map((m) => normP2Hash(m, htfOpts));\n    return longSignatures.verifyBatch(signature, Hm, publicKeys);\n  }\n\n  G1.Point.BASE.precompute(4);\n\n  return {\n    longSignatures,\n    shortSignatures,\n    millerLoopBatch,\n    pairing,\n    pairingBatch,\n    verifyBatch,\n    fields: {\n      Fr,\n      Fp,\n      Fp2,\n      Fp6,\n      Fp12,\n    },\n    params: {\n      ateLoopSize: CURVE.params.ateLoopSize,\n      twistType: CURVE.params.twistType,\n      // deprecated\n      r: CURVE.params.r,\n      G1b: CURVE.G1.b,\n      G2b: CURVE.G2.b,\n    },\n    utils,\n\n    // deprecated\n    getPublicKey,\n    getPublicKeyForShortSignatures,\n    sign,\n    signShortSignature,\n    verify,\n    verifyShortSignature,\n    aggregatePublicKeys,\n    aggregateSignatures,\n    aggregateShortSignatures,\n    G1,\n    G2,\n    Signature,\n    ShortSignature,\n  };\n}\n", "/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  abytes as abytes_,\n  bytesToHex as bytesToHex_,\n  concatBytes as concatBytes_,\n  hexToBytes as hexToBytes_,\n  isBytes as isBytes_,\n} from '@noble/hashes/utils.js';\nexport {\n  abytes,\n  anumber,\n  bytesToHex,\n  bytesToUtf8,\n  concatBytes,\n  hexToBytes,\n  isBytes,\n  randomBytes,\n  utf8ToBytes,\n} from '@noble/hashes/utils.js';\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function abool(title: string, value: boolean): void {\n  if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\n}\n\n// tmp name until v2\nexport function _abool2(value: boolean, title: string = ''): boolean {\n  if (typeof value !== 'boolean') {\n    const prefix = title && `\"${title}\"`;\n    throw new Error(prefix + 'expected boolean, got type=' + typeof value);\n  }\n  return value;\n}\n\n// tmp name until v2\n/** Asserts something is Uint8Array. */\nexport function _abytes2(value: Uint8Array, length?: number, title: string = ''): Uint8Array {\n  const bytes = isBytes_(value);\n  const len = value?.length;\n  const needsLen = length !== undefined;\n  if (!bytes || (needsLen && len !== length)) {\n    const prefix = title && `\"${title}\" `;\n    const ofLen = needsLen ? ` of length ${length}` : '';\n    const got = bytes ? `length=${len}` : `type=${typeof value}`;\n    throw new Error(prefix + 'expected Uint8Array' + ofLen + ', got ' + got);\n  }\n  return value;\n}\n\n// Used in weierstrass, der\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? '0' + hex : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex_(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes_(bytes);\n  return hexToNumber(bytesToHex_(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes_(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes_(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'secret key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes_(hex);\n    } catch (e) {\n      throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n    }\n  } else if (isBytes_(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(title + ' must be hex string or Uint8Array');\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n/**\n * Copies Uint8Array. We can't use u8a.slice(), because u8a can be Buffer,\n * and Buffer#slice creates mutable copy. Never use Buffers!\n */\nexport function copyBytes(bytes: Uint8Array): Uint8Array {\n  return Uint8Array.from(bytes);\n}\n\n/**\n * Decodes 7-bit ASCII string to Uint8Array, throws on non-ascii symbols\n * Should be safe to use for things expected to be ASCII.\n * Returns exact same result as utf8ToBytes for ASCII or throws.\n */\nexport function asciiToBytes(ascii: string): Uint8Array {\n  return Uint8Array.from(ascii, (c, i) => {\n    const charCode = c.charCodeAt(0);\n    if (c.length !== 1 || charCode > 127) {\n      throw new Error(\n        `string contains non-ASCII character \"${ascii[i]}\" with code ${charCode} at position ${i}`\n      );\n    }\n    return charCode;\n  });\n}\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\n// export const utf8ToBytes: typeof utf8ToBytes_ = utf8ToBytes_;\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\n// export const bytesToUtf8: typeof bytesToUtf8_ = bytesToUtf8_;\n\n// Is positive bigint\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\n\nexport function inRange(n: bigint, min: bigint, max: bigint): boolean {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint): void {\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n  // consider P=256n, min=0n, max=P\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\n  if (!inRange(n, min, max))\n    throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */\nexport function bitLen(n: bigint): number {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number): bigint {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean): bigint {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number): bigint => (_1n << BigInt(n)) - _1n;\n\n// DRBG\n\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  const u8n = (len: number) => new Uint8Array(len); // creates Uint8Array\n  const u8of = (byte: number) => Uint8Array.of(byte); // another shortcut\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n(0)) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes_(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any): boolean => typeof val === 'bigint',\n  function: (val: any): boolean => typeof val === 'function',\n  boolean: (val: any): boolean => typeof val === 'boolean',\n  string: (val: any): boolean => typeof val === 'string',\n  stringOrUint8Array: (val: any): boolean => typeof val === 'string' || isBytes_(val),\n  isSafeInteger: (val: any): boolean => Number.isSafeInteger(val),\n  array: (val: any): boolean => Array.isArray(val),\n  field: (val: any, object: any): any => (object as any).Fp.isValid(val),\n  hash: (val: any): boolean => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n): T {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function') throw new Error('invalid validator function');\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        'param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n\nexport function isHash(val: CHash): boolean {\n  return typeof val === 'function' && Number.isSafeInteger(val.outputLen);\n}\nexport function _validateObject(\n  object: Record<string, any>,\n  fields: Record<string, string>,\n  optFields: Record<string, string> = {}\n): void {\n  if (!object || typeof object !== 'object') throw new Error('expected valid options object');\n  type Item = keyof typeof object;\n  function checkField(fieldName: Item, expectedType: string, isOpt: boolean) {\n    const val = object[fieldName];\n    if (isOpt && val === undefined) return;\n    const current = typeof val;\n    if (current !== expectedType || val === null)\n      throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\n  }\n  Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\n  Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\n}\n\n/**\n * throws not implemented error\n */\nexport const notImplemented = (): never => {\n  throw new Error('not implemented');\n};\n\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized<T extends object, R, O extends any[]>(\n  fn: (arg: T, ...args: O) => R\n): (arg: T, ...args: O) => R {\n  const map = new WeakMap<T, R>();\n  return (arg: T, ...args: O): R => {\n    const val = map.get(arg);\n    if (val !== undefined) return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}\n", "/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitLen, bitMask, validateObject } from '../utils.ts';\nimport { Field, FpInvertBatch, nLength, validateField, type IField } from './modular.ts';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { Z?: never };\n\n// This was initialy do this way to re-use montgomery ladder in field (add->mul,double->sqr), but\n// that didn't happen and there is probably not much reason to have separate Group like this?\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n  toAffine?(invertedZ?: any): AffinePoint<any>;\n}\n\n// We can't \"abstract out\" coordinates (X, Y, Z; and T in Edwards): argument names of constructor\n// are not accessible. See Typescript gh-56093, gh-41594.\n//\n// We have to use recursive types, so it will return actual point, not constained `CurvePoint`.\n// If, at any point, P is `any`, it will erase all types and replace it\n// with `any`, because of recursion, `any implements CurvePoint`,\n// but we lose all constrains on methods.\n\n/** Base interface for all elliptic curve Points. */\nexport interface CurvePoint<F, P extends CurvePoint<F, P>> extends Group<P> {\n  /** Affine x coordinate. Different from projective / extended X coordinate. */\n  x: F;\n  /** Affine y coordinate. Different from projective / extended Y coordinate. */\n  y: F;\n  Z?: F;\n  double(): P;\n  negate(): P;\n  add(other: P): P;\n  subtract(other: P): P;\n  equals(other: P): boolean;\n  multiply(scalar: bigint): P;\n  assertValidity(): void;\n  clearCofactor(): P;\n  is0(): boolean;\n  isTorsionFree(): boolean;\n  isSmallOrder(): boolean;\n  multiplyUnsafe(scalar: bigint): P;\n  /**\n   * Massively speeds up `p.multiply(n)` by using precompute tables (caching). See {@link wNAF}.\n   * @param isLazy calculate cache now. Default (true) ensures it's deferred to first `multiply()`\n   */\n  precompute(windowSize?: number, isLazy?: boolean): P;\n  /** Converts point to 2D xy affine coordinates */\n  toAffine(invertedZ?: F): AffinePoint<F>;\n  toBytes(): Uint8Array;\n  toHex(): string;\n}\n\n/** Base interface for all elliptic curve Point constructors. */\nexport interface CurvePointCons<P extends CurvePoint<any, P>> {\n  [Symbol.hasInstance]: (item: unknown) => boolean;\n  BASE: P;\n  ZERO: P;\n  /** Field for basic curve math */\n  Fp: IField<P_F<P>>;\n  /** Scalar field, for scalars in multiply and others */\n  Fn: IField<bigint>;\n  /** Creates point from x, y. Does NOT validate if the point is valid. Use `.assertValidity()`. */\n  fromAffine(p: AffinePoint<P_F<P>>): P;\n  fromBytes(bytes: Uint8Array): P;\n  fromHex(hex: Uint8Array | string): P;\n}\n\n// Type inference helpers: PC - PointConstructor, P - Point, Fp - Field element\n// Short names, because we use them a lot in result types:\n// * we can't do 'P = GetCurvePoint<PC>': this is default value and doesn't constrain anything\n// * we can't do 'type X = GetCurvePoint<PC>': it won't be accesible for arguments/return types\n// * `CurvePointCons<P extends CurvePoint<any, P>>` constraints from interface definition\n//   won't propagate, if `PC extends CurvePointCons<any>`: the P would be 'any', which is incorrect\n// * PC could be super specific with super specific P, which implements CurvePoint<any, P>.\n//   this means we need to do stuff like\n//   `function test<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(`\n//   if we want type safety around P, otherwise PC_P<PC> will be any\n\n/** Returns Fp type from Point (P_F<P> == P.F) */\nexport type P_F<P extends CurvePoint<any, P>> = P extends CurvePoint<infer F, P> ? F : never;\n/** Returns Fp type from PointCons (PC_F<PC> == PC.P.F) */\nexport type PC_F<PC extends CurvePointCons<CurvePoint<any, any>>> = PC['Fp']['ZERO'];\n/** Returns Point type from PointCons (PC_P<PC> == PC.P) */\nexport type PC_P<PC extends CurvePointCons<CurvePoint<any, any>>> = PC['ZERO'];\n\n// Ugly hack to get proper type inference, because in typescript fails to infer resursively.\n// The hack allows to do up to 10 chained operations without applying type erasure.\n//\n// Types which won't work:\n// * `CurvePointCons<CurvePoint<any, any>>`, will return `any` after 1 operation\n// * `CurvePointCons<any>: WeierstrassPointCons<bigint> extends CurvePointCons<any> = false`\n// * `P extends CurvePoint, PC extends CurvePointCons<P>`\n//     * It can't infer P from PC alone\n//     * Too many relations between F, P & PC\n//     * It will infer P/F if `arg: CurvePointCons<F, P>`, but will fail if PC is generic\n//     * It will work correctly if there is an additional argument of type P\n//     * But generally, we don't want to parametrize `CurvePointCons` over `F`: it will complicate\n//       types, making them un-inferable\n// prettier-ignore\nexport type PC_ANY = CurvePointCons<\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any, any>\n  >>>>>>>>>\n>;\n\nexport interface CurveLengths {\n  secretKey?: number;\n  publicKey?: number;\n  publicKeyUncompressed?: number;\n  publicKeyHasPrefix?: boolean;\n  signature?: number;\n  seed?: number;\n}\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\n/** @deprecated */\nexport type ExtendedGroupConstructor<T> = GroupConstructor<T> & {\n  Fp: IField<any>;\n  Fn: IField<bigint>;\n  fromAffine(ap: AffinePoint<any>): T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\nexport function negateCt<T extends { negate: () => T }>(condition: boolean, item: T): T {\n  const neg = item.negate();\n  return condition ? neg : item;\n}\n\n/**\n * Takes a bunch of Projective Points but executes only one\n * inversion on all of them. Inversion is very slow operation,\n * so this improves performance massively.\n * Optimization: converts a list of projective points to a list of identical points with Z=1.\n */\nexport function normalizeZ<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(\n  c: PC,\n  points: P[]\n): P[] {\n  const invertedZs = FpInvertBatch(\n    c.Fp,\n    points.map((p) => p.Z!)\n  );\n  return points.map((p, i) => c.fromAffine(p.toAffine(invertedZs[i])));\n}\n\nfunction validateW(W: number, bits: number) {\n  if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n    throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\n\n/** Internal wNAF opts for specific W and scalarBits */\nexport type WOpts = {\n  windows: number;\n  windowSize: number;\n  mask: bigint;\n  maxNumber: number;\n  shiftBy: bigint;\n};\n\nfunction calcWOpts(W: number, scalarBits: number): WOpts {\n  validateW(W, scalarBits);\n  const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n  const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n  const maxNumber = 2 ** W; // W=8 256\n  const mask = bitMask(W); // W=8 255 == mask 0b11111111\n  const shiftBy = BigInt(W); // W=8 8\n  return { windows, windowSize, mask, maxNumber, shiftBy };\n}\n\nfunction calcOffsets(n: bigint, window: number, wOpts: WOpts) {\n  const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n  let wbits = Number(n & mask); // extract W bits.\n  let nextN = n >> shiftBy; // shift number by W bits.\n\n  // What actually happens here:\n  // const highestBit = Number(mask ^ (mask >> 1n));\n  // let wbits2 = wbits - 1; // skip zero\n  // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n\n  // split if bits > max: +224 => 256-32\n  if (wbits > windowSize) {\n    // we skip zero, which means instead of `>= size-1`, we do `> size`\n    wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n    nextN += _1n; // +256 (carry)\n  }\n  const offsetStart = window * windowSize;\n  const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n  const isZero = wbits === 0; // is current window slice a 0?\n  const isNeg = wbits < 0; // is current window slice negative?\n  const isNegF = window % 2 !== 0; // fake random statement for noise\n  const offsetF = offsetStart; // fake offset for noise\n  return { nextN, offset, isZero, isNeg, isNegF, offsetF };\n}\n\nfunction validateMSMPoints(points: any[], c: any) {\n  if (!Array.isArray(points)) throw new Error('array expected');\n  points.forEach((p, i) => {\n    if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\n  });\n}\nfunction validateMSMScalars(scalars: any[], field: any) {\n  if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\n  });\n}\n\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap<any, any[]>();\nconst pointWindowSizes = new WeakMap<any, number>();\n\nfunction getW(P: any): number {\n  // To disable precomputes:\n  // return 1;\n  return pointWindowSizes.get(P) || 1;\n}\n\nfunction assert0(n: bigint): void {\n  if (n !== _0n) throw new Error('invalid wNAF');\n}\n\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Table generation takes **30MB of ram and 10ms on high-end CPU**,\n * but may take much longer on slow devices. Actual generation will happen on\n * first call of `multiply()`. By default, `BASE` point is precomputed.\n *\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport class wNAF<PC extends PC_ANY> {\n  private readonly BASE: PC_P<PC>;\n  private readonly ZERO: PC_P<PC>;\n  private readonly Fn: PC['Fn'];\n  readonly bits: number;\n\n  // Parametrized with a given Point class (not individual point)\n  constructor(Point: PC, bits: number) {\n    this.BASE = Point.BASE;\n    this.ZERO = Point.ZERO;\n    this.Fn = Point.Fn;\n    this.bits = bits;\n  }\n\n  // non-const time multiplication ladder\n  _unsafeLadder(elm: PC_P<PC>, n: bigint, p: PC_P<PC> = this.ZERO): PC_P<PC> {\n    let d: PC_P<PC> = elm;\n    while (n > _0n) {\n      if (n & _1n) p = p.add(d);\n      d = d.double();\n      n >>= _1n;\n    }\n    return p;\n  }\n\n  /**\n   * Creates a wNAF precomputation window. Used for caching.\n   * Default window size is set by `utils.precompute()` and is equal to 8.\n   * Number of precomputed points depends on the curve size:\n   * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n   * - 𝑊 is the window size\n   * - 𝑛 is the bitlength of the curve order.\n   * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n   * @param point Point instance\n   * @param W window size\n   * @returns precomputed point tables flattened to a single array\n   */\n  private precomputeWindow(point: PC_P<PC>, W: number): PC_P<PC>[] {\n    const { windows, windowSize } = calcWOpts(W, this.bits);\n    const points: PC_P<PC>[] = [];\n    let p: PC_P<PC> = point;\n    let base = p;\n    for (let window = 0; window < windows; window++) {\n      base = p;\n      points.push(base);\n      // i=1, bc we skip 0\n      for (let i = 1; i < windowSize; i++) {\n        base = base.add(p);\n        points.push(base);\n      }\n      p = base.double();\n    }\n    return points;\n  }\n\n  /**\n   * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n   * More compact implementation:\n   * https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n   * @returns real and fake (for const-time) points\n   */\n  private wNAF(W: number, precomputes: PC_P<PC>[], n: bigint): { p: PC_P<PC>; f: PC_P<PC> } {\n    // Scalar should be smaller than field order\n    if (!this.Fn.isValid(n)) throw new Error('invalid scalar');\n    // Accumulators\n    let p = this.ZERO;\n    let f = this.BASE;\n    // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n    // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n    // there is negate now: it is possible that negated element from low value\n    // would be the same as high element, which will create carry into next window.\n    // It's not obvious how this can fail, but still worth investigating later.\n    const wo = calcWOpts(W, this.bits);\n    for (let window = 0; window < wo.windows; window++) {\n      // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n      const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\n      n = nextN;\n      if (isZero) {\n        // bits are 0: add garbage to fake point\n        // Important part for const-time getPublicKey: add random \"noise\" point to f.\n        f = f.add(negateCt(isNegF, precomputes[offsetF]));\n      } else {\n        // bits are 1: add to result point\n        p = p.add(negateCt(isNeg, precomputes[offset]));\n      }\n    }\n    assert0(n);\n    // Return both real and fake points: JIT won't eliminate f.\n    // At this point there is a way to F be infinity-point even if p is not,\n    // which makes it less const-time: around 1 bigint multiply.\n    return { p, f };\n  }\n\n  /**\n   * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n   * @param acc accumulator point to add result of multiplication\n   * @returns point\n   */\n  private wNAFUnsafe(\n    W: number,\n    precomputes: PC_P<PC>[],\n    n: bigint,\n    acc: PC_P<PC> = this.ZERO\n  ): PC_P<PC> {\n    const wo = calcWOpts(W, this.bits);\n    for (let window = 0; window < wo.windows; window++) {\n      if (n === _0n) break; // Early-exit, skip 0 value\n      const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\n      n = nextN;\n      if (isZero) {\n        // Window bits are 0: skip processing.\n        // Move to next window.\n        continue;\n      } else {\n        const item = precomputes[offset];\n        acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n      }\n    }\n    assert0(n);\n    return acc;\n  }\n\n  private getPrecomputes(W: number, point: PC_P<PC>, transform?: Mapper<PC_P<PC>>): PC_P<PC>[] {\n    // Calculate precomputes on a first run, reuse them after\n    let comp = pointPrecomputes.get(point);\n    if (!comp) {\n      comp = this.precomputeWindow(point, W) as PC_P<PC>[];\n      if (W !== 1) {\n        // Doing transform outside of if brings 15% perf hit\n        if (typeof transform === 'function') comp = transform(comp);\n        pointPrecomputes.set(point, comp);\n      }\n    }\n    return comp;\n  }\n\n  cached(\n    point: PC_P<PC>,\n    scalar: bigint,\n    transform?: Mapper<PC_P<PC>>\n  ): { p: PC_P<PC>; f: PC_P<PC> } {\n    const W = getW(point);\n    return this.wNAF(W, this.getPrecomputes(W, point, transform), scalar);\n  }\n\n  unsafe(point: PC_P<PC>, scalar: bigint, transform?: Mapper<PC_P<PC>>, prev?: PC_P<PC>): PC_P<PC> {\n    const W = getW(point);\n    if (W === 1) return this._unsafeLadder(point, scalar, prev); // For W=1 ladder is ~x2 faster\n    return this.wNAFUnsafe(W, this.getPrecomputes(W, point, transform), scalar, prev);\n  }\n\n  // We calculate precomputes for elliptic curve point multiplication\n  // using windowed method. This specifies window size and\n  // stores precomputed values. Usually only base point would be precomputed.\n  createCache(P: PC_P<PC>, W: number): void {\n    validateW(W, this.bits);\n    pointWindowSizes.set(P, W);\n    pointPrecomputes.delete(P);\n  }\n\n  hasCache(elm: PC_P<PC>): boolean {\n    return getW(elm) !== 1;\n  }\n}\n\n/**\n * Endomorphism-specific multiplication for Koblitz curves.\n * Cost: 128 dbl, 0-256 adds.\n */\nexport function mulEndoUnsafe<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(\n  Point: PC,\n  point: P,\n  k1: bigint,\n  k2: bigint\n): { p1: P; p2: P } {\n  let acc = point;\n  let p1 = Point.ZERO;\n  let p2 = Point.ZERO;\n  while (k1 > _0n || k2 > _0n) {\n    if (k1 & _1n) p1 = p1.add(acc);\n    if (k2 & _1n) p2 = p2.add(acc);\n    acc = acc.double();\n    k1 >>= _1n;\n    k2 >>= _1n;\n  }\n  return { p1, p2 };\n}\n\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka secret keys / bigints)\n */\nexport function pippenger<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(\n  c: PC,\n  fieldN: IField<bigint>,\n  points: P[],\n  scalars: bigint[]\n): P {\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\n  // TODO:\n  // - https://eprint.iacr.org/2024/750.pdf\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n  // 0 is accepted in scalars\n  validateMSMPoints(points, c);\n  validateMSMScalars(scalars, fieldN);\n  const plength = points.length;\n  const slength = scalars.length;\n  if (plength !== slength) throw new Error('arrays of points and scalars must have equal length');\n  // if (plength === 0) throw new Error('array must be of length >= 2');\n  const zero = c.ZERO;\n  const wbits = bitLen(BigInt(plength));\n  let windowSize = 1; // bits\n  if (wbits > 12) windowSize = wbits - 3;\n  else if (wbits > 4) windowSize = wbits - 2;\n  else if (wbits > 0) windowSize = 2;\n  const MASK = bitMask(windowSize);\n  const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n  let sum = zero;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(zero);\n    for (let j = 0; j < slength; j++) {\n      const scalar = scalars[j];\n      const wbits = Number((scalar >> BigInt(i)) & MASK);\n      buckets[wbits] = buckets[wbits].add(points[j]);\n    }\n    let resI = zero; // not using this will do small speed-up, but will lose ct\n    // Skip first bucket, because it is zero\n    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n  }\n  return sum as P;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(\n  c: PC,\n  fieldN: IField<bigint>,\n  points: P[],\n  windowSize: number\n): (scalars: bigint[]) => P {\n  /**\n   * Performance Analysis of Window-based Precomputation\n   *\n   * Base Case (256-bit scalar, 8-bit window):\n   * - Standard precomputation requires:\n   *   - 31 additions per scalar × 256 scalars = 7,936 ops\n   *   - Plus 255 summary additions = 8,191 total ops\n   *   Note: Summary additions can be optimized via accumulator\n   *\n   * Chunked Precomputation Analysis:\n   * - Using 32 chunks requires:\n   *   - 255 additions per chunk\n   *   - 256 doublings\n   *   - Total: (255 × 32) + 256 = 8,416 ops\n   *\n   * Memory Usage Comparison:\n   * Window Size | Standard Points | Chunked Points\n   * ------------|-----------------|---------------\n   *     4-bit   |     520         |      15\n   *     8-bit   |    4,224        |     255\n   *    10-bit   |   13,824        |   1,023\n   *    16-bit   |  557,056        |  65,535\n   *\n   * Key Advantages:\n   * 1. Enables larger window sizes due to reduced memory overhead\n   * 2. More efficient for smaller scalar counts:\n   *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n   *    - ~2x faster than standard 8,191 ops\n   *\n   * Limitations:\n   * - Not suitable for plain precomputes (requires 256 constant doublings)\n   * - Performance degrades with larger scalar counts:\n   *   - Optimal for ~256 scalars\n   *   - Less efficient for 4096+ scalars (Pippenger preferred)\n   */\n  validateW(windowSize, fieldN.BITS);\n  validateMSMPoints(points, c);\n  const zero = c.ZERO;\n  const tableSize = 2 ** windowSize - 1; // table size (without zero)\n  const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n  const MASK = bitMask(windowSize);\n  const tables = points.map((p: P) => {\n    const res = [];\n    for (let i = 0, acc = p; i < tableSize; i++) {\n      res.push(acc);\n      acc = acc.add(p);\n    }\n    return res;\n  });\n  return (scalars: bigint[]): P => {\n    validateMSMScalars(scalars, fieldN);\n    if (scalars.length > points.length)\n      throw new Error('array of scalars must be smaller than array of points');\n    let res = zero;\n    for (let i = 0; i < chunks; i++) {\n      // No need to double if accumulator is still zero.\n      if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\n      const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n      for (let j = 0; j < scalars.length; j++) {\n        const n = scalars[j];\n        const curr = Number((n >> shiftBy) & MASK);\n        if (!curr) continue; // skip zero scalars chunks\n        res = res.add(tables[j][curr - 1]);\n      }\n    }\n    return res;\n  };\n}\n\n// TODO: remove\n/**\n * Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n * Though generator can be different (Fp2 / Fp6 for BLS).\n */\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\n// TODO: remove\n/** @deprecated */\nexport function validateBasic<FP, T>(\n  curve: BasicCurve<FP> & T\n): Readonly<\n  {\n    readonly nBitLength: number;\n    readonly nByteLength: number;\n  } & BasicCurve<FP> &\n    T & {\n      p: bigint;\n    }\n> {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n\nexport type ValidCurveParams<T> = {\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  a: T;\n  b?: T;\n  d?: T;\n  Gx: T;\n  Gy: T;\n};\n\nfunction createField<T>(order: bigint, field?: IField<T>, isLE?: boolean): IField<T> {\n  if (field) {\n    if (field.ORDER !== order) throw new Error('Field.ORDER must match order: Fp == p, Fn == n');\n    validateField(field);\n    return field;\n  } else {\n    return Field(order, { isLE }) as unknown as IField<T>;\n  }\n}\nexport type FpFn<T> = { Fp: IField<T>; Fn: IField<bigint> };\n\n/** Validates CURVE opts and creates fields */\nexport function _createCurveFields<T>(\n  type: 'weierstrass' | 'edwards',\n  CURVE: ValidCurveParams<T>,\n  curveOpts: Partial<FpFn<T>> = {},\n  FpFnLE?: boolean\n): FpFn<T> & { CURVE: ValidCurveParams<T> } {\n  if (FpFnLE === undefined) FpFnLE = type === 'edwards';\n  if (!CURVE || typeof CURVE !== 'object') throw new Error(`expected valid ${type} CURVE object`);\n  for (const p of ['p', 'n', 'h'] as const) {\n    const val = CURVE[p];\n    if (!(typeof val === 'bigint' && val > _0n))\n      throw new Error(`CURVE.${p} must be positive bigint`);\n  }\n  const Fp = createField(CURVE.p, curveOpts.Fp, FpFnLE);\n  const Fn = createField(CURVE.n, curveOpts.Fn, FpFnLE);\n  const _b: 'b' | 'd' = type === 'weierstrass' ? 'b' : 'd';\n  const params = ['Gx', 'Gy', 'a', _b] as const;\n  for (const p of params) {\n    // @ts-ignore\n    if (!Fp.isValid(CURVE[p]))\n      throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);\n  }\n  CURVE = Object.freeze(Object.assign({}, CURVE));\n  return { CURVE, Fp, Fn };\n}\n", "/**\n * Utils for modular division and fields.\n * Field over 11 is a finite (Galois) field is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  _validateObject,\n  anumber,\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n} from '../utils.ts';\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _7n = /* @__PURE__ */ BigInt(7);\n// prettier-ignore\nconst _8n = /* @__PURE__ */ BigInt(8), _9n = /* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  return FpPow(Field(modulo), num, power);\n}\n\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n) throw new Error('invert: expected non-zero number');\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\nfunction assertIsSquare<T>(Fp: IField<T>, root: T, n: T): void {\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n}\n\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4<T>(Fp: IField<T>, n: T) {\n  const p1div4 = (Fp.ORDER + _1n) / _4n;\n  const root = Fp.pow(n, p1div4);\n  assertIsSquare(Fp, root, n);\n  return root;\n}\n\nfunction sqrt5mod8<T>(Fp: IField<T>, n: T) {\n  const p5div8 = (Fp.ORDER - _5n) / _8n;\n  const n2 = Fp.mul(n, _2n);\n  const v = Fp.pow(n2, p5div8);\n  const nv = Fp.mul(n, v);\n  const i = Fp.mul(Fp.mul(nv, _2n), v);\n  const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n  assertIsSquare(Fp, root, n);\n  return root;\n}\n\n// Based on RFC9380, Kong algorithm\n// prettier-ignore\nfunction sqrt9mod16(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  const Fp_ = Field(P);\n  const tn = tonelliShanks(P);\n  const c1 = tn(Fp_, Fp_.neg(Fp_.ONE));//  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n  const c2 = tn(Fp_, c1);              //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n  const c3 = tn(Fp_, Fp_.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n  const c4 = (P + _7n) / _16n;         //  4. c4 = (q + 7) / 16        # Integer arithmetic\n  return <T>(Fp: IField<T>, n: T) => {\n    let tv1 = Fp.pow(n, c4);           //  1. tv1 = x^c4\n    let tv2 = Fp.mul(tv1, c1);         //  2. tv2 = c1 * tv1\n    const tv3 = Fp.mul(tv1, c2);       //  3. tv3 = c2 * tv1\n    const tv4 = Fp.mul(tv1, c3);       //  4. tv4 = c3 * tv1\n    const e1 = Fp.eql(Fp.sqr(tv2), n); //  5.  e1 = (tv2^2) == x\n    const e2 = Fp.eql(Fp.sqr(tv3), n); //  6.  e2 = (tv3^2) == x\n    tv1 = Fp.cmov(tv1, tv2, e1);       //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    tv2 = Fp.cmov(tv4, tv3, e2);       //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    const e3 = Fp.eql(Fp.sqr(tv2), n); //  9.  e3 = (tv2^2) == x\n    const root = Fp.cmov(tv1, tv2, e3);// 10.  z = CMOV(tv1, tv2, e3)   # Select sqrt from tv1 & tv2\n    assertIsSquare(Fp, root, n);\n    return root;\n  };\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // Initialization (precomputation).\n  // Caching initialization could boost perf by 7%.\n  if (P < _3n) throw new Error('sqrt is not defined for small field');\n  // Factor P - 1 = Q * 2^S, where Q is odd\n  let Q = P - _1n;\n  let S = 0;\n  while (Q % _2n === _0n) {\n    Q /= _2n;\n    S++;\n  }\n\n  // Find the first quadratic non-residue Z >= 2\n  let Z = _2n;\n  const _Fp = Field(P);\n  while (FpLegendre(_Fp, Z) === 1) {\n    // Basic primality test for P. After x iterations, chance of\n    // not finding quadratic non-residue is 2^x, so 2^1000.\n    if (Z++ > 1000) throw new Error('Cannot find square root: probably non-prime P');\n  }\n  // Fast-path; usually done before Z, but we do \"primality test\".\n  if (S === 1) return sqrt3mod4;\n\n  // Slow-path\n  // TODO: test on Fp2 and others\n  let cc = _Fp.pow(Z, Q); // c = z^Q\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    if (Fp.is0(n)) return n;\n    // Check if n is a quadratic residue using Legendre symbol\n    if (FpLegendre(Fp, n) !== 1) throw new Error('Cannot find square root');\n\n    // Initialize variables for the main loop\n    let M = S;\n    let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n    let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n    let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n\n    // Main loop\n    // while t != 1\n    while (!Fp.eql(t, Fp.ONE)) {\n      if (Fp.is0(t)) return Fp.ZERO; // if t=0 return R=0\n      let i = 1;\n\n      // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n      let t_tmp = Fp.sqr(t); // t^(2^1)\n      while (!Fp.eql(t_tmp, Fp.ONE)) {\n        i++;\n        t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n        if (i === M) throw new Error('Cannot find square root');\n      }\n\n      // Calculate the exponent for b: 2^(M - i - 1)\n      const exponent = _1n << BigInt(M - i - 1); // bigint is important\n      const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n\n      // Update variables\n      M = i;\n      c = Fp.sqr(b); // c = b^2\n      t = Fp.mul(t, c); // t = (t * b^2)\n      R = Fp.mul(R, b); // R = R*b\n    }\n    return R;\n  };\n}\n\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. P ≡ 9 (mod 16)\n * 4. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n  if (P % _4n === _3n) return sqrt3mod4;\n  // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n  if (P % _8n === _5n) return sqrt5mod8;\n  // P ≡ 9 (mod 16) => Kong algorithm, page 11 of https://eprint.iacr.org/2012/685.pdf (algorithm 4)\n  if (P % _16n === _9n) return sqrt9mod16(P);\n  // Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint): boolean =>\n  (mod(num, modulo) & _1n) === _1n;\n\n/** Field is not always over prime: for example, Fp2 has ORDER(q)=p^m. */\nexport interface IField<T> {\n  ORDER: bigint;\n  isLE: boolean;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  isValidNot0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  allowedLengths?: number[];\n  // legendre?(num: T): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array, skipValidation?: boolean): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>): IField<T> {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'number',\n    BITS: 'number',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  _validateObject(field, opts);\n  // const max = 16384;\n  // if (field.BYTES < 1 || field.BYTES > max) throw new Error('invalid field');\n  // if (field.BITS < 1 || field.BITS > 8 * max) throw new Error('invalid field');\n  return field;\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(Fp: IField<T>, num: T, power: bigint): T {\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (power === _0n) return Fp.ONE;\n  if (power === _1n) return num;\n  let p = Fp.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = Fp.mul(p, d);\n    d = Fp.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch<T>(Fp: IField<T>, nums: T[], passZero = false): T[] {\n  const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n  // Walk from first to last, multiply them by each other MOD p\n  const multipliedAcc = nums.reduce((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = acc;\n    return Fp.mul(acc, num);\n  }, Fp.ONE);\n  // Invert last element\n  const invertedAcc = Fp.inv(multipliedAcc);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = Fp.mul(acc, inverted[i]);\n    return Fp.mul(acc, num);\n  }, invertedAcc);\n  return inverted;\n}\n\n// TODO: remove\nexport function FpDiv<T>(Fp: IField<T>, lhs: T, rhs: T | bigint): T {\n  return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre<T>(Fp: IField<T>, n: T): -1 | 0 | 1 {\n  // We can use 3rd argument as optional cache of this value\n  // but seems unneeded for now. The operation is very fast.\n  const p1mod2 = (Fp.ORDER - _1n) / _2n;\n  const powered = Fp.pow(n, p1mod2);\n  const yes = Fp.eql(powered, Fp.ONE);\n  const zero = Fp.eql(powered, Fp.ZERO);\n  const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n  if (!yes && !zero && !no) throw new Error('invalid Legendre symbol result');\n  return yes ? 1 : zero ? 0 : -1;\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(Fp: IField<T>, n: T): boolean {\n  const l = FpLegendre(Fp, n);\n  return l === 1;\n}\n\nexport type NLength = { nByteLength: number; nBitLength: number };\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number): NLength {\n  // Bit size, byte size of CURVE.n\n  if (nBitLength !== undefined) anumber(nBitLength);\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\ntype SqrtFn = (n: bigint) => bigint;\ntype FieldOpts = Partial<{\n  sqrt: SqrtFn;\n  isLE: boolean;\n  BITS: number;\n  modFromBytes: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  allowedLengths?: readonly number[]; // for P521 (adds padding for smaller sizes)\n}>;\n/**\n * Creates a finite field. Major performance optimizations:\n * * 1. Denormalized operations like mulN instead of mul.\n * * 2. Identical object shape: never add or remove keys.\n * * 3. `Object.freeze`.\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n *\n * Note about field properties:\n * * CHARACTERISTIC p = prime number, number of elements in main subgroup.\n * * ORDER q = similar to cofactor in curves, may be composite `q = p^m`.\n *\n * @param ORDER field order, probably prime, or could be composite\n * @param bitLen how many bits the field consumes\n * @param isLE (default: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLenOrOpts?: number | FieldOpts, // TODO: use opts only in v2?\n  isLE = false,\n  opts: { sqrt?: SqrtFn } = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n  let _nbitLength: number | undefined = undefined;\n  let _sqrt: SqrtFn | undefined = undefined;\n  let modFromBytes: boolean = false;\n  let allowedLengths: undefined | readonly number[] = undefined;\n  if (typeof bitLenOrOpts === 'object' && bitLenOrOpts != null) {\n    if (opts.sqrt || isLE) throw new Error('cannot specify opts in two arguments');\n    const _opts = bitLenOrOpts;\n    if (_opts.BITS) _nbitLength = _opts.BITS;\n    if (_opts.sqrt) _sqrt = _opts.sqrt;\n    if (typeof _opts.isLE === 'boolean') isLE = _opts.isLE;\n    if (typeof _opts.modFromBytes === 'boolean') modFromBytes = _opts.modFromBytes;\n    allowedLengths = _opts.allowedLengths;\n  } else {\n    if (typeof bitLenOrOpts === 'number') _nbitLength = bitLenOrOpts;\n    if (opts.sqrt) _sqrt = opts.sqrt;\n  }\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, _nbitLength);\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n  let sqrtP: ReturnType<typeof FpSqrt>; // cached sqrtP\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    allowedLengths: allowedLengths,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error('invalid field element: expected bigint, got ' + typeof num);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    // is valid and invertible\n    isValidNot0: (num: bigint) => !f.is0(num) && f.isValid(num),\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt:\n      _sqrt ||\n      ((n) => {\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\n        return sqrtP(f, n);\n      }),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes, skipValidation = true) => {\n      if (allowedLengths) {\n        if (!allowedLengths.includes(bytes.length) || bytes.length > BYTES) {\n          throw new Error(\n            'Field.fromBytes: expected ' + allowedLengths + ' bytes, got ' + bytes.length\n          );\n        }\n        const padded = new Uint8Array(BYTES);\n        // isLE add 0 to right, !isLE to the left.\n        padded.set(bytes, isLE ? 0 : padded.length - bytes.length);\n        bytes = padded;\n      }\n      if (bytes.length !== BYTES)\n        throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n      let scalar = isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n      if (modFromBytes) scalar = mod(scalar, ORDER);\n      if (!skipValidation)\n        if (!f.isValid(scalar)) throw new Error('invalid field element: outside of range 0..ORDER');\n      // NOTE: we don't validate scalar here, please use isValid. This done such way because some\n      // protocol may allow non-reduced scalar that reduced later or changed some other way.\n      return scalar;\n    },\n    // TODO: we don't need it here, move out to separate fn\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // We can't move this out because Fp6, Fp12 implement it\n    // and it's unclear what to return in there.\n    cmov: (a, b, c) => (c ? b : a),\n  } as FpField);\n  return Object.freeze(f);\n}\n\n// Generic random scalar, we can do same for other fields if via Fp2.mul(Fp2.ONE, Fp2.random)?\n// This allows unsafe methods like ignore bias or zero. These unsafe, but often used in different protocols (if deterministic RNG).\n// which mean we cannot force this via opts.\n// Not sure what to do with randomBytes, we can accept it inside opts if wanted.\n// Probably need to export getMinHashLength somewhere?\n// random(bytes?: Uint8Array, unsafeAllowZero = false, unsafeAllowBias = false) {\n//   const LEN = !unsafeAllowBias ? getMinHashLength(ORDER) : BYTES;\n//   if (bytes === undefined) bytes = randomBytes(LEN); // _opts.randomBytes?\n//   const num = isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n//   // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n//   const reduced = unsafeAllowZero ? mod(num, ORDER) : mod(num, ORDER - _1n) + _1n;\n//   return reduced;\n// },\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(\n      'hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen\n    );\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n", "/**\n * hash-to-curve from RFC 9380.\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * https://www.rfc-editor.org/rfc/rfc9380\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { CHash } from '../utils.ts';\nimport {\n  _validateObject,\n  abytes,\n  bytesToNumberBE,\n  concatBytes,\n  isBytes,\n  isHash,\n  utf8ToBytes,\n} from '../utils.ts';\nimport type { AffinePoint, Group, GroupConstructor } from './curve.ts';\nimport { FpInvertBatch, mod, type IField } from './modular.ts';\n\nexport type UnicodeOrBytes = string | Uint8Array;\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\nexport type H2COpts = {\n  DST: UnicodeOrBytes;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n  p: bigint;\n  m: number;\n  k: number;\n};\nexport type H2CHashOpts = {\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n// todo: remove\nexport type Opts = H2COpts;\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  anum(value);\n  anum(length);\n  if (value < 0 || value >= 1 << (8 * length)) throw new Error('invalid I2OSP input: ' + value);\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction anum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\nfunction normDST(DST: UnicodeOrBytes): Uint8Array {\n  if (!isBytes(DST) && typeof DST !== 'string') throw new Error('DST must be Uint8Array or string');\n  return typeof DST === 'string' ? utf8ToBytes(DST) : DST;\n}\n\n/**\n * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n */\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: UnicodeOrBytes,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  anum(lenInBytes);\n  DST = normDST(DST);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (lenInBytes > 65535 || ell > 255) throw new Error('expand_message_xmd: invalid lenInBytes');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n/**\n * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n * 1. The collision resistance of H MUST be at least k bits.\n * 2. H MUST be an XOF that has been proved indifferentiable from\n *    a random oracle under a reasonable cryptographic assumption.\n * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n */\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: UnicodeOrBytes,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  anum(lenInBytes);\n  DST = normDST(DST);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: H2COpts): bigint[][] {\n  _validateObject(options, {\n    p: 'bigint',\n    m: 'number',\n    k: 'number',\n    hash: 'function',\n  });\n  const { p, k, m, hash, expand, DST } = options;\n  if (!isHash(options.hash)) throw new Error('expected valid hash');\n  abytes(msg);\n  anum(count);\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport type XY<T> = (x: T, y: T) => { x: T; y: T };\nexport type XYRatio<T> = [T[], T[], T[], T[]]; // xn/xd, yn/yd\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: XYRatio<T>): XY<T> {\n  // Make same order as in spec\n  const coeff = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xn, xd, yn, yd] = coeff.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    // 6.6.3\n    // Exceptional cases of iso_map are inputs that cause the denominator of\n    // either rational function to evaluate to zero; such cases MUST return\n    // the identity point on E.\n    const [xd_inv, yd_inv] = FpInvertBatch(field, [xd, yd], true);\n    x = field.mul(xn, xd_inv); // xNum / xDen\n    y = field.mul(y, field.mul(yn, yd_inv)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\n/** Point interface, which curves must implement to work correctly with the module. */\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\nexport type H2CMethod<T> = (msg: Uint8Array, options?: htfBasicOpts) => H2CPoint<T>;\n// TODO: remove\nexport type HTFMethod<T> = H2CMethod<T>;\nexport type MapMethod<T> = (scalars: bigint[]) => H2CPoint<T>;\nexport type H2CHasherBase<T> = {\n  hashToCurve: H2CMethod<T>;\n  hashToScalar: (msg: Uint8Array, options: htfBasicOpts) => bigint;\n};\n/**\n * RFC 9380 methods, with cofactor clearing. See https://www.rfc-editor.org/rfc/rfc9380#section-3.\n *\n * * hashToCurve: `map(hash(input))`, encodes RANDOM bytes to curve (WITH hashing)\n * * encodeToCurve: `map(hash(input))`, encodes NON-UNIFORM bytes to curve (WITH hashing)\n * * mapToCurve: `map(scalars)`, encodes NON-UNIFORM scalars to curve (NO hashing)\n */\nexport type H2CHasher<T> = H2CHasherBase<T> & {\n  encodeToCurve: H2CMethod<T>;\n  mapToCurve: MapMethod<T>;\n  defaults: H2COpts & { encodeDST?: UnicodeOrBytes };\n};\n// TODO: remove\nexport type Hasher<T> = H2CHasher<T>;\n\nexport const _DST_scalar: Uint8Array = utf8ToBytes('HashToScalar-');\n\n/** Creates hash-to-curve methods from EC Point and mapToCurve function. See {@link H2CHasher}. */\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  defaults: H2COpts & { encodeDST?: UnicodeOrBytes }\n): H2CHasher<T> {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  function map(num: bigint[]) {\n    return Point.fromAffine(mapToCurve(num));\n  }\n  function clear(initial: H2CPoint<T>) {\n    const P = initial.clearCofactor();\n    if (P.equals(Point.ZERO)) return Point.ZERO; // zero will throw in assert\n    P.assertValidity();\n    return P;\n  }\n\n  return {\n    defaults,\n\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\n      const opts = Object.assign({}, defaults, options);\n      const u = hash_to_field(msg, 2, opts);\n      const u0 = map(u[0]);\n      const u1 = map(u[1]);\n      return clear(u0.add(u1));\n    },\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\n      const optsDst = defaults.encodeDST ? { DST: defaults.encodeDST } : {};\n      const opts = Object.assign({}, defaults, optsDst, options);\n      const u = hash_to_field(msg, 1, opts);\n      const u0 = map(u[0]);\n      return clear(u0);\n    },\n    /** See {@link H2CHasher} */\n    mapToCurve(scalars: bigint[]): H2CPoint<T> {\n      if (!Array.isArray(scalars)) throw new Error('expected array of bigints');\n      for (const i of scalars)\n        if (typeof i !== 'bigint') throw new Error('expected array of bigints');\n      return clear(map(scalars));\n    },\n\n    // hash_to_scalar can produce 0: https://www.rfc-editor.org/errata/eid8393\n    // RFC 9380, draft-irtf-cfrg-bbs-signatures-08\n    hashToScalar(msg: Uint8Array, options?: htfBasicOpts): bigint {\n      // @ts-ignore\n      const N = Point.Fn.ORDER;\n      const opts = Object.assign({}, defaults, { p: N, m: 1, DST: _DST_scalar }, options);\n      return hash_to_field(msg, 1, opts)[0][0];\n    },\n  };\n}\n", "/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac as nobleHmac } from '@noble/hashes/hmac.js';\nimport { ahash } from '@noble/hashes/utils';\nimport {\n  _validateObject,\n  _abool2 as abool,\n  _abytes2 as abytes,\n  aInRange,\n  bitLen,\n  bitMask,\n  bytesToHex,\n  bytesToNumberBE,\n  concatBytes,\n  createHmacDrbg,\n  ensureBytes,\n  hexToBytes,\n  inRange,\n  isBytes,\n  memoized,\n  numberToHexUnpadded,\n  randomBytes as randomBytesWeb,\n  type CHash,\n  type Hex,\n  type PrivKey,\n} from '../utils.ts';\nimport {\n  _createCurveFields,\n  mulEndoUnsafe,\n  negateCt,\n  normalizeZ,\n  pippenger,\n  wNAF,\n  type AffinePoint,\n  type BasicCurve,\n  type CurveLengths,\n  type CurvePoint,\n  type CurvePointCons,\n} from './curve.ts';\nimport {\n  Field,\n  FpInvertBatch,\n  getMinHashLength,\n  mapHashToField,\n  nLength,\n  validateField,\n  type IField,\n  type NLength,\n} from './modular.ts';\n\nexport type { AffinePoint };\nexport type HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\n\ntype EndoBasis = [[bigint, bigint], [bigint, bigint]];\n/**\n * When Weierstrass curve has `a=0`, it becomes Koblitz curve.\n * Koblitz curves allow using **efficiently-computable GLV endomorphism ψ**.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n *\n * Endomorphism consists of beta, lambda and splitScalar:\n *\n * 1. GLV endomorphism ψ transforms a point: `P = (x, y) ↦ ψ(P) = (β·x mod p, y)`\n * 2. GLV scalar decomposition transforms a scalar: `k ≡ k₁ + k₂·λ (mod n)`\n * 3. Then these are combined: `k·P = k₁·P + k₂·ψ(P)`\n * 4. Two 128-bit point-by-scalar multiplications + one point addition is faster than\n *    one 256-bit multiplication.\n *\n * where\n * * beta: β ∈ Fₚ with β³ = 1, β ≠ 1\n * * lambda: λ ∈ Fₙ with λ³ = 1, λ ≠ 1\n * * splitScalar decomposes k ↦ k₁, k₂, by using reduced basis vectors.\n *   Gauss lattice reduction calculates them from initial basis vectors `(n, 0), (-λ, 0)`\n *\n * Check out `test/misc/endomorphism.js` and\n * [gist](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n */\nexport type EndomorphismOpts = {\n  beta: bigint;\n  basises?: EndoBasis;\n  splitScalar?: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\n\n// We construct basis in such way that den is always positive and equals n, but num sign depends on basis (not on secret value)\nconst divNearest = (num: bigint, den: bigint) => (num + (num >= 0 ? den : -den) / _2n) / den;\n\nexport type ScalarEndoParts = { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n\n/**\n * Splits scalar for GLV endomorphism.\n */\nexport function _splitEndoScalar(k: bigint, basis: EndoBasis, n: bigint): ScalarEndoParts {\n  // Split scalar into two such that part is ~half bits: `abs(part) < sqrt(N)`\n  // Since part can be negative, we need to do this on point.\n  // TODO: verifyScalar function which consumes lambda\n  const [[a1, b1], [a2, b2]] = basis;\n  const c1 = divNearest(b2 * k, n);\n  const c2 = divNearest(-b1 * k, n);\n  // |k1|/|k2| is < sqrt(N), but can be negative.\n  // If we do `k1 mod N`, we'll get big scalar (`> sqrt(N)`): so, we do cheaper negation instead.\n  let k1 = k - c1 * a1 - c2 * a2;\n  let k2 = -c1 * b1 - c2 * b2;\n  const k1neg = k1 < _0n;\n  const k2neg = k2 < _0n;\n  if (k1neg) k1 = -k1;\n  if (k2neg) k2 = -k2;\n  // Double check that resulting scalar less than half bits of N: otherwise wNAF will fail.\n  // This should only happen on wrong basises. Also, math inside is too complex and I don't trust it.\n  const MAX_NUM = bitMask(Math.ceil(bitLen(n) / 2)) + _1n; // Half bits of N\n  if (k1 < _0n || k1 >= MAX_NUM || k2 < _0n || k2 >= MAX_NUM) {\n    throw new Error('splitScalar (endomorphism): failed, k=' + k);\n  }\n  return { k1neg, k1, k2neg, k2 };\n}\n\nexport type ECDSASigFormat = 'compact' | 'recovered' | 'der';\nexport type ECDSARecoverOpts = {\n  prehash?: boolean;\n};\nexport type ECDSAVerifyOpts = {\n  prehash?: boolean;\n  lowS?: boolean;\n  format?: ECDSASigFormat;\n};\nexport type ECDSASignOpts = {\n  prehash?: boolean;\n  lowS?: boolean;\n  format?: ECDSASigFormat;\n  extraEntropy?: Uint8Array | boolean;\n};\n\nfunction validateSigFormat(format: string): ECDSASigFormat {\n  if (!['compact', 'recovered', 'der'].includes(format))\n    throw new Error('Signature format must be \"compact\", \"recovered\", or \"der\"');\n  return format as ECDSASigFormat;\n}\n\nfunction validateSigOpts<T extends ECDSASignOpts, D extends Required<ECDSASignOpts>>(\n  opts: T,\n  def: D\n): Required<ECDSASignOpts> {\n  const optsn: ECDSASignOpts = {};\n  for (let optName of Object.keys(def)) {\n    // @ts-ignore\n    optsn[optName] = opts[optName] === undefined ? def[optName] : opts[optName];\n  }\n  abool(optsn.lowS!, 'lowS');\n  abool(optsn.prehash!, 'prehash');\n  if (optsn.format !== undefined) validateSigFormat(optsn.format);\n  return optsn as Required<ECDSASignOpts>;\n}\n\n/** Instance methods for 3D XYZ projective points. */\nexport interface WeierstrassPoint<T> extends CurvePoint<T, WeierstrassPoint<T>> {\n  /** projective X coordinate. Different from affine x. */\n  readonly X: T;\n  /** projective Y coordinate. Different from affine y. */\n  readonly Y: T;\n  /** projective z coordinate */\n  readonly Z: T;\n  /** affine x coordinate. Different from projective X. */\n  get x(): T;\n  /** affine y coordinate. Different from projective Y. */\n  get y(): T;\n  /** Encodes point using IEEE P1363 (DER) encoding. First byte is 2/3/4. Default = isCompressed. */\n  toBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  /** @deprecated use `.X` */\n  readonly px: T;\n  /** @deprecated use `.Y` */\n  readonly py: T;\n  /** @deprecated use `.Z` */\n  readonly pz: T;\n  /** @deprecated use `toBytes` */\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  /** @deprecated use `multiplyUnsafe` */\n  multiplyAndAddUnsafe(\n    Q: WeierstrassPoint<T>,\n    a: bigint,\n    b: bigint\n  ): WeierstrassPoint<T> | undefined;\n  /** @deprecated use `p.y % 2n === 0n` */\n  hasEvenY(): boolean;\n  /** @deprecated use `p.precompute(windowSize)` */\n  _setWindowSize(windowSize: number): void;\n}\n\n/** Static methods for 3D XYZ projective points. */\nexport interface WeierstrassPointCons<T> extends CurvePointCons<WeierstrassPoint<T>> {\n  /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n  new (X: T, Y: T, Z: T): WeierstrassPoint<T>;\n  CURVE(): WeierstrassOpts<T>;\n  /** @deprecated use `Point.BASE.multiply(Point.Fn.fromBytes(privateKey))` */\n  fromPrivateKey(privateKey: PrivKey): WeierstrassPoint<T>;\n  /** @deprecated use `import { normalizeZ } from '@noble/curves/abstract/curve.js';` */\n  normalizeZ(points: WeierstrassPoint<T>[]): WeierstrassPoint<T>[];\n  /** @deprecated use `import { pippenger } from '@noble/curves/abstract/curve.js';` */\n  msm(points: WeierstrassPoint<T>[], scalars: bigint[]): WeierstrassPoint<T>;\n}\n\n/**\n * Weierstrass curve options.\n *\n * * p: prime characteristic (order) of finite field, in which arithmetics is done\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * h: cofactor, usually 1. h*n is group order; n is subgroup order\n * * a: formula param, must be in field of p\n * * b: formula param, must be in field of p\n * * Gx: x coordinate of generator point a.k.a. base point\n * * Gy: y coordinate of generator point\n */\nexport type WeierstrassOpts<T> = Readonly<{\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  a: T;\n  b: T;\n  Gx: T;\n  Gy: T;\n}>;\n\n// When a cofactor != 1, there can be an effective methods to:\n// 1. Determine whether a point is torsion-free\n// 2. Clear torsion component\n// wrapPrivateKey: bls12-381 requires mod(n) instead of rejecting keys >= n\nexport type WeierstrassExtraOpts<T> = Partial<{\n  Fp: IField<T>;\n  Fn: IField<bigint>;\n  allowInfinityPoint: boolean;\n  endo: EndomorphismOpts;\n  isTorsionFree: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => boolean;\n  clearCofactor: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => WeierstrassPoint<T>;\n  fromBytes: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes: (\n    c: WeierstrassPointCons<T>,\n    point: WeierstrassPoint<T>,\n    isCompressed: boolean\n  ) => Uint8Array;\n}>;\n\n/**\n * Options for ECDSA signatures over a Weierstrass curve.\n *\n * * lowS: (default: true) whether produced / verified signatures occupy low half of ecdsaOpts.p. Prevents malleability.\n * * hmac: (default: noble-hashes hmac) function, would be used to init hmac-drbg for k generation.\n * * randomBytes: (default: webcrypto os-level CSPRNG) custom method for fetching secure randomness.\n * * bits2int, bits2int_modN: used in sigs, sometimes overridden by curves\n */\nexport type ECDSAOpts = Partial<{\n  lowS: boolean;\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  bits2int: (bytes: Uint8Array) => bigint;\n  bits2int_modN: (bytes: Uint8Array) => bigint;\n}>;\n\n/**\n * Elliptic Curve Diffie-Hellman interface.\n * Provides keygen, secret-to-public conversion, calculating shared secrets.\n */\nexport interface ECDH {\n  keygen: (seed?: Uint8Array) => { secretKey: Uint8Array; publicKey: Uint8Array };\n  getPublicKey: (secretKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (secretKeyA: PrivKey, publicKeyB: Hex, isCompressed?: boolean) => Uint8Array;\n  Point: WeierstrassPointCons<bigint>;\n  utils: {\n    isValidSecretKey: (secretKey: PrivKey) => boolean;\n    isValidPublicKey: (publicKey: Uint8Array, isCompressed?: boolean) => boolean;\n    randomSecretKey: (seed?: Uint8Array) => Uint8Array;\n    /** @deprecated use `randomSecretKey` */\n    randomPrivateKey: (seed?: Uint8Array) => Uint8Array;\n    /** @deprecated use `isValidSecretKey` */\n    isValidPrivateKey: (secretKey: PrivKey) => boolean;\n    /** @deprecated use `Point.Fn.fromBytes()` */\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    /** @deprecated use `point.precompute()` */\n    precompute: (windowSize?: number, point?: WeierstrassPoint<bigint>) => WeierstrassPoint<bigint>;\n  };\n  lengths: CurveLengths;\n}\n\n/**\n * ECDSA interface.\n * Only supported for prime fields, not Fp2 (extension fields).\n */\nexport interface ECDSA extends ECDH {\n  sign: (message: Hex, secretKey: PrivKey, opts?: ECDSASignOpts) => ECDSASigRecovered;\n  verify: (\n    signature: Uint8Array,\n    message: Uint8Array,\n    publicKey: Uint8Array,\n    opts?: ECDSAVerifyOpts\n  ) => boolean;\n  recoverPublicKey(signature: Uint8Array, message: Uint8Array, opts?: ECDSARecoverOpts): Uint8Array;\n  Signature: ECDSASignatureCons;\n}\nexport class DERErr extends Error {\n  constructor(m = '') {\n    super(m);\n  }\n}\nexport type IDER = {\n  // asn.1 DER encoding utils\n  Err: typeof DERErr;\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string) => string;\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array };\n  };\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string;\n    decode(data: Uint8Array): bigint;\n  };\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint };\n  hexFromSig(sig: { r: bigint; s: bigint }): string;\n};\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER: IDER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string): string => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = numberToHexUnpadded(dataLen);\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\n      const t = numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;\n      else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 0b0111_1111;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = (length << 8) | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return { v, l: data.subarray(pos + length) };\n    },\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string {\n      const { Err: E } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data: Uint8Array): bigint {\n      const { Err: E } = DER;\n      if (data[0] & 0b1000_0000) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\n        throw new E('invalid signature integer: unnecessary leading zero');\n      return bytesToNumberBE(data);\n    },\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = ensureBytes('signature', hex);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    const { _tlv: tlv, _int: int } = DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function _normFnElement(Fn: IField<bigint>, key: PrivKey): bigint {\n  const { BYTES: expected } = Fn;\n  let num: bigint;\n  if (typeof key === 'bigint') {\n    num = key;\n  } else {\n    let bytes = ensureBytes('private key', key);\n    try {\n      num = Fn.fromBytes(bytes);\n    } catch (error) {\n      throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);\n    }\n  }\n  if (!Fn.isValidNot0(num)) throw new Error('invalid private key: out of range [1..N-1]');\n  return num;\n}\n\n/**\n * Creates weierstrass Point constructor, based on specified curve options.\n *\n * @example\n```js\nconst opts = {\n  p: BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'),\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n  h: BigInt(1),\n  a: BigInt('0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc'),\n  b: BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b'),\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n};\nconst p256_Point = weierstrass(opts);\n```\n */\nexport function weierstrassN<T>(\n  params: WeierstrassOpts<T>,\n  extraOpts: WeierstrassExtraOpts<T> = {}\n): WeierstrassPointCons<T> {\n  const validated = _createCurveFields('weierstrass', params, extraOpts);\n  const { Fp, Fn } = validated;\n  let CURVE = validated.CURVE as WeierstrassOpts<T>;\n  const { h: cofactor, n: CURVE_ORDER } = CURVE;\n  _validateObject(\n    extraOpts,\n    {},\n    {\n      allowInfinityPoint: 'boolean',\n      clearCofactor: 'function',\n      isTorsionFree: 'function',\n      fromBytes: 'function',\n      toBytes: 'function',\n      endo: 'object',\n      wrapPrivateKey: 'boolean',\n    }\n  );\n\n  const { endo } = extraOpts;\n  if (endo) {\n    // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\n    if (!Fp.is0(CURVE.a) || typeof endo.beta !== 'bigint' || !Array.isArray(endo.basises)) {\n      throw new Error('invalid endo: expected \"beta\": bigint and \"basises\": array');\n    }\n  }\n\n  const lengths = getWLengths(Fp, Fn);\n\n  function assertCompressionIsSupported() {\n    if (!Fp.isOdd) throw new Error('compression is not supported: Field does not have .isOdd()');\n  }\n\n  // Implements IEEE P1363 point encoding\n  function pointToBytes(\n    _c: WeierstrassPointCons<T>,\n    point: WeierstrassPoint<T>,\n    isCompressed: boolean\n  ): Uint8Array {\n    const { x, y } = point.toAffine();\n    const bx = Fp.toBytes(x);\n    abool(isCompressed, 'isCompressed');\n    if (isCompressed) {\n      assertCompressionIsSupported();\n      const hasEvenY = !Fp.isOdd!(y);\n      return concatBytes(pprefix(hasEvenY), bx);\n    } else {\n      return concatBytes(Uint8Array.of(0x04), bx, Fp.toBytes(y));\n    }\n  }\n  function pointFromBytes(bytes: Uint8Array) {\n    abytes(bytes, undefined, 'Point');\n    const { publicKey: comp, publicKeyUncompressed: uncomp } = lengths; // e.g. for 32-byte: 33, 65\n    const length = bytes.length;\n    const head = bytes[0];\n    const tail = bytes.subarray(1);\n    // No actual validation is done here: use .assertValidity()\n    if (length === comp && (head === 0x02 || head === 0x03)) {\n      const x = Fp.fromBytes(tail);\n      if (!Fp.isValid(x)) throw new Error('bad point: is not on curve, wrong x');\n      const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n      let y: T;\n      try {\n        y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n      } catch (sqrtError) {\n        const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n        throw new Error('bad point: is not on curve, sqrt error' + err);\n      }\n      assertCompressionIsSupported();\n      const isYOdd = Fp.isOdd!(y); // (y & _1n) === _1n;\n      const isHeadOdd = (head & 1) === 1; // ECDSA-specific\n      if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n      return { x, y };\n    } else if (length === uncomp && head === 0x04) {\n      // TODO: more checks\n      const L = Fp.BYTES;\n      const x = Fp.fromBytes(tail.subarray(0, L));\n      const y = Fp.fromBytes(tail.subarray(L, L * 2));\n      if (!isValidXY(x, y)) throw new Error('bad point: is not on curve');\n      return { x, y };\n    } else {\n      throw new Error(\n        `bad point: got length ${length}, expected compressed=${comp} or uncompressed=${uncomp}`\n      );\n    }\n  }\n\n  const encodePoint = extraOpts.toBytes || pointToBytes;\n  const decodePoint = extraOpts.fromBytes || pointFromBytes;\n  function weierstrassEquation(x: T): T {\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x² * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, CURVE.a)), CURVE.b); // x³ + a * x + b\n  }\n\n  // TODO: move top-level\n  /** Checks whether equation holds for given x, y: y² == x³ + ax + b */\n  function isValidXY(x: T, y: T): boolean {\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    return Fp.eql(left, right);\n  }\n\n  // Validate whether the passed curve params are valid.\n  // Test 1: equation y² = x³ + ax + b should work for generator point.\n  if (!isValidXY(CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\n\n  // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n  // Guarantees curve is genus-1, smooth (non-singular).\n  const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n  const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n  if (Fp.is0(Fp.add(_4a3, _27b2))) throw new Error('bad curve params: a or b');\n\n  /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\n  function acoord(title: string, n: T, banZero = false) {\n    if (!Fp.isValid(n) || (banZero && Fp.is0(n))) throw new Error(`bad point coordinate ${title}`);\n    return n;\n  }\n\n  function aprjpoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n\n  function splitEndoScalarN(k: bigint) {\n    if (!endo || !endo.basises) throw new Error('no endo');\n    return _splitEndoScalar(k, endo.basises, Fn.ORDER);\n  }\n\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\n    const { X, Y, Z } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(Z, Fp.ONE)) return { x: X, y: Y };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(Z);\n    const x = Fp.mul(X, iz);\n    const y = Fp.mul(Y, iz);\n    const zz = Fp.mul(Z, iz);\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return { x, y };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized((p: Point) => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (extraOpts.allowInfinityPoint && !Fp.is0(p.Y)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const { x, y } = p.toAffine();\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not field elements');\n    if (!isValidXY(x, y)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n\n  function finishEndo(\n    endoBeta: EndomorphismOpts['beta'],\n    k1p: Point,\n    k2p: Point,\n    k1neg: boolean,\n    k2neg: boolean\n  ) {\n    k2p = new Point(Fp.mul(k2p.X, endoBeta), k2p.Y, k2p.Z);\n    k1p = negateCt(k1neg, k1p);\n    k2p = negateCt(k2neg, k2p);\n    return k1p.add(k2p);\n  }\n\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) ∋ (x=X/Z, y=Y/Z).\n   * Default Point works in 2d / affine coordinates: (x, y).\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements WeierstrassPoint<T> {\n    // base / generator point\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    // math field\n    static readonly Fp = Fp;\n    // scalar field\n    static readonly Fn = Fn;\n\n    readonly X: T;\n    readonly Y: T;\n    readonly Z: T;\n\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    constructor(X: T, Y: T, Z: T) {\n      this.X = acoord('x', X);\n      this.Y = acoord('y', Y, true);\n      this.Z = acoord('z', Z);\n      Object.freeze(this);\n    }\n\n    static CURVE(): WeierstrassOpts<T> {\n      return CURVE;\n    }\n\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\n      if (Fp.is0(x) && Fp.is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    static fromBytes(bytes: Uint8Array): Point {\n      const P = Point.fromAffine(decodePoint(abytes(bytes, undefined, 'point')));\n      P.assertValidity();\n      return P;\n    }\n    static fromHex(hex: Hex): Point {\n      return Point.fromBytes(ensureBytes('pointHex', hex));\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     *\n     * @param windowSize\n     * @param isLazy true will defer table computation until the first multiplication\n     * @returns\n     */\n    precompute(windowSize: number = 8, isLazy = true): Point {\n      wnaf.createCache(this, windowSize);\n      if (!isLazy) this.multiply(_3n); // random number\n      return this;\n    }\n\n    // TODO: return `this`\n    /** A point on curve is valid if it conforms to equation. */\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (!Fp.isOdd) throw new Error(\"Field doesn't support isOdd\");\n      return !Fp.isOdd(y);\n    }\n\n    /** Compare one point to another. */\n    equals(other: Point): boolean {\n      aprjpoint(other);\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      const { X: X2, Y: Y2, Z: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n    negate(): Point {\n      return new Point(this.X, Fp.neg(this.Y), this.Z);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      aprjpoint(other);\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      const { X: X2, Y: Y2, Z: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      const { endo } = extraOpts;\n      if (!Fn.isValidNot0(scalar)) throw new Error('invalid scalar: out of range'); // 0 is invalid\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const mul = (n: bigint) => wnaf.cached(this, n, (p) => normalizeZ(Point, p));\n      /** See docs for {@link EndomorphismOpts} */\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(scalar);\n        const { p: k1p, f: k1f } = mul(k1);\n        const { p: k2p, f: k2f } = mul(k2);\n        fake = k1f.add(k2f);\n        point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\n      } else {\n        const { p, f } = mul(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return normalizeZ(Point, [point, fake])[0];\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed secret key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc: bigint): Point {\n      const { endo } = extraOpts;\n      const p = this as Point;\n      if (!Fn.isValid(sc)) throw new Error('invalid scalar: out of range'); // 0 is valid\n      if (sc === _0n || p.is0()) return Point.ZERO;\n      if (sc === _1n) return p; // fast-path\n      if (wnaf.hasCache(this)) return this.multiply(sc);\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(sc);\n        const { p1, p2 } = mulEndoUnsafe(Point, p, k1, k2); // 30% faster vs wnaf.unsafe\n        return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\n      } else {\n        return wnaf.unsafe(p, sc);\n      }\n    }\n\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    /**\n     * Converts Projective point to affine (x, y) coordinates.\n     * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n     */\n    toAffine(invertedZ?: T): AffinePoint<T> {\n      return toAffineMemo(this, invertedZ);\n    }\n\n    /**\n     * Checks whether Point is free of torsion elements (is in prime subgroup).\n     * Always torsion-free for cofactor=1 curves.\n     */\n    isTorsionFree(): boolean {\n      const { isTorsionFree } = extraOpts;\n      if (cofactor === _1n) return true;\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      return wnaf.unsafe(this, CURVE_ORDER).is0();\n    }\n\n    clearCofactor(): Point {\n      const { clearCofactor } = extraOpts;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    isSmallOrder(): boolean {\n      // can we use this.clearCofactor()?\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    toBytes(isCompressed = true): Uint8Array {\n      abool(isCompressed, 'isCompressed');\n      this.assertValidity();\n      return encodePoint(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return bytesToHex(this.toBytes(isCompressed));\n    }\n\n    toString() {\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n    }\n\n    // TODO: remove\n    get px(): T {\n      return this.X;\n    }\n    get py(): T {\n      return this.X;\n    }\n    get pz(): T {\n      return this.Z;\n    }\n    toRawBytes(isCompressed = true): Uint8Array {\n      return this.toBytes(isCompressed);\n    }\n    _setWindowSize(windowSize: number) {\n      this.precompute(windowSize);\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      return normalizeZ(Point, points);\n    }\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(_normFnElement(Fn, privateKey));\n    }\n  }\n  const bits = Fn.BITS;\n  const wnaf = new wNAF(Point, extraOpts.endo ? Math.ceil(bits / 2) : bits);\n  Point.BASE.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n  return Point;\n}\n\n/** Methods of ECDSA signature instance. */\nexport interface ECDSASignature {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  addRecoveryBit(recovery: number): ECDSASigRecovered;\n  hasHighS(): boolean;\n  toBytes(format?: string): Uint8Array;\n  toHex(format?: string): string;\n\n  /** @deprecated */\n  assertValidity(): void;\n  /** @deprecated */\n  normalizeS(): ECDSASignature;\n  /** @deprecated use standalone method `curve.recoverPublicKey(sig.toBytes('recovered'), msg)` */\n  recoverPublicKey(msgHash: Hex): WeierstrassPoint<bigint>;\n  /** @deprecated use `.toBytes('compact')` */\n  toCompactRawBytes(): Uint8Array;\n  /** @deprecated use `.toBytes('compact')` */\n  toCompactHex(): string;\n  /** @deprecated use `.toBytes('der')` */\n  toDERRawBytes(): Uint8Array;\n  /** @deprecated use `.toBytes('der')` */\n  toDERHex(): string;\n}\nexport type ECDSASigRecovered = ECDSASignature & {\n  readonly recovery: number;\n};\n/** Methods of ECDSA signature constructor. */\nexport type ECDSASignatureCons = {\n  new (r: bigint, s: bigint, recovery?: number): ECDSASignature;\n  fromBytes(bytes: Uint8Array, format?: ECDSASigFormat): ECDSASignature;\n  fromHex(hex: string, format?: ECDSASigFormat): ECDSASignature;\n\n  /** @deprecated use `.fromBytes(bytes, 'compact')` */\n  fromCompact(hex: Hex): ECDSASignature;\n  /** @deprecated use `.fromBytes(bytes, 'der')` */\n  fromDER(hex: Hex): ECDSASignature;\n};\n\n// Points start with byte 0x02 when y is even; otherwise 0x03\nfunction pprefix(hasEvenY: boolean): Uint8Array {\n  return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(\n  Fp: IField<T>,\n  Z: T\n): (u: T, v: T) => { isValid: boolean; value: T } {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n): (u: T) => { x: T; y: T } {\n  validateField(Fp);\n  const { A, B, Z } = opts;\n  if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\n  if (!Fp.isOdd) throw new Error('Field does not have .isOdd()');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n    x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n\nfunction getWLengths<T>(Fp: IField<T>, Fn: IField<bigint>) {\n  return {\n    secretKey: Fn.BYTES,\n    publicKey: 1 + Fp.BYTES,\n    publicKeyUncompressed: 1 + 2 * Fp.BYTES,\n    publicKeyHasPrefix: true,\n    signature: 2 * Fn.BYTES,\n  };\n}\n\n/**\n * Sometimes users only need getPublicKey, getSharedSecret, and secret key handling.\n * This helper ensures no signature functionality is present. Less code, smaller bundle size.\n */\nexport function ecdh(\n  Point: WeierstrassPointCons<bigint>,\n  ecdhOpts: { randomBytes?: (bytesLength?: number) => Uint8Array } = {}\n): ECDH {\n  const { Fn } = Point;\n  const randomBytes_ = ecdhOpts.randomBytes || randomBytesWeb;\n  const lengths = Object.assign(getWLengths(Point.Fp, Fn), { seed: getMinHashLength(Fn.ORDER) });\n\n  function isValidSecretKey(secretKey: PrivKey) {\n    try {\n      return !!_normFnElement(Fn, secretKey);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  function isValidPublicKey(publicKey: Uint8Array, isCompressed?: boolean): boolean {\n    const { publicKey: comp, publicKeyUncompressed } = lengths;\n    try {\n      const l = publicKey.length;\n      if (isCompressed === true && l !== comp) return false;\n      if (isCompressed === false && l !== publicKeyUncompressed) return false;\n      return !!Point.fromBytes(publicKey);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Produces cryptographically secure secret key from random of size\n   * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n   */\n  function randomSecretKey(seed = randomBytes_(lengths.seed)): Uint8Array {\n    return mapHashToField(abytes(seed, lengths.seed, 'seed'), Fn.ORDER);\n  }\n\n  /**\n   * Computes public key for a secret key. Checks for validity of the secret key.\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(secretKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.BASE.multiply(_normFnElement(Fn, secretKey)).toBytes(isCompressed);\n  }\n\n  function keygen(seed?: Uint8Array) {\n    const secretKey = randomSecretKey(seed);\n    return { secretKey, publicKey: getPublicKey(secretKey) };\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean | undefined {\n    if (typeof item === 'bigint') return false;\n    if (item instanceof Point) return true;\n    const { secretKey, publicKey, publicKeyUncompressed } = lengths;\n    if (Fn.allowedLengths || secretKey === publicKey) return undefined;\n    const l = ensureBytes('key', item).length;\n    return l === publicKey || l === publicKeyUncompressed;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from secret key A and public key B.\n   * Checks: 1) secret key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(secretKeyA: PrivKey, publicKeyB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(secretKeyA) === true) throw new Error('first arg must be private key');\n    if (isProbPub(publicKeyB) === false) throw new Error('second arg must be public key');\n    const s = _normFnElement(Fn, secretKeyA);\n    const b = Point.fromHex(publicKeyB); // checks for being on-curve\n    return b.multiply(s).toBytes(isCompressed);\n  }\n\n  const utils = {\n    isValidSecretKey,\n    isValidPublicKey,\n    randomSecretKey,\n\n    // TODO: remove\n    isValidPrivateKey: isValidSecretKey,\n    randomPrivateKey: randomSecretKey,\n    normPrivateKeyToScalar: (key: PrivKey) => _normFnElement(Fn, key),\n    precompute(windowSize = 8, point = Point.BASE): WeierstrassPoint<bigint> {\n      return point.precompute(windowSize, false);\n    },\n  };\n\n  return Object.freeze({ getPublicKey, getSharedSecret, keygen, Point, utils, lengths });\n}\n\n/**\n * Creates ECDSA signing interface for given elliptic curve `Point` and `hash` function.\n * We need `hash` for 2 features:\n * 1. Message prehash-ing. NOT used if `sign` / `verify` are called with `prehash: false`\n * 2. k generation in `sign`, using HMAC-drbg(hash)\n *\n * ECDSAOpts are only rarely needed.\n *\n * @example\n * ```js\n * const p256_Point = weierstrass(...);\n * const p256_sha256 = ecdsa(p256_Point, sha256);\n * const p256_sha224 = ecdsa(p256_Point, sha224);\n * const p256_sha224_r = ecdsa(p256_Point, sha224, { randomBytes: (length) => { ... } });\n * ```\n */\nexport function ecdsa(\n  Point: WeierstrassPointCons<bigint>,\n  hash: CHash,\n  ecdsaOpts: ECDSAOpts = {}\n): ECDSA {\n  ahash(hash);\n  _validateObject(\n    ecdsaOpts,\n    {},\n    {\n      hmac: 'function',\n      lowS: 'boolean',\n      randomBytes: 'function',\n      bits2int: 'function',\n      bits2int_modN: 'function',\n    }\n  );\n\n  const randomBytes = ecdsaOpts.randomBytes || randomBytesWeb;\n  const hmac: HmacFnSync =\n    ecdsaOpts.hmac ||\n    (((key, ...msgs) => nobleHmac(hash, key, concatBytes(...msgs))) satisfies HmacFnSync);\n\n  const { Fp, Fn } = Point;\n  const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn;\n  const { keygen, getPublicKey, getSharedSecret, utils, lengths } = ecdh(Point, ecdsaOpts);\n  const defaultSigOpts: Required<ECDSASignOpts> = {\n    prehash: false,\n    lowS: typeof ecdsaOpts.lowS === 'boolean' ? ecdsaOpts.lowS : false,\n    format: undefined as any, //'compact' as ECDSASigFormat,\n    extraEntropy: false,\n  };\n  const defaultSigOpts_format = 'compact';\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n  function validateRS(title: string, num: bigint): bigint {\n    if (!Fn.isValidNot0(num))\n      throw new Error(`invalid signature ${title}: out of range 1..Point.Fn.ORDER`);\n    return num;\n  }\n  function validateSigLength(bytes: Uint8Array, format: ECDSASigFormat) {\n    validateSigFormat(format);\n    const size = lengths.signature!;\n    const sizer = format === 'compact' ? size : format === 'recovered' ? size + 1 : undefined;\n    return abytes(bytes, sizer, `${format} signature`);\n  }\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports compact, recovered & DER representations.\n   */\n  class Signature implements ECDSASignature {\n    readonly r: bigint;\n    readonly s: bigint;\n    readonly recovery?: number;\n    constructor(r: bigint, s: bigint, recovery?: number) {\n      this.r = validateRS('r', r); // r in [1..N-1];\n      this.s = validateRS('s', s); // s in [1..N-1];\n      if (recovery != null) this.recovery = recovery;\n      Object.freeze(this);\n    }\n\n    static fromBytes(bytes: Uint8Array, format: ECDSASigFormat = defaultSigOpts_format): Signature {\n      validateSigLength(bytes, format);\n      let recid: number | undefined;\n      if (format === 'der') {\n        const { r, s } = DER.toSig(abytes(bytes));\n        return new Signature(r, s);\n      }\n      if (format === 'recovered') {\n        recid = bytes[0];\n        format = 'compact';\n        bytes = bytes.subarray(1);\n      }\n      const L = Fn.BYTES;\n      const r = bytes.subarray(0, L);\n      const s = bytes.subarray(L, L * 2);\n      return new Signature(Fn.fromBytes(r), Fn.fromBytes(s), recid);\n    }\n\n    static fromHex(hex: string, format?: ECDSASigFormat) {\n      return this.fromBytes(hexToBytes(hex), format);\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(messageHash: Hex): WeierstrassPoint<bigint> {\n      const FIELD_ORDER = Fp.ORDER;\n      const { r, s, recovery: rec } = this;\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n\n      // ECDSA recovery is hard for cofactor > 1 curves.\n      // In sign, `r = q.x mod n`, and here we recover q.x from r.\n      // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\n      // However, for cofactor>1, r+n may not get q.x:\n      // r+n*i would need to be done instead where i is unknown.\n      // To easily get i, we either need to:\n      // a. increase amount of valid recid values (4, 5...); OR\n      // b. prohibit non-prime-order signatures (recid > 1).\n      const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\n      if (hasCofactor && rec > 1) throw new Error('recovery id is ambiguous for h>1 curve');\n\n      const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\n      if (!Fp.isValid(radj)) throw new Error('recovery id 2 or 3 invalid');\n      const x = Fp.toBytes(radj);\n      const R = Point.fromBytes(concatBytes(pprefix((rec & 1) === 0), x));\n      const ir = Fn.inv(radj); // r^-1\n      const h = bits2int_modN(ensureBytes('msgHash', messageHash)); // Truncate hash\n      const u1 = Fn.create(-h * ir); // -hr^-1\n      const u2 = Fn.create(s * ir); // sr^-1\n      // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\n      const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\n      if (Q.is0()) throw new Error('point at infinify');\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    toBytes(format: ECDSASigFormat = defaultSigOpts_format) {\n      validateSigFormat(format);\n      if (format === 'der') return hexToBytes(DER.hexFromSig(this));\n      const r = Fn.toBytes(this.r);\n      const s = Fn.toBytes(this.s);\n      if (format === 'recovered') {\n        if (this.recovery == null) throw new Error('recovery bit must be present');\n        return concatBytes(Uint8Array.of(this.recovery), r, s);\n      }\n      return concatBytes(r, s);\n    }\n\n    toHex(format?: ECDSASigFormat) {\n      return bytesToHex(this.toBytes(format));\n    }\n\n    // TODO: remove\n    assertValidity(): void {}\n    static fromCompact(hex: Hex) {\n      return Signature.fromBytes(ensureBytes('sig', hex), 'compact');\n    }\n    static fromDER(hex: Hex) {\n      return Signature.fromBytes(ensureBytes('sig', hex), 'der');\n    }\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\n    }\n    toDERRawBytes() {\n      return this.toBytes('der');\n    }\n    toDERHex() {\n      return bytesToHex(this.toBytes('der'));\n    }\n    toCompactRawBytes() {\n      return this.toBytes('compact');\n    }\n    toCompactHex() {\n      return bytesToHex(this.toBytes('compact'));\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    ecdsaOpts.bits2int ||\n    function bits2int_def(bytes: Uint8Array): bigint {\n      // Our custom check \"just in case\", for protection against DoS\n      if (bytes.length > 8192) throw new Error('input is too large');\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    ecdsaOpts.bits2int_modN ||\n    function bits2int_modN_def(bytes: Uint8Array): bigint {\n      return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // Pads output with zero as per spec\n  const ORDER_MASK = bitMask(fnBits);\n  /** Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`. */\n  function int2octets(num: bigint): Uint8Array {\n    // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\n    aInRange('num < 2^' + fnBits, num, _0n, ORDER_MASK);\n    return Fn.toBytes(num);\n  }\n\n  function validateMsgAndHash(message: Uint8Array, prehash: boolean) {\n    abytes(message, undefined, 'message');\n    return prehash ? abytes(hash(message), undefined, 'prehashed message') : message;\n  }\n\n  /**\n   * Steps A, D of RFC6979 3.2.\n   * Creates RFC6979 seed; converts msg/privKey to numbers.\n   * Used only in sign, not in verify.\n   *\n   * Warning: we cannot assume here that message has same amount of bytes as curve order,\n   * this will be invalid at least for P521. Also it can be bigger for P224 + SHA256.\n   */\n  function prepSig(message: Uint8Array, privateKey: PrivKey, opts: ECDSASignOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { lowS, prehash, extraEntropy } = validateSigOpts(opts, defaultSigOpts);\n    message = validateMsgAndHash(message, prehash); // RFC6979 3.2 A: h1 = H(m)\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(message);\n    const d = _normFnElement(Fn, privateKey); // validate secret key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (extraEntropy != null && extraEntropy !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      // gen random bytes OR pass as-is\n      const e = extraEntropy === true ? randomBytes(lengths.secretKey) : extraEntropy;\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    // To transform k => Signature:\n    // q = k⋅G\n    // r = q.x mod n\n    // s = k^-1(m + rd) mod n\n    // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n    // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n    // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      // Important: all mod() calls here must be done over N\n      const k = bits2int(kBytes); // mod n, not mod p\n      if (!Fn.isValidNot0(k)) return; // Valid scalars (including k) must be in 1..N-1\n      const ik = Fn.inv(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = k⋅G\n      const r = Fn.create(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = Fn.neg(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n\n  /**\n   * Signs message hash with a secret key.\n   *\n   * ```\n   * sign(m, d) where\n   *   k = rfc6979_hmac_drbg(m, d)\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr) / k mod n\n   * ```\n   */\n  function sign(message: Hex, secretKey: PrivKey, opts: ECDSASignOpts = {}): RecoveredSignature {\n    message = ensureBytes('message', message);\n    const { seed, k2sig } = prepSig(message, secretKey, opts); // Steps A, D of RFC6979 3.2.\n    const drbg = createHmacDrbg<RecoveredSignature>(hash.outputLen, Fn.BYTES, hmac);\n    const sig = drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    return sig;\n  }\n\n  function tryParsingSig(sg: Hex | SignatureLike) {\n    // Try to deduce format\n    let sig: Signature | undefined = undefined;\n    const isHex = typeof sg === 'string' || isBytes(sg);\n    const isObj =\n      !isHex &&\n      sg !== null &&\n      typeof sg === 'object' &&\n      typeof sg.r === 'bigint' &&\n      typeof sg.s === 'bigint';\n    if (!isHex && !isObj)\n      throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n    if (isObj) {\n      sig = new Signature(sg.r, sg.s);\n    } else if (isHex) {\n      try {\n        sig = Signature.fromBytes(ensureBytes('sig', sg), 'der');\n      } catch (derError) {\n        if (!(derError instanceof DER.Err)) throw derError;\n      }\n      if (!sig) {\n        try {\n          sig = Signature.fromBytes(ensureBytes('sig', sg), 'compact');\n        } catch (error) {\n          return false;\n        }\n      }\n    }\n    if (!sig) return false;\n    return sig;\n  }\n\n  /**\n   * Verifies a signature against message and public key.\n   * Rejects lowS signatures by default: see {@link ECDSAVerifyOpts}.\n   * Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   u1 = hs^-1 mod n\n   *   u2 = rs^-1 mod n\n   *   R = u1⋅G + u2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    message: Hex,\n    publicKey: Hex,\n    opts: ECDSAVerifyOpts = {}\n  ): boolean {\n    const { lowS, prehash, format } = validateSigOpts(opts, defaultSigOpts);\n    publicKey = ensureBytes('publicKey', publicKey);\n    message = validateMsgAndHash(ensureBytes('message', message), prehash);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const sig =\n      format === undefined\n        ? tryParsingSig(signature)\n        : Signature.fromBytes(ensureBytes('sig', signature as Hex), format);\n    if (sig === false) return false;\n    try {\n      const P = Point.fromBytes(publicKey);\n      if (lowS && sig.hasHighS()) return false;\n      const { r, s } = sig;\n      const h = bits2int_modN(message); // mod n, not mod p\n      const is = Fn.inv(s); // s^-1 mod n\n      const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\n      const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\n      const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2)); // u1⋅G + u2⋅P\n      if (R.is0()) return false;\n      const v = Fn.create(R.x); // v = r.x mod n\n      return v === r;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function recoverPublicKey(\n    signature: Uint8Array,\n    message: Uint8Array,\n    opts: ECDSARecoverOpts = {}\n  ): Uint8Array {\n    const { prehash } = validateSigOpts(opts, defaultSigOpts);\n    message = validateMsgAndHash(message, prehash);\n    return Signature.fromBytes(signature, 'recovered').recoverPublicKey(message).toBytes();\n  }\n\n  return Object.freeze({\n    keygen,\n    getPublicKey,\n    getSharedSecret,\n    utils,\n    lengths,\n    Point,\n    sign,\n    verify,\n    recoverPublicKey,\n    Signature,\n    hash,\n  });\n}\n\n// TODO: remove everything below\n/** @deprecated use ECDSASignature */\nexport type SignatureType = ECDSASignature;\n/** @deprecated use ECDSASigRecovered */\nexport type RecoveredSignatureType = ECDSASigRecovered;\n/** @deprecated switch to Uint8Array signatures in format 'compact' */\nexport type SignatureLike = { r: bigint; s: bigint };\nexport type ECDSAExtraEntropy = Hex | boolean;\n/** @deprecated use `ECDSAExtraEntropy` */\nexport type Entropy = Hex | boolean;\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts;\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => WeierstrassPoint<T>;\n};\n/** @deprecated use ECDSASignOpts */\nexport type SignOpts = ECDSASignOpts;\n/** @deprecated use ECDSASignOpts */\nexport type VerOpts = ECDSAVerifyOpts;\n\n/** @deprecated use WeierstrassPoint */\nexport type ProjPointType<T> = WeierstrassPoint<T>;\n/** @deprecated use WeierstrassPointCons */\nexport type ProjConstructor<T> = WeierstrassPointCons<T>;\n/** @deprecated use ECDSASignatureCons */\nexport type SignatureConstructor = ECDSASignatureCons;\n\n// TODO: remove\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (\n    c: WeierstrassPointCons<T>,\n    point: WeierstrassPoint<T>,\n    isCompressed: boolean\n  ) => Uint8Array;\n};\n\n// LegacyWeierstrassOpts\nexport type CurvePointsTypeWithLength<T> = Readonly<CurvePointsType<T> & Partial<NLength>>;\n\n// LegacyWeierstrass\nexport type CurvePointsRes<T> = {\n  Point: WeierstrassPointCons<T>;\n\n  /** @deprecated use `Point.CURVE()` */\n  CURVE: CurvePointsType<T>;\n  /** @deprecated use `Point` */\n  ProjectivePoint: WeierstrassPointCons<T>;\n  /** @deprecated use `Point.Fn.fromBytes(privateKey)` */\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  /** @deprecated */\n  weierstrassEquation: (x: T) => T;\n  /** @deprecated use `Point.Fn.isValidNot0(num)` */\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// Aliases to legacy types\n// export type CurveType = LegacyECDSAOpts;\n// export type CurveFn = LegacyECDSA;\n// export type CurvePointsRes<T> = LegacyWeierstrass<T>;\n// export type CurvePointsType<T> = LegacyWeierstrassOpts<T>;\n// export type CurvePointsTypeWithLength<T> = LegacyWeierstrassOpts<T>;\n// export type BasicWCurve<T> = LegacyWeierstrassOpts<T>;\n\n/** @deprecated use `Uint8Array` */\nexport type PubKey = Hex | WeierstrassPoint<bigint>;\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac?: HmacFnSync;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\nexport type CurveFn = {\n  /** @deprecated use `Point.CURVE()` */\n  CURVE: CurvePointsType<bigint>;\n  keygen: ECDSA['keygen'];\n  getPublicKey: ECDSA['getPublicKey'];\n  getSharedSecret: ECDSA['getSharedSecret'];\n  sign: ECDSA['sign'];\n  verify: ECDSA['verify'];\n  Point: WeierstrassPointCons<bigint>;\n  /** @deprecated use `Point` */\n  ProjectivePoint: WeierstrassPointCons<bigint>;\n  Signature: ECDSASignatureCons;\n  utils: ECDSA['utils'];\n  lengths: ECDSA['lengths'];\n};\n/** @deprecated use `weierstrass` in newer releases */\nexport function weierstrassPoints<T>(c: CurvePointsTypeWithLength<T>): CurvePointsRes<T> {\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  return _weierstrass_new_output_to_legacy(c, Point);\n}\nexport type WsPointComposed<T> = {\n  CURVE: WeierstrassOpts<T>;\n  curveOpts: WeierstrassExtraOpts<T>;\n};\nexport type WsComposed = {\n  /** @deprecated use `Point.CURVE()` */\n  CURVE: WeierstrassOpts<bigint>;\n  hash: CHash;\n  curveOpts: WeierstrassExtraOpts<bigint>;\n  ecdsaOpts: ECDSAOpts;\n};\nfunction _weierstrass_legacy_opts_to_new<T>(c: CurvePointsType<T>): WsPointComposed<T> {\n  const CURVE: WeierstrassOpts<T> = {\n    a: c.a,\n    b: c.b,\n    p: c.Fp.ORDER,\n    n: c.n,\n    h: c.h,\n    Gx: c.Gx,\n    Gy: c.Gy,\n  };\n  const Fp = c.Fp;\n  let allowedLengths = c.allowedPrivateKeyLengths\n    ? Array.from(new Set(c.allowedPrivateKeyLengths.map((l) => Math.ceil(l / 2))))\n    : undefined;\n  const Fn = Field(CURVE.n, {\n    BITS: c.nBitLength,\n    allowedLengths: allowedLengths,\n    modFromBytes: c.wrapPrivateKey,\n  });\n  const curveOpts: WeierstrassExtraOpts<T> = {\n    Fp,\n    Fn,\n    allowInfinityPoint: c.allowInfinityPoint,\n    endo: c.endo,\n    isTorsionFree: c.isTorsionFree,\n    clearCofactor: c.clearCofactor,\n    fromBytes: c.fromBytes,\n    toBytes: c.toBytes,\n  };\n  return { CURVE, curveOpts };\n}\nfunction _ecdsa_legacy_opts_to_new(c: CurveType): WsComposed {\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n  const ecdsaOpts: ECDSAOpts = {\n    hmac: c.hmac,\n    randomBytes: c.randomBytes,\n    lowS: c.lowS,\n    bits2int: c.bits2int,\n    bits2int_modN: c.bits2int_modN,\n  };\n  return { CURVE, curveOpts, hash: c.hash, ecdsaOpts };\n}\nexport function _legacyHelperEquat<T>(Fp: IField<T>, a: T, b: T): (x: T) => T {\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x² * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n  }\n  return weierstrassEquation;\n}\nfunction _weierstrass_new_output_to_legacy<T>(\n  c: CurvePointsType<T>,\n  Point: WeierstrassPointCons<T>\n): CurvePointsRes<T> {\n  const { Fp, Fn } = Point;\n  function isWithinCurveOrder(num: bigint): boolean {\n    return inRange(num, _1n, Fn.ORDER);\n  }\n  const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\n  return Object.assign(\n    {},\n    {\n      CURVE: c,\n      Point: Point,\n      ProjectivePoint: Point,\n      normPrivateKeyToScalar: (key: PrivKey) => _normFnElement(Fn, key),\n      weierstrassEquation,\n      isWithinCurveOrder,\n    }\n  );\n}\nfunction _ecdsa_new_output_to_legacy(c: CurveType, _ecdsa: ECDSA): CurveFn {\n  const Point = _ecdsa.Point;\n  return Object.assign({}, _ecdsa, {\n    ProjectivePoint: Point,\n    CURVE: Object.assign({}, c, nLength(Point.Fn.ORDER, Point.Fn.BITS)),\n  });\n}\n\n// _ecdsa_legacy\nexport function weierstrass(c: CurveType): CurveFn {\n  const { CURVE, curveOpts, hash, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  const signs = ecdsa(Point, hash, ecdsaOpts);\n  return _ecdsa_new_output_to_legacy(c, signs);\n}\n", "/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes, type CHash, type Input } from './utils.ts';\n\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    ahash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    clean(pad);\n  }\n  update(buf: Input): this {\n    aexists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    abytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest(): Uint8Array {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  clone(): HMAC<T> {\n    return this._cloneInto();\n  }\n  destroy(): void {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac: {\n  (hash: CHash, key: Input, message: Input): Uint8Array;\n  create(hash: CHash, key: Input): HMAC<any>;\n} = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n", "/**\n * Towered extension fields.\n * Rather than implementing a massive 12th-degree extension directly, it is more efficient\n * to build it up from smaller extensions: a tower of extensions.\n *\n * For BLS12-381, the Fp12 field is implemented as a quadratic (degree two) extension,\n * on top of a cubic (degree three) extension, on top of a quadratic extension of Fp.\n *\n * For more info: \"Pairings for beginners\" by Costello, section 7.3.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitGet, bitLen, concatBytes, notImplemented } from '../utils.ts';\nimport * as mod from './modular.ts';\nimport type { WeierstrassPoint, WeierstrassPointCons } from './weierstrass.ts';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n\n// Fp₂ over complex plane\nexport type BigintTuple = [bigint, bigint];\nexport type Fp = bigint;\n// Finite extension field over irreducible polynominal.\n// Fp(u) / (u² - β) where β = -1\nexport type Fp2 = { c0: bigint; c1: bigint };\nexport type BigintSix = [bigint, bigint, bigint, bigint, bigint, bigint];\nexport type Fp6 = { c0: Fp2; c1: Fp2; c2: Fp2 };\nexport type Fp12 = { c0: Fp6; c1: Fp6 }; // Fp₁₂ = Fp₆² => Fp₂³, Fp₆(w) / (w² - γ) where γ = v\n// prettier-ignore\nexport type BigintTwelve = [\n  bigint, bigint, bigint, bigint, bigint, bigint,\n  bigint, bigint, bigint, bigint, bigint, bigint\n];\n\nexport type Fp2Bls = mod.IField<Fp2> & {\n  Fp: mod.IField<Fp>;\n  frobeniusMap(num: Fp2, power: number): Fp2;\n  fromBigTuple(num: BigintTuple): Fp2;\n  mulByB: (num: Fp2) => Fp2;\n  mulByNonresidue: (num: Fp2) => Fp2;\n  reim: (num: Fp2) => { re: Fp; im: Fp };\n  Fp4Square: (a: Fp2, b: Fp2) => { first: Fp2; second: Fp2 };\n  NONRESIDUE: Fp2;\n};\n\nexport type Fp6Bls = mod.IField<Fp6> & {\n  Fp2: Fp2Bls;\n  frobeniusMap(num: Fp6, power: number): Fp6;\n  fromBigSix: (tuple: BigintSix) => Fp6;\n  mul1(num: Fp6, b1: Fp2): Fp6;\n  mul01(num: Fp6, b0: Fp2, b1: Fp2): Fp6;\n  mulByFp2(lhs: Fp6, rhs: Fp2): Fp6;\n  mulByNonresidue: (num: Fp6) => Fp6;\n};\n\nexport type Fp12Bls = mod.IField<Fp12> & {\n  Fp6: Fp6Bls;\n  frobeniusMap(num: Fp12, power: number): Fp12;\n  fromBigTwelve: (t: BigintTwelve) => Fp12;\n  mul014(num: Fp12, o0: Fp2, o1: Fp2, o4: Fp2): Fp12;\n  mul034(num: Fp12, o0: Fp2, o3: Fp2, o4: Fp2): Fp12;\n  mulByFp2(lhs: Fp12, rhs: Fp2): Fp12;\n  conjugate(num: Fp12): Fp12;\n  finalExponentiate(num: Fp12): Fp12;\n  _cyclotomicSquare(num: Fp12): Fp12;\n  _cyclotomicExp(num: Fp12, n: bigint): Fp12;\n};\n\nfunction calcFrobeniusCoefficients<T>(\n  Fp: mod.IField<T>,\n  nonResidue: T,\n  modulus: bigint,\n  degree: number,\n  num: number = 1,\n  divisor?: number\n) {\n  const _divisor = BigInt(divisor === undefined ? degree : divisor);\n  const towerModulus: any = modulus ** BigInt(degree);\n  const res: T[][] = [];\n  for (let i = 0; i < num; i++) {\n    const a = BigInt(i + 1);\n    const powers: T[] = [];\n    for (let j = 0, qPower = _1n; j < degree; j++) {\n      const power = ((a * qPower - a) / _divisor) % towerModulus;\n      powers.push(Fp.pow(nonResidue, power));\n      qPower *= modulus;\n    }\n    res.push(powers);\n  }\n  return res;\n}\n\n// This works same at least for bls12-381, bn254 and bls12-377\nexport function psiFrobenius(\n  Fp: mod.IField<Fp>,\n  Fp2: Fp2Bls,\n  base: Fp2\n): {\n  psi: (x: Fp2, y: Fp2) => [Fp2, Fp2];\n  psi2: (x: Fp2, y: Fp2) => [Fp2, Fp2];\n  G2psi: (c: WeierstrassPointCons<Fp2>, P: WeierstrassPoint<Fp2>) => WeierstrassPoint<Fp2>;\n  G2psi2: (c: WeierstrassPointCons<Fp2>, P: WeierstrassPoint<Fp2>) => WeierstrassPoint<Fp2>;\n  PSI_X: Fp2;\n  PSI_Y: Fp2;\n  PSI2_X: Fp2;\n  PSI2_Y: Fp2;\n} {\n  // GLV endomorphism Ψ(P)\n  const PSI_X = Fp2.pow(base, (Fp.ORDER - _1n) / _3n); // u^((p-1)/3)\n  const PSI_Y = Fp2.pow(base, (Fp.ORDER - _1n) / _2n); // u^((p-1)/2)\n  function psi(x: Fp2, y: Fp2): [Fp2, Fp2] {\n    // This x10 faster than previous version in bls12-381\n    const x2 = Fp2.mul(Fp2.frobeniusMap(x, 1), PSI_X);\n    const y2 = Fp2.mul(Fp2.frobeniusMap(y, 1), PSI_Y);\n    return [x2, y2];\n  }\n  // Ψ²(P) endomorphism (psi2(x) = psi(psi(x)))\n  const PSI2_X = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _3n); // u^((p^2 - 1)/3)\n  // This equals -1, which causes y to be Fp2.neg(y).\n  // But not sure if there are case when this is not true?\n  const PSI2_Y = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _2n); // u^((p^2 - 1)/3)\n  if (!Fp2.eql(PSI2_Y, Fp2.neg(Fp2.ONE))) throw new Error('psiFrobenius: PSI2_Y!==-1');\n  function psi2(x: Fp2, y: Fp2): [Fp2, Fp2] {\n    return [Fp2.mul(x, PSI2_X), Fp2.neg(y)];\n  }\n  // Map points\n  const mapAffine =\n    <T>(fn: (x: T, y: T) => [T, T]) =>\n    (c: WeierstrassPointCons<T>, P: WeierstrassPoint<T>) => {\n      const affine = P.toAffine();\n      const p = fn(affine.x, affine.y);\n      return c.fromAffine({ x: p[0], y: p[1] });\n    };\n  const G2psi = mapAffine(psi);\n  const G2psi2 = mapAffine(psi2);\n  return { psi, psi2, G2psi, G2psi2, PSI_X, PSI_Y, PSI2_X, PSI2_Y };\n}\n\nexport type Tower12Opts = {\n  ORDER: bigint;\n  X_LEN: number;\n  NONRESIDUE?: Fp;\n  FP2_NONRESIDUE: BigintTuple;\n  Fp2sqrt?: (num: Fp2) => Fp2;\n  Fp2mulByB: (num: Fp2) => Fp2;\n  Fp12finalExponentiate: (num: Fp12) => Fp12;\n};\n\nconst Fp2fromBigTuple = (Fp: mod.IField<bigint>, tuple: BigintTuple | bigint[]) => {\n  if (tuple.length !== 2) throw new Error('invalid tuple');\n  const fps = tuple.map((n) => Fp.create(n)) as BigintTuple;\n  return { c0: fps[0], c1: fps[1] };\n};\n\nclass _Field2 implements mod.IField<Fp2> {\n  readonly ORDER: bigint;\n  readonly BITS: number;\n  readonly BYTES: number;\n  readonly isLE: boolean;\n  readonly MASK = _1n;\n\n  readonly ZERO: Fp2;\n  readonly ONE: Fp2;\n  readonly Fp: mod.IField<bigint>;\n\n  readonly NONRESIDUE: Fp2;\n  readonly mulByB: Tower12Opts['Fp2mulByB'];\n  readonly Fp_NONRESIDUE: bigint;\n  readonly Fp_div2: bigint;\n  readonly FROBENIUS_COEFFICIENTS: Fp[];\n\n  constructor(\n    Fp: mod.IField<bigint>,\n    opts: Partial<{\n      NONRESIDUE: bigint;\n      FP2_NONRESIDUE: BigintTuple;\n      Fp2mulByB: Tower12Opts['Fp2mulByB'];\n    }> = {}\n  ) {\n    const ORDER = Fp.ORDER;\n    const FP2_ORDER = ORDER * ORDER;\n    this.Fp = Fp;\n    this.ORDER = FP2_ORDER;\n    this.BITS = bitLen(FP2_ORDER);\n    this.BYTES = Math.ceil(bitLen(FP2_ORDER) / 8);\n    this.isLE = Fp.isLE;\n    this.ZERO = { c0: Fp.ZERO, c1: Fp.ZERO };\n    this.ONE = { c0: Fp.ONE, c1: Fp.ZERO };\n\n    this.Fp_NONRESIDUE = Fp.create(opts.NONRESIDUE || BigInt(-1));\n    this.Fp_div2 = Fp.div(Fp.ONE, _2n); // 1/2\n    this.NONRESIDUE = Fp2fromBigTuple(Fp, opts.FP2_NONRESIDUE!);\n    // const Fp2Nonresidue = Fp2fromBigTuple(opts.FP2_NONRESIDUE);\n    this.FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp, this.Fp_NONRESIDUE, Fp.ORDER, 2)[0];\n    this.mulByB = opts.Fp2mulByB!;\n    Object.seal(this);\n  }\n  fromBigTuple(tuple: BigintTuple) {\n    return Fp2fromBigTuple(this.Fp, tuple);\n  }\n  create(num: Fp2) {\n    return num;\n  }\n  isValid({ c0, c1 }: Fp2) {\n    function isValidC(num: bigint, ORDER: bigint) {\n      return typeof num === 'bigint' && _0n <= num && num < ORDER;\n    }\n    return isValidC(c0, this.ORDER) && isValidC(c1, this.ORDER);\n  }\n  is0({ c0, c1 }: Fp2) {\n    return this.Fp.is0(c0) && this.Fp.is0(c1);\n  }\n  isValidNot0(num: Fp2) {\n    return !this.is0(num) && this.isValid(num);\n  }\n  eql({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) {\n    return this.Fp.eql(c0, r0) && this.Fp.eql(c1, r1);\n  }\n  neg({ c0, c1 }: Fp2) {\n    return { c0: this.Fp.neg(c0), c1: this.Fp.neg(c1) };\n  }\n  pow(num: Fp2, power: bigint): Fp2 {\n    return mod.FpPow(this, num, power);\n  }\n  invertBatch(nums: Fp2[]): Fp2[] {\n    return mod.FpInvertBatch(this, nums);\n  }\n  // Normalized\n  add(f1: Fp2, f2: Fp2): Fp2 {\n    const { c0, c1 } = f1;\n    const { c0: r0, c1: r1 } = f2;\n    return {\n      c0: this.Fp.add(c0, r0),\n      c1: this.Fp.add(c1, r1),\n    };\n  }\n  sub({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) {\n    return {\n      c0: this.Fp.sub(c0, r0),\n      c1: this.Fp.sub(c1, r1),\n    };\n  }\n  mul({ c0, c1 }: Fp2, rhs: Fp2) {\n    const { Fp } = this;\n    if (typeof rhs === 'bigint') return { c0: Fp.mul(c0, rhs), c1: Fp.mul(c1, rhs) };\n    // (a+bi)(c+di) = (ac−bd) + (ad+bc)i\n    const { c0: r0, c1: r1 } = rhs;\n    let t1 = Fp.mul(c0, r0); // c0 * o0\n    let t2 = Fp.mul(c1, r1); // c1 * o1\n    // (T1 - T2) + ((c0 + c1) * (r0 + r1) - (T1 + T2))*i\n    const o0 = Fp.sub(t1, t2);\n    const o1 = Fp.sub(Fp.mul(Fp.add(c0, c1), Fp.add(r0, r1)), Fp.add(t1, t2));\n    return { c0: o0, c1: o1 };\n  }\n  sqr({ c0, c1 }: Fp2) {\n    const { Fp } = this;\n    const a = Fp.add(c0, c1);\n    const b = Fp.sub(c0, c1);\n    const c = Fp.add(c0, c0);\n    return { c0: Fp.mul(a, b), c1: Fp.mul(c, c1) };\n  }\n  // NonNormalized stuff\n  addN(a: Fp2, b: Fp2): Fp2 {\n    return this.add(a, b);\n  }\n  subN(a: Fp2, b: Fp2): Fp2 {\n    return this.sub(a, b);\n  }\n  mulN(a: Fp2, b: Fp2): Fp2 {\n    return this.mul(a, b);\n  }\n  sqrN(a: Fp2): Fp2 {\n    return this.sqr(a);\n  }\n  // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?\n  div(lhs: Fp2, rhs: Fp2): Fp2 {\n    const { Fp } = this;\n    // @ts-ignore\n    return this.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : this.inv(rhs));\n  }\n  inv({ c0: a, c1: b }: Fp2): Fp2 {\n    // We wish to find the multiplicative inverse of a nonzero\n    // element a + bu in Fp2. We leverage an identity\n    //\n    // (a + bu)(a - bu) = a² + b²\n    //\n    // which holds because u² = -1. This can be rewritten as\n    //\n    // (a + bu)(a - bu)/(a² + b²) = 1\n    //\n    // because a² + b² = 0 has no nonzero solutions for (a, b).\n    // This gives that (a - bu)/(a² + b²) is the inverse\n    // of (a + bu). Importantly, this can be computing using\n    // only a single inversion in Fp.\n    const { Fp } = this;\n    const factor = Fp.inv(Fp.create(a * a + b * b));\n    return { c0: Fp.mul(factor, Fp.create(a)), c1: Fp.mul(factor, Fp.create(-b)) };\n  }\n  sqrt(num: Fp2) {\n    // This is generic for all quadratic extensions (Fp2)\n    const { Fp } = this;\n    const Fp2 = this;\n    const { c0, c1 } = num;\n    if (Fp.is0(c1)) {\n      // if c0 is quadratic residue\n      if (mod.FpLegendre(Fp, c0) === 1) return Fp2.create({ c0: Fp.sqrt(c0), c1: Fp.ZERO });\n      else return Fp2.create({ c0: Fp.ZERO, c1: Fp.sqrt(Fp.div(c0, this.Fp_NONRESIDUE)) });\n    }\n    const a = Fp.sqrt(Fp.sub(Fp.sqr(c0), Fp.mul(Fp.sqr(c1), this.Fp_NONRESIDUE)));\n    let d = Fp.mul(Fp.add(a, c0), this.Fp_div2);\n    const legendre = mod.FpLegendre(Fp, d);\n    // -1, Quadratic non residue\n    if (legendre === -1) d = Fp.sub(d, a);\n    const a0 = Fp.sqrt(d);\n    const candidateSqrt = Fp2.create({ c0: a0, c1: Fp.div(Fp.mul(c1, this.Fp_div2), a0) });\n    if (!Fp2.eql(Fp2.sqr(candidateSqrt), num)) throw new Error('Cannot find square root');\n    // Normalize root: at this point candidateSqrt ** 2 = num, but also -candidateSqrt ** 2 = num\n    const x1 = candidateSqrt;\n    const x2 = Fp2.neg(x1);\n    const { re: re1, im: im1 } = Fp2.reim(x1);\n    const { re: re2, im: im2 } = Fp2.reim(x2);\n    if (im1 > im2 || (im1 === im2 && re1 > re2)) return x1;\n    return x2;\n  }\n  // Same as sgn0_m_eq_2 in RFC 9380\n  isOdd(x: Fp2) {\n    const { re: x0, im: x1 } = this.reim(x);\n    const sign_0 = x0 % _2n;\n    const zero_0 = x0 === _0n;\n    const sign_1 = x1 % _2n;\n    return BigInt(sign_0 || (zero_0 && sign_1)) == _1n;\n  }\n  // Bytes util\n  fromBytes(b: Uint8Array): Fp2 {\n    const { Fp } = this;\n    if (b.length !== this.BYTES) throw new Error('fromBytes invalid length=' + b.length);\n    return { c0: Fp.fromBytes(b.subarray(0, Fp.BYTES)), c1: Fp.fromBytes(b.subarray(Fp.BYTES)) };\n  }\n  toBytes({ c0, c1 }: Fp2) {\n    return concatBytes(this.Fp.toBytes(c0), this.Fp.toBytes(c1));\n  }\n  cmov({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2, c: boolean) {\n    return {\n      c0: this.Fp.cmov(c0, r0, c),\n      c1: this.Fp.cmov(c1, r1, c),\n    };\n  }\n  reim({ c0, c1 }: Fp2) {\n    return { re: c0, im: c1 };\n  }\n  Fp4Square(a: Fp2, b: Fp2): { first: Fp2; second: Fp2 } {\n    const Fp2 = this;\n    const a2 = Fp2.sqr(a);\n    const b2 = Fp2.sqr(b);\n    return {\n      first: Fp2.add(Fp2.mulByNonresidue(b2), a2), // b² * Nonresidue + a²\n      second: Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(a, b)), a2), b2), // (a + b)² - a² - b²\n    };\n  }\n  // multiply by u + 1\n  mulByNonresidue({ c0, c1 }: Fp2) {\n    return this.mul({ c0, c1 }, this.NONRESIDUE);\n  }\n  frobeniusMap({ c0, c1 }: Fp2, power: number): Fp2 {\n    return {\n      c0,\n      c1: this.Fp.mul(c1, this.FROBENIUS_COEFFICIENTS[power % 2]),\n    };\n  }\n}\n\nclass _Field6 implements Fp6Bls {\n  readonly ORDER: bigint;\n  readonly BITS: number;\n  readonly BYTES: number;\n  readonly isLE: boolean;\n  readonly MASK = _1n;\n\n  readonly ZERO: Fp6;\n  readonly ONE: Fp6;\n  readonly Fp2: Fp2Bls;\n  readonly FROBENIUS_COEFFICIENTS_1: Fp2[];\n  readonly FROBENIUS_COEFFICIENTS_2: Fp2[];\n\n  constructor(Fp2: Fp2Bls) {\n    this.Fp2 = Fp2;\n    this.ORDER = Fp2.ORDER; // TODO: unused, but need to verify\n    this.BITS = 3 * Fp2.BITS;\n    this.BYTES = 3 * Fp2.BYTES;\n    this.isLE = Fp2.isLE;\n    this.ZERO = { c0: Fp2.ZERO, c1: Fp2.ZERO, c2: Fp2.ZERO };\n    this.ONE = { c0: Fp2.ONE, c1: Fp2.ZERO, c2: Fp2.ZERO };\n    const { Fp } = Fp2;\n    const frob = calcFrobeniusCoefficients(Fp2, Fp2.NONRESIDUE, Fp.ORDER, 6, 2, 3);\n    this.FROBENIUS_COEFFICIENTS_1 = frob[0];\n    this.FROBENIUS_COEFFICIENTS_2 = frob[1];\n    Object.seal(this);\n  }\n  add({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) {\n    const { Fp2 } = this;\n    return {\n      c0: Fp2.add(c0, r0),\n      c1: Fp2.add(c1, r1),\n      c2: Fp2.add(c2, r2),\n    };\n  }\n  sub({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) {\n    const { Fp2 } = this;\n    return {\n      c0: Fp2.sub(c0, r0),\n      c1: Fp2.sub(c1, r1),\n      c2: Fp2.sub(c2, r2),\n    };\n  }\n  mul({ c0, c1, c2 }: Fp6, rhs: Fp6 | bigint) {\n    const { Fp2 } = this;\n    if (typeof rhs === 'bigint') {\n      return {\n        c0: Fp2.mul(c0, rhs),\n        c1: Fp2.mul(c1, rhs),\n        c2: Fp2.mul(c2, rhs),\n      };\n    }\n    const { c0: r0, c1: r1, c2: r2 } = rhs;\n    const t0 = Fp2.mul(c0, r0); // c0 * o0\n    const t1 = Fp2.mul(c1, r1); // c1 * o1\n    const t2 = Fp2.mul(c2, r2); // c2 * o2\n    return {\n      // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)\n      c0: Fp2.add(\n        t0,\n        Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), Fp2.add(r1, r2)), Fp2.add(t1, t2)))\n      ),\n      // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)\n      c1: Fp2.add(\n        Fp2.sub(Fp2.mul(Fp2.add(c0, c1), Fp2.add(r0, r1)), Fp2.add(t0, t1)),\n        Fp2.mulByNonresidue(t2)\n      ),\n      // T1 + (c0 + c2) * (r0 + r2) - T0 + T2\n      c2: Fp2.sub(Fp2.add(t1, Fp2.mul(Fp2.add(c0, c2), Fp2.add(r0, r2))), Fp2.add(t0, t2)),\n    };\n  }\n  sqr({ c0, c1, c2 }: Fp6) {\n    const { Fp2 } = this;\n    let t0 = Fp2.sqr(c0); // c0²\n    let t1 = Fp2.mul(Fp2.mul(c0, c1), _2n); // 2 * c0 * c1\n    let t3 = Fp2.mul(Fp2.mul(c1, c2), _2n); // 2 * c1 * c2\n    let t4 = Fp2.sqr(c2); // c2²\n    return {\n      c0: Fp2.add(Fp2.mulByNonresidue(t3), t0), // T3 * (u + 1) + T0\n      c1: Fp2.add(Fp2.mulByNonresidue(t4), t1), // T4 * (u + 1) + T1\n      // T1 + (c0 - c1 + c2)² + T3 - T0 - T4\n      c2: Fp2.sub(Fp2.sub(Fp2.add(Fp2.add(t1, Fp2.sqr(Fp2.add(Fp2.sub(c0, c1), c2))), t3), t0), t4),\n    };\n  }\n  addN(a: Fp6, b: Fp6): Fp6 {\n    return this.add(a, b);\n  }\n  subN(a: Fp6, b: Fp6): Fp6 {\n    return this.sub(a, b);\n  }\n  mulN(a: Fp6, b: Fp6): Fp6 {\n    return this.mul(a, b);\n  }\n  sqrN(a: Fp6): Fp6 {\n    return this.sqr(a);\n  }\n\n  create(num: Fp6) {\n    return num;\n  }\n\n  isValid({ c0, c1, c2 }: Fp6) {\n    const { Fp2 } = this;\n    return Fp2.isValid(c0) && Fp2.isValid(c1) && Fp2.isValid(c2);\n  }\n  is0({ c0, c1, c2 }: Fp6) {\n    const { Fp2 } = this;\n    return Fp2.is0(c0) && Fp2.is0(c1) && Fp2.is0(c2);\n  }\n  isValidNot0(num: Fp6) {\n    return !this.is0(num) && this.isValid(num);\n  }\n  neg({ c0, c1, c2 }: Fp6) {\n    const { Fp2 } = this;\n    return { c0: Fp2.neg(c0), c1: Fp2.neg(c1), c2: Fp2.neg(c2) };\n  }\n  eql({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) {\n    const { Fp2 } = this;\n    return Fp2.eql(c0, r0) && Fp2.eql(c1, r1) && Fp2.eql(c2, r2);\n  }\n  sqrt(_: Fp6) {\n    return notImplemented();\n  }\n  // Do we need division by bigint at all? Should be done via order:\n  div(lhs: Fp6, rhs: Fp6) {\n    const { Fp2 } = this;\n    const { Fp } = Fp2;\n    return this.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : this.inv(rhs));\n  }\n  pow(num: Fp6, power: Fp): Fp6 {\n    return mod.FpPow(this, num, power);\n  }\n  invertBatch(nums: Fp6[]): Fp6[] {\n    return mod.FpInvertBatch(this, nums);\n  }\n\n  inv({ c0, c1, c2 }: Fp6) {\n    const { Fp2 } = this;\n    let t0 = Fp2.sub(Fp2.sqr(c0), Fp2.mulByNonresidue(Fp2.mul(c2, c1))); // c0² - c2 * c1 * (u + 1)\n    let t1 = Fp2.sub(Fp2.mulByNonresidue(Fp2.sqr(c2)), Fp2.mul(c0, c1)); // c2² * (u + 1) - c0 * c1\n    let t2 = Fp2.sub(Fp2.sqr(c1), Fp2.mul(c0, c2)); // c1² - c0 * c2\n    // 1/(((c2 * T1 + c1 * T2) * v) + c0 * T0)\n    let t4 = Fp2.inv(\n      Fp2.add(Fp2.mulByNonresidue(Fp2.add(Fp2.mul(c2, t1), Fp2.mul(c1, t2))), Fp2.mul(c0, t0))\n    );\n    return { c0: Fp2.mul(t4, t0), c1: Fp2.mul(t4, t1), c2: Fp2.mul(t4, t2) };\n  }\n  // Bytes utils\n  fromBytes(b: Uint8Array): Fp6 {\n    const { Fp2 } = this;\n    if (b.length !== this.BYTES) throw new Error('fromBytes invalid length=' + b.length);\n    const B2 = Fp2.BYTES;\n    return {\n      c0: Fp2.fromBytes(b.subarray(0, B2)),\n      c1: Fp2.fromBytes(b.subarray(B2, B2 * 2)),\n      c2: Fp2.fromBytes(b.subarray(2 * B2)),\n    };\n  }\n  toBytes({ c0, c1, c2 }: Fp6): Uint8Array {\n    const { Fp2 } = this;\n    return concatBytes(Fp2.toBytes(c0), Fp2.toBytes(c1), Fp2.toBytes(c2));\n  }\n  cmov({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6, c: boolean) {\n    const { Fp2 } = this;\n    return {\n      c0: Fp2.cmov(c0, r0, c),\n      c1: Fp2.cmov(c1, r1, c),\n      c2: Fp2.cmov(c2, r2, c),\n    };\n  }\n  fromBigSix(t: BigintSix): Fp6 {\n    const { Fp2 } = this;\n    if (!Array.isArray(t) || t.length !== 6) throw new Error('invalid Fp6 usage');\n    return {\n      c0: Fp2.fromBigTuple(t.slice(0, 2) as BigintTuple),\n      c1: Fp2.fromBigTuple(t.slice(2, 4) as BigintTuple),\n      c2: Fp2.fromBigTuple(t.slice(4, 6) as BigintTuple),\n    };\n  }\n  frobeniusMap({ c0, c1, c2 }: Fp6, power: number) {\n    const { Fp2 } = this;\n    return {\n      c0: Fp2.frobeniusMap(c0, power),\n      c1: Fp2.mul(Fp2.frobeniusMap(c1, power), this.FROBENIUS_COEFFICIENTS_1[power % 6]),\n      c2: Fp2.mul(Fp2.frobeniusMap(c2, power), this.FROBENIUS_COEFFICIENTS_2[power % 6]),\n    };\n  }\n  mulByFp2({ c0, c1, c2 }: Fp6, rhs: Fp2): Fp6 {\n    const { Fp2 } = this;\n    return {\n      c0: Fp2.mul(c0, rhs),\n      c1: Fp2.mul(c1, rhs),\n      c2: Fp2.mul(c2, rhs),\n    };\n  }\n  mulByNonresidue({ c0, c1, c2 }: Fp6) {\n    const { Fp2 } = this;\n    return { c0: Fp2.mulByNonresidue(c2), c1: c0, c2: c1 };\n  }\n  // Sparse multiplication\n  mul1({ c0, c1, c2 }: Fp6, b1: Fp2): Fp6 {\n    const { Fp2 } = this;\n    return {\n      c0: Fp2.mulByNonresidue(Fp2.mul(c2, b1)),\n      c1: Fp2.mul(c0, b1),\n      c2: Fp2.mul(c1, b1),\n    };\n  }\n  // Sparse multiplication\n  mul01({ c0, c1, c2 }: Fp6, b0: Fp2, b1: Fp2): Fp6 {\n    const { Fp2 } = this;\n    let t0 = Fp2.mul(c0, b0); // c0 * b0\n    let t1 = Fp2.mul(c1, b1); // c1 * b1\n    return {\n      // ((c1 + c2) * b1 - T1) * (u + 1) + T0\n      c0: Fp2.add(Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), b1), t1)), t0),\n      // (b0 + b1) * (c0 + c1) - T0 - T1\n      c1: Fp2.sub(Fp2.sub(Fp2.mul(Fp2.add(b0, b1), Fp2.add(c0, c1)), t0), t1),\n      // (c0 + c2) * b0 - T0 + T1\n      c2: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c2), b0), t0), t1),\n    };\n  }\n}\n\nclass _Field12 implements Fp12Bls {\n  readonly ORDER: bigint;\n  readonly BITS: number;\n  readonly BYTES: number;\n  readonly isLE: boolean;\n  readonly MASK = _1n;\n\n  readonly ZERO: Fp12;\n  readonly ONE: Fp12;\n\n  readonly Fp6: Fp6Bls;\n  readonly FROBENIUS_COEFFICIENTS: Fp2[];\n  readonly X_LEN: number;\n  readonly finalExponentiate: Tower12Opts['Fp12finalExponentiate'];\n\n  constructor(Fp6: Fp6Bls, opts: Tower12Opts) {\n    const { Fp2 } = Fp6;\n    const { Fp } = Fp2;\n    this.Fp6 = Fp6;\n\n    this.ORDER = Fp2.ORDER; // TODO: verify if it's unuesd\n    this.BITS = 2 * Fp6.BITS;\n    this.BYTES = 2 * Fp6.BYTES;\n    this.isLE = Fp6.isLE;\n    this.ZERO = { c0: Fp6.ZERO, c1: Fp6.ZERO };\n    this.ONE = { c0: Fp6.ONE, c1: Fp6.ZERO };\n\n    this.FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(\n      Fp2,\n      Fp2.NONRESIDUE,\n      Fp.ORDER,\n      12,\n      1,\n      6\n    )[0];\n    this.X_LEN = opts.X_LEN;\n    this.finalExponentiate = opts.Fp12finalExponentiate;\n  }\n  create(num: Fp12) {\n    return num;\n  }\n  isValid({ c0, c1 }: Fp12) {\n    const { Fp6 } = this;\n    return Fp6.isValid(c0) && Fp6.isValid(c1);\n  }\n  is0({ c0, c1 }: Fp12) {\n    const { Fp6 } = this;\n    return Fp6.is0(c0) && Fp6.is0(c1);\n  }\n  isValidNot0(num: Fp12) {\n    return !this.is0(num) && this.isValid(num);\n  }\n  neg({ c0, c1 }: Fp12) {\n    const { Fp6 } = this;\n    return { c0: Fp6.neg(c0), c1: Fp6.neg(c1) };\n  }\n  eql({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) {\n    const { Fp6 } = this;\n    return Fp6.eql(c0, r0) && Fp6.eql(c1, r1);\n  }\n  sqrt(_: any): any {\n    notImplemented();\n  }\n  inv({ c0, c1 }: Fp12) {\n    const { Fp6 } = this;\n    let t = Fp6.inv(Fp6.sub(Fp6.sqr(c0), Fp6.mulByNonresidue(Fp6.sqr(c1)))); // 1 / (c0² - c1² * v)\n    return { c0: Fp6.mul(c0, t), c1: Fp6.neg(Fp6.mul(c1, t)) }; // ((C0 * T) * T) + (-C1 * T) * w\n  }\n  div(lhs: Fp12, rhs: Fp12) {\n    const { Fp6 } = this;\n    const { Fp2 } = Fp6;\n    const { Fp } = Fp2;\n    return this.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : this.inv(rhs));\n  }\n  pow(num: Fp12, power: bigint): Fp12 {\n    return mod.FpPow(this, num, power);\n  }\n  invertBatch(nums: Fp12[]): Fp12[] {\n    return mod.FpInvertBatch(this, nums);\n  }\n\n  // Normalized\n  add({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) {\n    const { Fp6 } = this;\n    return {\n      c0: Fp6.add(c0, r0),\n      c1: Fp6.add(c1, r1),\n    };\n  }\n  sub({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) {\n    const { Fp6 } = this;\n    return {\n      c0: Fp6.sub(c0, r0),\n      c1: Fp6.sub(c1, r1),\n    };\n  }\n  mul({ c0, c1 }: Fp12, rhs: Fp12 | bigint) {\n    const { Fp6 } = this;\n    if (typeof rhs === 'bigint') return { c0: Fp6.mul(c0, rhs), c1: Fp6.mul(c1, rhs) };\n    let { c0: r0, c1: r1 } = rhs;\n    let t1 = Fp6.mul(c0, r0); // c0 * r0\n    let t2 = Fp6.mul(c1, r1); // c1 * r1\n    return {\n      c0: Fp6.add(t1, Fp6.mulByNonresidue(t2)), // T1 + T2 * v\n      // (c0 + c1) * (r0 + r1) - (T1 + T2)\n      c1: Fp6.sub(Fp6.mul(Fp6.add(c0, c1), Fp6.add(r0, r1)), Fp6.add(t1, t2)),\n    };\n  }\n  sqr({ c0, c1 }: Fp12) {\n    const { Fp6 } = this;\n    let ab = Fp6.mul(c0, c1); // c0 * c1\n    return {\n      // (c1 * v + c0) * (c0 + c1) - AB - AB * v\n      c0: Fp6.sub(\n        Fp6.sub(Fp6.mul(Fp6.add(Fp6.mulByNonresidue(c1), c0), Fp6.add(c0, c1)), ab),\n        Fp6.mulByNonresidue(ab)\n      ),\n      c1: Fp6.add(ab, ab),\n    }; // AB + AB\n  }\n  // NonNormalized stuff\n  addN(a: Fp12, b: Fp12): Fp12 {\n    return this.add(a, b);\n  }\n  subN(a: Fp12, b: Fp12): Fp12 {\n    return this.sub(a, b);\n  }\n  mulN(a: Fp12, b: Fp12): Fp12 {\n    return this.mul(a, b);\n  }\n  sqrN(a: Fp12): Fp12 {\n    return this.sqr(a);\n  }\n\n  // Bytes utils\n  fromBytes(b: Uint8Array): Fp12 {\n    const { Fp6 } = this;\n    if (b.length !== this.BYTES) throw new Error('fromBytes invalid length=' + b.length);\n    return {\n      c0: Fp6.fromBytes(b.subarray(0, Fp6.BYTES)),\n      c1: Fp6.fromBytes(b.subarray(Fp6.BYTES)),\n    };\n  }\n  toBytes({ c0, c1 }: Fp12): Uint8Array {\n    const { Fp6 } = this;\n    return concatBytes(Fp6.toBytes(c0), Fp6.toBytes(c1));\n  }\n  cmov({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12, c: boolean) {\n    const { Fp6 } = this;\n    return {\n      c0: Fp6.cmov(c0, r0, c),\n      c1: Fp6.cmov(c1, r1, c),\n    };\n  }\n  // Utils\n  // toString() {\n  //   return '' + 'Fp12(' + this.c0 + this.c1 + '* w');\n  // },\n  // fromTuple(c: [Fp6, Fp6]) {\n  //   return new Fp12(...c);\n  // }\n  fromBigTwelve(t: BigintTwelve): Fp12 {\n    const { Fp6 } = this;\n    return {\n      c0: Fp6.fromBigSix(t.slice(0, 6) as BigintSix),\n      c1: Fp6.fromBigSix(t.slice(6, 12) as BigintSix),\n    };\n  }\n  // Raises to q**i -th power\n  frobeniusMap(lhs: Fp12, power: number) {\n    const { Fp6 } = this;\n    const { Fp2 } = Fp6;\n    const { c0, c1, c2 } = Fp6.frobeniusMap(lhs.c1, power);\n    const coeff = this.FROBENIUS_COEFFICIENTS[power % 12];\n    return {\n      c0: Fp6.frobeniusMap(lhs.c0, power),\n      c1: Fp6.create({\n        c0: Fp2.mul(c0, coeff),\n        c1: Fp2.mul(c1, coeff),\n        c2: Fp2.mul(c2, coeff),\n      }),\n    };\n  }\n  mulByFp2({ c0, c1 }: Fp12, rhs: Fp2): Fp12 {\n    const { Fp6 } = this;\n    return {\n      c0: Fp6.mulByFp2(c0, rhs),\n      c1: Fp6.mulByFp2(c1, rhs),\n    };\n  }\n  conjugate({ c0, c1 }: Fp12): Fp12 {\n    return { c0, c1: this.Fp6.neg(c1) };\n  }\n  // Sparse multiplication\n  mul014({ c0, c1 }: Fp12, o0: Fp2, o1: Fp2, o4: Fp2) {\n    const { Fp6 } = this;\n    const { Fp2 } = Fp6;\n    let t0 = Fp6.mul01(c0, o0, o1);\n    let t1 = Fp6.mul1(c1, o4);\n    return {\n      c0: Fp6.add(Fp6.mulByNonresidue(t1), t0), // T1 * v + T0\n      // (c1 + c0) * [o0, o1+o4] - T0 - T1\n      c1: Fp6.sub(Fp6.sub(Fp6.mul01(Fp6.add(c1, c0), o0, Fp2.add(o1, o4)), t0), t1),\n    };\n  }\n  mul034({ c0, c1 }: Fp12, o0: Fp2, o3: Fp2, o4: Fp2) {\n    const { Fp6 } = this;\n    const { Fp2 } = Fp6;\n    const a = Fp6.create({\n      c0: Fp2.mul(c0.c0, o0),\n      c1: Fp2.mul(c0.c1, o0),\n      c2: Fp2.mul(c0.c2, o0),\n    });\n    const b = Fp6.mul01(c1, o3, o4);\n    const e = Fp6.mul01(Fp6.add(c0, c1), Fp2.add(o0, o3), o4);\n    return {\n      c0: Fp6.add(Fp6.mulByNonresidue(b), a),\n      c1: Fp6.sub(e, Fp6.add(a, b)),\n    };\n  }\n\n  // A cyclotomic group is a subgroup of Fp^n defined by\n  //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\n  // The result of any pairing is in a cyclotomic subgroup\n  // https://eprint.iacr.org/2009/565.pdf\n  // https://eprint.iacr.org/2010/354.pdf\n  _cyclotomicSquare({ c0, c1 }: Fp12): Fp12 {\n    const { Fp6 } = this;\n    const { Fp2 } = Fp6;\n    const { c0: c0c0, c1: c0c1, c2: c0c2 } = c0;\n    const { c0: c1c0, c1: c1c1, c2: c1c2 } = c1;\n    const { first: t3, second: t4 } = Fp2.Fp4Square(c0c0, c1c1);\n    const { first: t5, second: t6 } = Fp2.Fp4Square(c1c0, c0c2);\n    const { first: t7, second: t8 } = Fp2.Fp4Square(c0c1, c1c2);\n    const t9 = Fp2.mulByNonresidue(t8); // T8 * (u + 1)\n    return {\n      c0: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.sub(t3, c0c0), _2n), t3), // 2 * (T3 - c0c0)  + T3\n        c1: Fp2.add(Fp2.mul(Fp2.sub(t5, c0c1), _2n), t5), // 2 * (T5 - c0c1)  + T5\n        c2: Fp2.add(Fp2.mul(Fp2.sub(t7, c0c2), _2n), t7),\n      }), // 2 * (T7 - c0c2)  + T7\n      c1: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.add(t9, c1c0), _2n), t9), // 2 * (T9 + c1c0) + T9\n        c1: Fp2.add(Fp2.mul(Fp2.add(t4, c1c1), _2n), t4), // 2 * (T4 + c1c1) + T4\n        c2: Fp2.add(Fp2.mul(Fp2.add(t6, c1c2), _2n), t6),\n      }),\n    }; // 2 * (T6 + c1c2) + T6\n  }\n  // https://eprint.iacr.org/2009/565.pdf\n  _cyclotomicExp(num: Fp12, n: bigint): Fp12 {\n    let z = this.ONE;\n    for (let i = this.X_LEN - 1; i >= 0; i--) {\n      z = this._cyclotomicSquare(z);\n      if (bitGet(n, i)) z = this.mul(z, num);\n    }\n    return z;\n  }\n}\n\nexport function tower12(opts: Tower12Opts): {\n  Fp: Readonly<mod.IField<bigint> & Required<Pick<mod.IField<bigint>, 'isOdd'>>>;\n  Fp2: Fp2Bls;\n  Fp6: Fp6Bls;\n  Fp12: Fp12Bls;\n} {\n  const Fp = mod.Field(opts.ORDER);\n  const Fp2 = new _Field2(Fp, opts);\n  const Fp6 = new _Field6(Fp2);\n  const Fp12 = new _Field12(Fp6, opts);\n  return { Fp, Fp2, Fp6, Fp12 };\n}\n", "import { PipeArrayBuffer, lebDecode } from '@dfinity/candid';\n\nconst MILLISECOND_TO_NANOSECONDS = BigInt(1_000_000);\n\nexport const decodeLeb128 = (buf: Uint8Array): bigint => {\n  return lebDecode(new PipeArrayBuffer(buf));\n};\n\n// time is a LEB128-encoded Nat\nexport const decodeTime = (buf: Uint8Array): Date => {\n  const timestampNs = decodeLeb128(buf);\n  const timestampMs = timestampNs / MILLISECOND_TO_NANOSECONDS;\n  return new Date(Number(timestampMs));\n};\n", "/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha2.js';\nimport { abytes, concatBytes, utf8ToBytes } from '@noble/hashes/utils.js';\nimport { pippenger, type AffinePoint } from './abstract/curve.ts';\nimport {\n  PrimeEdwardsPoint,\n  twistedEdwards,\n  type CurveFn,\n  type EdwardsOpts,\n  type EdwardsPoint,\n} from './abstract/edwards.ts';\nimport {\n  _DST_scalar,\n  createHasher,\n  expand_message_xmd,\n  type H2CHasher,\n  type H2CHasherBase,\n  type H2CMethod,\n  type htfBasicOpts,\n} from './abstract/hash-to-curve.ts';\nimport {\n  Field,\n  FpInvertBatch,\n  FpSqrtEven,\n  isNegativeLE,\n  mod,\n  pow2,\n  type IField,\n} from './abstract/modular.ts';\nimport { montgomery, type MontgomeryECDH as XCurveFn } from './abstract/montgomery.ts';\nimport { bytesToNumberLE, ensureBytes, equalBytes, type Hex } from './utils.ts';\n\n// prettier-ignore\nconst _0n = /* @__PURE__ */ BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _5n = BigInt(5), _8n = BigInt(8);\n\n// P = 2n**255n-19n\nconst ed25519_CURVE_p = BigInt(\n  '0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed'\n);\n\n// N = 2n**252n + 27742317777372353535851937790883648493n\n// a = Fp.create(BigInt(-1))\n// d = -121665/121666 a.k.a. Fp.neg(121665 * Fp.inv(121666))\nconst ed25519_CURVE: EdwardsOpts = /* @__PURE__ */ (() => ({\n  p: ed25519_CURVE_p,\n  n: BigInt('0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed'),\n  h: _8n,\n  a: BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec'),\n  d: BigInt('0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3'),\n  Gx: BigInt('0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a'),\n  Gy: BigInt('0x6666666666666666666666666666666666666666666666666666666666666658'),\n}))();\n\nfunction ed25519_pow_2_252_3(x: bigint) {\n  // prettier-ignore\n  const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n  const P = ed25519_CURVE_p;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\n\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n\n// √(-1) aka √(a) aka 2^((p-1)/4)\n// Fp.sqrt(Fp.neg(1))\nconst ED25519_SQRT_M1 = /* @__PURE__ */ BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ed25519_CURVE_p;\n  const v3 = mod(v * v * v, P); // v³\n  const v7 = mod(v3 * v3 * v, P); // v⁷\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx²\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\nconst Fp = /* @__PURE__ */ (() => Field(ed25519_CURVE.p, { isLE: true }))();\nconst Fn = /* @__PURE__ */ (() => Field(ed25519_CURVE.n, { isLE: true }))();\n\nconst ed25519Defaults = /* @__PURE__ */ (() => ({\n  ...ed25519_CURVE,\n  Fp,\n  hash: sha512,\n  adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/√v\n  uvRatio,\n}))();\n\n/**\n * ed25519 curve with EdDSA signatures.\n * @example\n * import { ed25519 } from '@noble/curves/ed25519';\n * const { secretKey, publicKey } = ed25519.keygen();\n * const msg = new TextEncoder().encode('hello');\n * const sig = ed25519.sign(msg, priv);\n * ed25519.verify(sig, msg, pub); // Default mode: follows ZIP215\n * ed25519.verify(sig, msg, pub, { zip215: false }); // RFC8032 / FIPS 186-5\n */\nexport const ed25519: CurveFn = /* @__PURE__ */ (() => twistedEdwards(ed25519Defaults))();\n\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\n\n/** Context of ed25519. Uses context for domain separation. */\nexport const ed25519ctx: CurveFn = /* @__PURE__ */ (() =>\n  twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n  }))();\n\n/** Prehashed version of ed25519. Accepts already-hashed messages in sign() and verify(). */\nexport const ed25519ph: CurveFn = /* @__PURE__ */ (() =>\n  twistedEdwards(\n    Object.assign({}, ed25519Defaults, {\n      domain: ed25519_domain,\n      prehash: sha512,\n    })\n  ))();\n\n/**\n * ECDH using curve25519 aka x25519.\n * @example\n * import { x25519 } from '@noble/curves/ed25519';\n * const priv = 'a546e36bf0527c9d3b16154b82465edd62144c0ac1fc5a18506a2244ba449ac4';\n * const pub = 'e6db6867583030db3594c1a424b15f7c726624ec26b3353b10a903a6d0ab1c4c';\n * x25519.getSharedSecret(priv, pub) === x25519.scalarMult(priv, pub); // aliases\n * x25519.getPublicKey(priv) === x25519.scalarMultBase(priv);\n * x25519.getPublicKey(x25519.utils.randomSecretKey());\n */\nexport const x25519: XCurveFn = /* @__PURE__ */ (() => {\n  const P = Fp.ORDER;\n  return montgomery({\n    P,\n    type: 'x25519',\n    powPminus2: (x: bigint): bigint => {\n      // x^(p-2) aka x^(2^255-21)\n      const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n      return mod(pow2(pow_p_5_8, _3n, P) * b2, P);\n    },\n    adjustScalarBytes,\n  });\n})();\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\nconst ELL2_C1 = /* @__PURE__ */ (() => (ed25519_CURVE_p + _3n) / _8n)(); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = /* @__PURE__ */ (() => Fp.pow(_2n, ELL2_C1))(); // 2. c2 = 2^c1\nconst ELL2_C3 = /* @__PURE__ */ (() => Fp.sqrt(Fp.neg(Fp.ONE)))(); // 3. c3 = sqrt(-1)\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  const ELL2_C4 = (ed25519_CURVE_p - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic\n  const ELL2_J = BigInt(486662);\n\n  let tv1 = Fp.sqr(u);          //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);     //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);         //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J);//  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);        //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);            //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);            //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1);    //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);            //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2);    //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);             //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1);    //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd!(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = /* @__PURE__ */ (() => FpSqrtEven(Fp, Fp.neg(BigInt(486664))))(); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n  const [xd_inv, yd_inv] = FpInvertBatch(Fp, [xd, yd], true); // batch division\n  return { x: Fp.mul(xn, xd_inv), y: Fp.mul(yn, yd_inv) }; //  13. return (xn, xd, yn, yd)\n}\n\n/** Hashing to ed25519 points / field. RFC 9380 methods. */\nexport const ed25519_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(\n    ed25519.Point,\n    (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n    {\n      DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n      encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n      p: ed25519_CURVE_p,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  ))();\n\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = /* @__PURE__ */ BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = /* @__PURE__ */ BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d²\nconst ONE_MINUS_D_SQ = /* @__PURE__ */ BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)²\nconst D_MINUS_ONE_SQ = /* @__PURE__ */ BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/√(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = /* @__PURE__ */ BigInt(\n  '0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n);\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.Point.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = EdwardsPoint;\n\n/**\n * Computes Elligator map for Ristretto255.\n * Described in [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#appendix-B) and on\n * the [website](https://ristretto.group/formulas/elligator.html).\n */\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519_CURVE;\n  const P = ed25519_CURVE_p;\n  const mod = (n: bigint) => Fp.create(n);\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.Point(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\nfunction ristretto255_map(bytes: Uint8Array): _RistrettoPoint {\n  abytes(bytes, 64);\n  const r1 = bytes255ToNumberLE(bytes.subarray(0, 32));\n  const R1 = calcElligatorRistrettoMap(r1);\n  const r2 = bytes255ToNumberLE(bytes.subarray(32, 64));\n  const R2 = calcElligatorRistrettoMap(r2);\n  return new _RistrettoPoint(R1.add(R2));\n}\n\n/**\n * Wrapper over Edwards Point for ristretto255.\n *\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * See [RFC9496](https://www.rfc-editor.org/rfc/rfc9496).\n */\nclass _RistrettoPoint extends PrimeEdwardsPoint<_RistrettoPoint> {\n  // Do NOT change syntax: the following gymnastics is done,\n  // because typescript strips comments, which makes bundlers disable tree-shaking.\n  // prettier-ignore\n  static BASE: _RistrettoPoint =\n    /* @__PURE__ */ (() => new _RistrettoPoint(ed25519.Point.BASE))();\n  // prettier-ignore\n  static ZERO: _RistrettoPoint =\n    /* @__PURE__ */ (() => new _RistrettoPoint(ed25519.Point.ZERO))();\n  // prettier-ignore\n  static Fp: IField<bigint> =\n    /* @__PURE__ */ (() => Fp)();\n  // prettier-ignore\n  static Fn: IField<bigint> =\n    /* @__PURE__ */ (() => Fn)();\n\n  constructor(ep: ExtendedPoint) {\n    super(ep);\n  }\n\n  static fromAffine(ap: AffinePoint<bigint>): _RistrettoPoint {\n    return new _RistrettoPoint(ed25519.Point.fromAffine(ap));\n  }\n\n  protected assertSame(other: _RistrettoPoint): void {\n    if (!(other instanceof _RistrettoPoint)) throw new Error('RistrettoPoint expected');\n  }\n\n  protected init(ep: EdwardsPoint): _RistrettoPoint {\n    return new _RistrettoPoint(ep);\n  }\n\n  /** @deprecated use `import { ristretto255_hasher } from '@noble/curves/ed25519.js';` */\n  static hashToCurve(hex: Hex): _RistrettoPoint {\n    return ristretto255_map(ensureBytes('ristrettoHash', hex, 64));\n  }\n\n  static fromBytes(bytes: Uint8Array): _RistrettoPoint {\n    abytes(bytes, 32);\n    const { a, d } = ed25519_CURVE;\n    const P = ed25519_CURVE_p;\n    const mod = (n: bigint) => Fp.create(n);\n    const s = bytes255ToNumberLE(bytes);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(Fp.toBytes(s), bytes) || isNegativeLE(s, P))\n      throw new Error('invalid ristretto255 encoding 1');\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n)\n      throw new Error('invalid ristretto255 encoding 2');\n    return new _RistrettoPoint(new ed25519.Point(x, y, _1n, t));\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-decode).\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): _RistrettoPoint {\n    return _RistrettoPoint.fromBytes(ensureBytes('ristrettoHex', hex, 32));\n  }\n\n  static msm(points: _RistrettoPoint[], scalars: bigint[]): _RistrettoPoint {\n    return pippenger(_RistrettoPoint, ed25519.Point.Fn, points, scalars);\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-encode).\n   */\n  toBytes(): Uint8Array {\n    let { X, Y, Z, T } = this.ep;\n    const P = ed25519_CURVE_p;\n    const mod = (n: bigint) => Fp.create(n);\n    const u1 = mod(mod(Z + Y) * mod(Z - Y)); // 1\n    const u2 = mod(X * Y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * T); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(T * zInv, P)) {\n      let _x = mod(Y * SQRT_M1);\n      let _y = mod(X * SQRT_M1);\n      X = _x;\n      Y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(X * zInv, P)) Y = mod(-Y); // 9\n    let s = mod((Z - Y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return Fp.toBytes(s); // 11\n  }\n\n  /**\n   * Compares two Ristretto points.\n   * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-equals).\n   */\n  equals(other: _RistrettoPoint): boolean {\n    this.assertSame(other);\n    const { X: X1, Y: Y1 } = this.ep;\n    const { X: X2, Y: Y2 } = other.ep;\n    const mod = (n: bigint) => Fp.create(n);\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  is0(): boolean {\n    return this.equals(_RistrettoPoint.ZERO);\n  }\n}\n\nexport const ristretto255: {\n  Point: typeof _RistrettoPoint;\n} = { Point: _RistrettoPoint };\n\n/** Hashing to ristretto255 points / field. RFC 9380 methods. */\nexport const ristretto255_hasher: H2CHasherBase<bigint> = {\n  hashToCurve(msg: Uint8Array, options?: htfBasicOpts): _RistrettoPoint {\n    const DST = options?.DST || 'ristretto255_XMD:SHA-512_R255MAP_RO_';\n    const xmd = expand_message_xmd(msg, DST, 64, sha512);\n    return ristretto255_map(xmd);\n  },\n  hashToScalar(msg: Uint8Array, options: htfBasicOpts = { DST: _DST_scalar }) {\n    const xmd = expand_message_xmd(msg, options.DST, 64, sha512);\n    return Fn.create(bytesToNumberLE(xmd));\n  },\n};\n\n// export const ristretto255_oprf: OPRF = createORPF({\n//   name: 'ristretto255-SHA512',\n//   Point: RistrettoPoint,\n//   hash: sha512,\n//   hashToGroup: ristretto255_hasher.hashToCurve,\n//   hashToScalar: ristretto255_hasher.hashToScalar,\n// });\n\n/**\n * Weird / bogus points, useful for debugging.\n * All 8 ed25519 points of 8-torsion subgroup can be generated from the point\n * T = `26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05`.\n * ⟨T⟩ = { O, T, 2T, 3T, 4T, 5T, 6T, 7T }\n */\nexport const ED25519_TORSION_SUBGROUP: string[] = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\n/** @deprecated use `ed25519.utils.toMontgomery` */\nexport function edwardsToMontgomeryPub(edwardsPub: Hex): Uint8Array {\n  return ed25519.utils.toMontgomery(ensureBytes('pub', edwardsPub));\n}\n/** @deprecated use `ed25519.utils.toMontgomery` */\nexport const edwardsToMontgomery: typeof edwardsToMontgomeryPub = edwardsToMontgomeryPub;\n\n/** @deprecated use `ed25519.utils.toMontgomerySecret` */\nexport function edwardsToMontgomeryPriv(edwardsPriv: Uint8Array): Uint8Array {\n  return ed25519.utils.toMontgomerySecret(ensureBytes('pub', edwardsPriv));\n}\n\n/** @deprecated use `ristretto255.Point` */\nexport const RistrettoPoint: typeof _RistrettoPoint = _RistrettoPoint;\n/** @deprecated use `import { ed25519_hasher } from '@noble/curves/ed25519.js';` */\nexport const hashToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() => ed25519_hasher.hashToCurve)();\n/** @deprecated use `import { ed25519_hasher } from '@noble/curves/ed25519.js';` */\nexport const encodeToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\n  ed25519_hasher.encodeToCurve)();\ntype RistHasher = (msg: Uint8Array, options: htfBasicOpts) => _RistrettoPoint;\n/** @deprecated use `import { ristretto255_hasher } from '@noble/curves/ed25519.js';` */\nexport const hashToRistretto255: RistHasher = /* @__PURE__ */ (() =>\n  ristretto255_hasher.hashToCurve as RistHasher)();\n/** @deprecated use `import { ristretto255_hasher } from '@noble/curves/ed25519.js';` */\nexport const hash_to_ristretto255: RistHasher = /* @__PURE__ */ (() =>\n  ristretto255_hasher.hashToCurve as RistHasher)();\n", "/**\n * Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y².\n * For design rationale of types / exports, see weierstrass module documentation.\n * Untwisted Edwards curves exist, but they aren't used in real-world protocols.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  _validateObject,\n  _abool2 as abool,\n  _abytes2 as abytes,\n  aInRange,\n  bytesToHex,\n  bytesToNumberLE,\n  concatBytes,\n  copyBytes,\n  ensureBytes,\n  isBytes,\n  memoized,\n  notImplemented,\n  randomBytes as randomBytesWeb,\n  type FHash,\n  type Hex,\n} from '../utils.ts';\nimport {\n  _createCurveFields,\n  normalizeZ,\n  pippenger,\n  wNAF,\n  type AffinePoint,\n  type BasicCurve,\n  type CurveLengths,\n  type CurvePoint,\n  type CurvePointCons,\n} from './curve.ts';\nimport { Field, type IField, type NLength } from './modular.ts';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\nexport type UVRatio = (u: bigint, v: bigint) => { isValid: boolean; value: bigint };\n\n/** Instance of Extended Point with coordinates in X, Y, Z, T. */\nexport interface EdwardsPoint extends CurvePoint<bigint, EdwardsPoint> {\n  /** extended X coordinate. Different from affine x. */\n  readonly X: bigint;\n  /** extended Y coordinate. Different from affine y. */\n  readonly Y: bigint;\n  /** extended Z coordinate */\n  readonly Z: bigint;\n  /** extended T coordinate */\n  readonly T: bigint;\n\n  /** @deprecated use `toBytes` */\n  toRawBytes(): Uint8Array;\n  /** @deprecated use `p.precompute(windowSize)` */\n  _setWindowSize(windowSize: number): void;\n  /** @deprecated use .X */\n  readonly ex: bigint;\n  /** @deprecated use .Y */\n  readonly ey: bigint;\n  /** @deprecated use .Z */\n  readonly ez: bigint;\n  /** @deprecated use .T */\n  readonly et: bigint;\n}\n/** Static methods of Extended Point with coordinates in X, Y, Z, T. */\nexport interface EdwardsPointCons extends CurvePointCons<EdwardsPoint> {\n  new (X: bigint, Y: bigint, Z: bigint, T: bigint): EdwardsPoint;\n  CURVE(): EdwardsOpts;\n  fromBytes(bytes: Uint8Array, zip215?: boolean): EdwardsPoint;\n  fromHex(hex: Hex, zip215?: boolean): EdwardsPoint;\n  /** @deprecated use `import { pippenger } from '@noble/curves/abstract/curve.js';` */\n  msm(points: EdwardsPoint[], scalars: bigint[]): EdwardsPoint;\n}\n/** @deprecated use EdwardsPoint */\nexport type ExtPointType = EdwardsPoint;\n/** @deprecated use EdwardsPointCons */\nexport type ExtPointConstructor = EdwardsPointCons;\n\n/**\n * Twisted Edwards curve options.\n *\n * * a: formula param\n * * d: formula param\n * * p: prime characteristic (order) of finite field, in which arithmetics is done\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * h: cofactor. h*n is group order; n is subgroup order\n * * Gx: x coordinate of generator point a.k.a. base point\n * * Gy: y coordinate of generator point\n */\nexport type EdwardsOpts = Readonly<{\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  a: bigint;\n  d: bigint;\n  Gx: bigint;\n  Gy: bigint;\n}>;\n\n/**\n * Extra curve options for Twisted Edwards.\n *\n * * Fp: redefined Field over curve.p\n * * Fn: redefined Field over curve.n\n * * uvRatio: helper function for decompression, calculating √(u/v)\n */\nexport type EdwardsExtraOpts = Partial<{\n  Fp: IField<bigint>;\n  Fn: IField<bigint>;\n  FpFnLE: boolean;\n  uvRatio: (u: bigint, v: bigint) => { isValid: boolean; value: bigint };\n}>;\n\n/**\n * EdDSA (Edwards Digital Signature algorithm) options.\n *\n * * hash: hash function used to hash secret keys and messages\n * * adjustScalarBytes: clears bits to get valid field element\n * * domain: Used for hashing\n * * mapToCurve: for hash-to-curve standard\n * * prehash: RFC 8032 pre-hashing of messages to sign() / verify()\n * * randomBytes: function generating random bytes, used for randomSecretKey\n */\nexport type EdDSAOpts = Partial<{\n  adjustScalarBytes: (bytes: Uint8Array) => Uint8Array;\n  domain: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array;\n  mapToCurve: (scalar: bigint[]) => AffinePoint<bigint>;\n  prehash: FHash;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n}>;\n\n/**\n * EdDSA (Edwards Digital Signature algorithm) interface.\n *\n * Allows to create and verify signatures, create public and secret keys.\n */\nexport interface EdDSA {\n  keygen: (seed?: Uint8Array) => { secretKey: Uint8Array; publicKey: Uint8Array };\n  getPublicKey: (secretKey: Hex) => Uint8Array;\n  sign: (message: Hex, secretKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  Point: EdwardsPointCons;\n  utils: {\n    randomSecretKey: (seed?: Uint8Array) => Uint8Array;\n    isValidSecretKey: (secretKey: Uint8Array) => boolean;\n    isValidPublicKey: (publicKey: Uint8Array, zip215?: boolean) => boolean;\n\n    /**\n     * Converts ed public key to x public key.\n     *\n     * There is NO `fromMontgomery`:\n     * - There are 2 valid ed25519 points for every x25519, with flipped coordinate\n     * - Sometimes there are 0 valid ed25519 points, because x25519 *additionally*\n     *   accepts inputs on the quadratic twist, which can't be moved to ed25519\n     *\n     * @example\n     * ```js\n     * const someonesPub = ed25519.getPublicKey(ed25519.utils.randomSecretKey());\n     * const aPriv = x25519.utils.randomSecretKey();\n     * x25519.getSharedSecret(aPriv, ed25519.utils.toMontgomery(someonesPub))\n     * ```\n     */\n    toMontgomery: (publicKey: Uint8Array) => Uint8Array;\n    /**\n     * Converts ed secret key to x secret key.\n     * @example\n     * ```js\n     * const someonesPub = x25519.getPublicKey(x25519.utils.randomSecretKey());\n     * const aPriv = ed25519.utils.randomSecretKey();\n     * x25519.getSharedSecret(ed25519.utils.toMontgomerySecret(aPriv), someonesPub)\n     * ```\n     */\n    toMontgomerySecret: (privateKey: Uint8Array) => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: EdwardsPoint;\n      pointBytes: Uint8Array;\n    };\n\n    /** @deprecated use `randomSecretKey` */\n    randomPrivateKey: (seed?: Uint8Array) => Uint8Array;\n    /** @deprecated use `point.precompute()` */\n    precompute: (windowSize?: number, point?: EdwardsPoint) => EdwardsPoint;\n  };\n  lengths: CurveLengths;\n}\n\nfunction isEdValidXY(Fp: IField<bigint>, CURVE: EdwardsOpts, x: bigint, y: bigint): boolean {\n  const x2 = Fp.sqr(x);\n  const y2 = Fp.sqr(y);\n  const left = Fp.add(Fp.mul(CURVE.a, x2), y2);\n  const right = Fp.add(Fp.ONE, Fp.mul(CURVE.d, Fp.mul(x2, y2)));\n  return Fp.eql(left, right);\n}\n\nexport function edwards(params: EdwardsOpts, extraOpts: EdwardsExtraOpts = {}): EdwardsPointCons {\n  const validated = _createCurveFields('edwards', params, extraOpts, extraOpts.FpFnLE);\n  const { Fp, Fn } = validated;\n  let CURVE = validated.CURVE as EdwardsOpts;\n  const { h: cofactor } = CURVE;\n  _validateObject(extraOpts, {}, { uvRatio: 'function' });\n\n  // Important:\n  // There are some places where Fp.BYTES is used instead of nByteLength.\n  // So far, everything has been tested with curves of Fp.BYTES == nByteLength.\n  // TODO: test and find curves which behave otherwise.\n  const MASK = _2n << (BigInt(Fn.BYTES * 8) - _1n);\n  const modP = (n: bigint) => Fp.create(n); // Function overrides\n\n  // sqrt(u/v)\n  const uvRatio =\n    extraOpts.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(Fp.div(u, v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n\n  // Validate whether the passed curve params are valid.\n  // equation ax² + y² = 1 + dx²y² should work for generator point.\n  if (!isEdValidXY(Fp, CURVE, CURVE.Gx, CURVE.Gy))\n    throw new Error('bad curve params: generator point');\n\n  /**\n   * Asserts coordinate is valid: 0 <= n < MASK.\n   * Coordinates >= Fp.ORDER are allowed for zip215.\n   */\n  function acoord(title: string, n: bigint, banZero = false) {\n    const min = banZero ? _1n : _0n;\n    aInRange('coordinate ' + title, n, min, MASK);\n    return n;\n  }\n\n  function aextpoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Converts Extended point to default (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  const toAffineMemo = memoized((p: Point, iz?: bigint): AffinePoint<bigint> => {\n    const { X, Y, Z } = p;\n    const is0 = p.is0();\n    if (iz == null) iz = is0 ? _8n : (Fp.inv(Z) as bigint); // 8 was chosen arbitrarily\n    const x = modP(X * iz);\n    const y = modP(Y * iz);\n    const zz = Fp.mul(Z, iz);\n    if (is0) return { x: _0n, y: _1n };\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return { x, y };\n  });\n  const assertValidMemo = memoized((p: Point) => {\n    const { a, d } = CURVE;\n    if (p.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n    // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n    // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n    const { X, Y, Z, T } = p;\n    const X2 = modP(X * X); // X²\n    const Y2 = modP(Y * Y); // Y²\n    const Z2 = modP(Z * Z); // Z²\n    const Z4 = modP(Z2 * Z2); // Z⁴\n    const aX2 = modP(X2 * a); // aX²\n    const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n    const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n    if (left !== right) throw new Error('bad point: equation left != right (1)');\n    // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n    const XY = modP(X * Y);\n    const ZT = modP(Z * T);\n    if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    return true;\n  });\n\n  // Extended Point works in extended coordinates: (X, Y, Z, T) ∋ (x=X/Z, y=Y/Z, T=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements EdwardsPoint {\n    // base / generator point\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    // zero / infinity / identity point\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    // math field\n    static readonly Fp = Fp;\n    // scalar field\n    static readonly Fn = Fn;\n\n    readonly X: bigint;\n    readonly Y: bigint;\n    readonly Z: bigint;\n    readonly T: bigint;\n\n    constructor(X: bigint, Y: bigint, Z: bigint, T: bigint) {\n      this.X = acoord('x', X);\n      this.Y = acoord('y', Y);\n      this.Z = acoord('z', Z, true);\n      this.T = acoord('t', T);\n      Object.freeze(this);\n    }\n\n    static CURVE(): EdwardsOpts {\n      return CURVE;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      acoord('x', x);\n      acoord('y', y);\n      return new Point(x, y, _1n, modP(x * y));\n    }\n\n    // Uses algo from RFC8032 5.1.3.\n    static fromBytes(bytes: Uint8Array, zip215 = false): Point {\n      const len = Fp.BYTES;\n      const { a, d } = CURVE;\n      bytes = copyBytes(abytes(bytes, len, 'point'));\n      abool(zip215, 'zip215');\n      const normed = copyBytes(bytes); // copy again, we'll manipulate it\n      const lastByte = bytes[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = bytesToNumberLE(normed);\n\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // RFC8032 prohibits >= p, but ZIP215 doesn't\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      const max = zip215 ? MASK : Fp.ORDER;\n      aInRange('point.y', y, _0n, max);\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('bad point: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('bad point: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromHex(bytes: Uint8Array, zip215 = false): Point {\n      return Point.fromBytes(ensureBytes('point', bytes), zip215);\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    precompute(windowSize: number = 8, isLazy = true) {\n      wnaf.createCache(this, windowSize);\n      if (!isLazy) this.multiply(_2n); // random number\n      return this;\n    }\n\n    // Useful in fromAffine() - not for fromBytes(), which always created valid points.\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      aextpoint(other);\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      const { X: X2, Y: Y2, Z: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.X), this.Y, this.Z, modP(-this.T));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      aextpoint(other);\n      const { a, d } = CURVE;\n      const { X: X1, Y: Y1, Z: Z1, T: T1 } = this;\n      const { X: X2, Y: Y2, Z: Z2, T: T2 } = other;\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      // 1 <= scalar < L\n      if (!Fn.isValidNot0(scalar)) throw new Error('invalid scalar: expected 1 <= sc < curve.n');\n      const { p, f } = wnaf.cached(this, scalar, (p) => normalizeZ(Point, p));\n      return normalizeZ(Point, [p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n    multiplyUnsafe(scalar: bigint, acc = Point.ZERO): Point {\n      // 0 <= scalar < L\n      if (!Fn.isValid(scalar)) throw new Error('invalid scalar: expected 0 <= sc < curve.n');\n      if (scalar === _0n) return Point.ZERO;\n      if (this.is0() || scalar === _1n) return this;\n      return wnaf.unsafe(this, scalar, (p) => normalizeZ(Point, p), acc);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.unsafe(this, CURVE.n).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(invertedZ?: bigint): AffinePoint<bigint> {\n      return toAffineMemo(this, invertedZ);\n    }\n\n    clearCofactor(): Point {\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    toBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      // Fp.toBytes() allows non-canonical encoding of y (>= p).\n      const bytes = Fp.toBytes(y);\n      // Each y has 2 valid points: (x, y), (x,-y).\n      // When compressing, it's enough to store y and use the last byte to encode sign of x\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0;\n      return bytes;\n    }\n    toHex(): string {\n      return bytesToHex(this.toBytes());\n    }\n\n    toString() {\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n    }\n\n    // TODO: remove\n    get ex(): bigint {\n      return this.X;\n    }\n    get ey(): bigint {\n      return this.Y;\n    }\n    get ez(): bigint {\n      return this.Z;\n    }\n    get et(): bigint {\n      return this.T;\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      return normalizeZ(Point, points);\n    }\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n    _setWindowSize(windowSize: number) {\n      this.precompute(windowSize);\n    }\n    toRawBytes(): Uint8Array {\n      return this.toBytes();\n    }\n  }\n  const wnaf = new wNAF(Point, Fn.BITS);\n  Point.BASE.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n  return Point;\n}\n\n/**\n * Base class for prime-order points like Ristretto255 and Decaf448.\n * These points eliminate cofactor issues by representing equivalence classes\n * of Edwards curve points.\n */\nexport abstract class PrimeEdwardsPoint<T extends PrimeEdwardsPoint<T>>\n  implements CurvePoint<bigint, T>\n{\n  static BASE: PrimeEdwardsPoint<any>;\n  static ZERO: PrimeEdwardsPoint<any>;\n  static Fp: IField<bigint>;\n  static Fn: IField<bigint>;\n\n  protected readonly ep: EdwardsPoint;\n\n  constructor(ep: EdwardsPoint) {\n    this.ep = ep;\n  }\n\n  // Abstract methods that must be implemented by subclasses\n  abstract toBytes(): Uint8Array;\n  abstract equals(other: T): boolean;\n\n  // Static methods that must be implemented by subclasses\n  static fromBytes(_bytes: Uint8Array): any {\n    notImplemented();\n  }\n\n  static fromHex(_hex: Hex): any {\n    notImplemented();\n  }\n\n  get x(): bigint {\n    return this.toAffine().x;\n  }\n  get y(): bigint {\n    return this.toAffine().y;\n  }\n\n  // Common implementations\n  clearCofactor(): T {\n    // no-op for prime-order groups\n    return this as any;\n  }\n\n  assertValidity(): void {\n    this.ep.assertValidity();\n  }\n\n  toAffine(invertedZ?: bigint): AffinePoint<bigint> {\n    return this.ep.toAffine(invertedZ);\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  isTorsionFree(): boolean {\n    return true;\n  }\n\n  isSmallOrder(): boolean {\n    return false;\n  }\n\n  add(other: T): T {\n    this.assertSame(other);\n    return this.init(this.ep.add(other.ep));\n  }\n\n  subtract(other: T): T {\n    this.assertSame(other);\n    return this.init(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): T {\n    return this.init(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): T {\n    return this.init(this.ep.multiplyUnsafe(scalar));\n  }\n\n  double(): T {\n    return this.init(this.ep.double());\n  }\n\n  negate(): T {\n    return this.init(this.ep.negate());\n  }\n\n  precompute(windowSize?: number, isLazy?: boolean): T {\n    return this.init(this.ep.precompute(windowSize, isLazy));\n  }\n\n  // Helper methods\n  abstract is0(): boolean;\n  protected abstract assertSame(other: T): void;\n  protected abstract init(ep: EdwardsPoint): T;\n\n  /** @deprecated use `toBytes` */\n  toRawBytes(): Uint8Array {\n    return this.toBytes();\n  }\n}\n\n/**\n * Initializes EdDSA signatures over given Edwards curve.\n */\nexport function eddsa(Point: EdwardsPointCons, cHash: FHash, eddsaOpts: EdDSAOpts = {}): EdDSA {\n  if (typeof cHash !== 'function') throw new Error('\"hash\" function param is required');\n  _validateObject(\n    eddsaOpts,\n    {},\n    {\n      adjustScalarBytes: 'function',\n      randomBytes: 'function',\n      domain: 'function',\n      prehash: 'function',\n      mapToCurve: 'function',\n    }\n  );\n\n  const { prehash } = eddsaOpts;\n  const { BASE, Fp, Fn } = Point;\n\n  const randomBytes = eddsaOpts.randomBytes || randomBytesWeb;\n  const adjustScalarBytes = eddsaOpts.adjustScalarBytes || ((bytes: Uint8Array) => bytes);\n  const domain =\n    eddsaOpts.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      abool(phflag, 'phflag');\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    return Fn.create(bytesToNumberLE(hash)); // Not Fn.fromBytes: it has length limit\n  }\n\n  // Get the hashed private scalar per RFC8032 5.1.5\n  function getPrivateScalar(key: Hex) {\n    const len = lengths.secretKey;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    return { head, prefix, scalar };\n  }\n\n  /** Convenience method that creates public key from scalar. RFC8032 5.1.5 */\n  function getExtendedPublicKey(secretKey: Hex) {\n    const { head, prefix, scalar } = getPrivateScalar(secretKey);\n    const point = BASE.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toBytes();\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  /** Calculates EdDSA pub key. RFC8032 5.1.5. */\n  function getPublicKey(secretKey: Hex): Uint8Array {\n    return getExtendedPublicKey(secretKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = Uint8Array.of(), ...msgs: Uint8Array[]) {\n    const msg = concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, secretKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(secretKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = BASE.multiply(r).toBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = Fn.create(r + k * scalar); // S = (r + k * s) mod L\n    if (!Fn.isValid(s)) throw new Error('sign failed: invalid s'); // 0 <= s < L\n    const rs = concatBytes(R, Fn.toBytes(s));\n    return abytes(rs, lengths.signature, 'result');\n  }\n\n  // verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\n  const verifyOpts: { context?: Hex; zip215?: boolean } = { zip215: true };\n\n  /**\n   * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n   * An extended group equation is checked.\n   */\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = lengths.signature;\n    sig = ensureBytes('signature', sig, len);\n    msg = ensureBytes('message', msg);\n    publicKey = ensureBytes('publicKey', publicKey, lengths.publicKey);\n    if (zip215 !== undefined) abool(zip215, 'zip215');\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const mid = len / 2;\n    const r = sig.subarray(0, mid);\n    const s = bytesToNumberLE(sig.subarray(mid, len));\n    let A, R, SB;\n    try {\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      A = Point.fromBytes(publicKey, zip215);\n      R = Point.fromBytes(r, zip215);\n      SB = BASE.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false; // zip215 allows public keys of small order\n\n    const k = hashDomainToScalar(context, R.toBytes(), A.toBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // Extended group equation\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().is0();\n  }\n\n  const _size = Fp.BYTES; // 32 for ed25519, 57 for ed448\n  const lengths = {\n    secretKey: _size,\n    publicKey: _size,\n    signature: 2 * _size,\n    seed: _size,\n  };\n  function randomSecretKey(seed = randomBytes(lengths.seed)): Uint8Array {\n    return abytes(seed, lengths.seed, 'seed');\n  }\n  function keygen(seed?: Uint8Array) {\n    const secretKey = utils.randomSecretKey(seed);\n    return { secretKey, publicKey: getPublicKey(secretKey) };\n  }\n  function isValidSecretKey(key: Uint8Array): boolean {\n    return isBytes(key) && key.length === Fn.BYTES;\n  }\n  function isValidPublicKey(key: Uint8Array, zip215?: boolean): boolean {\n    try {\n      return !!Point.fromBytes(key, zip215);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  const utils = {\n    getExtendedPublicKey,\n    randomSecretKey,\n    isValidSecretKey,\n    isValidPublicKey,\n    /**\n     * Converts ed public key to x public key. Uses formula:\n     * - ed25519:\n     *   - `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n     *   - `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n     * - ed448:\n     *   - `(u, v) = ((y-1)/(y+1), sqrt(156324)*u/x)`\n     *   - `(x, y) = (sqrt(156324)*u/v, (1+u)/(1-u))`\n     */\n    toMontgomery(publicKey: Uint8Array): Uint8Array {\n      const { y } = Point.fromBytes(publicKey);\n      const size = lengths.publicKey;\n      const is25519 = size === 32;\n      if (!is25519 && size !== 57) throw new Error('only defined for 25519 and 448');\n      const u = is25519 ? Fp.div(_1n + y, _1n - y) : Fp.div(y - _1n, y + _1n);\n      return Fp.toBytes(u);\n    },\n\n    toMontgomerySecret(secretKey: Uint8Array): Uint8Array {\n      const size = lengths.secretKey;\n      abytes(secretKey, size);\n      const hashed = cHash(secretKey.subarray(0, size));\n      return adjustScalarBytes(hashed).subarray(0, size);\n    },\n\n    /** @deprecated */\n    randomPrivateKey: randomSecretKey,\n    /** @deprecated */\n    precompute(windowSize = 8, point: EdwardsPoint = Point.BASE): EdwardsPoint {\n      return point.precompute(windowSize, false);\n    },\n  };\n\n  return Object.freeze({\n    keygen,\n    getPublicKey,\n    sign,\n    verify,\n    utils,\n    Point,\n    lengths,\n  });\n}\n\n// TODO: remove everything below\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  /** @deprecated the property will be removed in next release */\n  hash: FHash; // Hashing\n  randomBytes?: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: UVRatio; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\nexport type CurveTypeWithLength = Readonly<CurveType & Partial<NLength>>;\nexport type CurveFn = {\n  /** @deprecated the property will be removed in next release */\n  CURVE: CurveType;\n  keygen: EdDSA['keygen'];\n  getPublicKey: EdDSA['getPublicKey'];\n  sign: EdDSA['sign'];\n  verify: EdDSA['verify'];\n  Point: EdwardsPointCons;\n  /** @deprecated use `Point` */\n  ExtendedPoint: EdwardsPointCons;\n  utils: EdDSA['utils'];\n  lengths: CurveLengths;\n};\nexport type EdComposed = {\n  CURVE: EdwardsOpts;\n  curveOpts: EdwardsExtraOpts;\n  hash: FHash;\n  eddsaOpts: EdDSAOpts;\n};\nfunction _eddsa_legacy_opts_to_new(c: CurveTypeWithLength): EdComposed {\n  const CURVE: EdwardsOpts = {\n    a: c.a,\n    d: c.d,\n    p: c.Fp.ORDER,\n    n: c.n,\n    h: c.h,\n    Gx: c.Gx,\n    Gy: c.Gy,\n  };\n  const Fp = c.Fp;\n  const Fn = Field(CURVE.n, c.nBitLength, true);\n  const curveOpts: EdwardsExtraOpts = { Fp, Fn, uvRatio: c.uvRatio };\n  const eddsaOpts: EdDSAOpts = {\n    randomBytes: c.randomBytes,\n    adjustScalarBytes: c.adjustScalarBytes,\n    domain: c.domain,\n    prehash: c.prehash,\n    mapToCurve: c.mapToCurve,\n  };\n  return { CURVE, curveOpts, hash: c.hash, eddsaOpts };\n}\nfunction _eddsa_new_output_to_legacy(c: CurveTypeWithLength, eddsa: EdDSA): CurveFn {\n  const Point = eddsa.Point;\n  const legacy = Object.assign({}, eddsa, {\n    ExtendedPoint: Point,\n    CURVE: c,\n    nBitLength: Point.Fn.BITS,\n    nByteLength: Point.Fn.BYTES,\n  });\n  return legacy;\n}\n// TODO: remove. Use eddsa\nexport function twistedEdwards(c: CurveTypeWithLength): CurveFn {\n  const { CURVE, curveOpts, hash, eddsaOpts } = _eddsa_legacy_opts_to_new(c);\n  const Point = edwards(CURVE, curveOpts);\n  const EDDSA = eddsa(Point, hash, eddsaOpts);\n  return _eddsa_new_output_to_legacy(c, EDDSA);\n}\n", "/**\n * Montgomery curve methods. It's not really whole montgomery curve,\n * just bunch of very specific methods for X25519 / X448 from\n * [RFC 7748](https://www.rfc-editor.org/rfc/rfc7748)\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  _validateObject,\n  abytes,\n  aInRange,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesLE,\n  randomBytes,\n} from '../utils.ts';\nimport type { CurveLengths } from './curve.ts';\nimport { mod } from './modular.ts';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\ntype Hex = string | Uint8Array;\n\nexport type CurveType = {\n  P: bigint; // finite field prime\n  type: 'x25519' | 'x448';\n  adjustScalarBytes: (bytes: Uint8Array) => Uint8Array;\n  powPminus2: (x: bigint) => bigint;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n};\n\nexport type MontgomeryECDH = {\n  scalarMult: (scalar: Hex, u: Hex) => Uint8Array;\n  scalarMultBase: (scalar: Hex) => Uint8Array;\n  getSharedSecret: (secretKeyA: Hex, publicKeyB: Hex) => Uint8Array;\n  getPublicKey: (secretKey: Hex) => Uint8Array;\n  utils: {\n    randomSecretKey: () => Uint8Array;\n    /** @deprecated use `randomSecretKey` */\n    randomPrivateKey: () => Uint8Array;\n  };\n  GuBytes: Uint8Array;\n  lengths: CurveLengths;\n  keygen: (seed?: Uint8Array) => { secretKey: Uint8Array; publicKey: Uint8Array };\n};\nexport type CurveFn = MontgomeryECDH;\n\nfunction validateOpts(curve: CurveType) {\n  _validateObject(curve, {\n    adjustScalarBytes: 'function',\n    powPminus2: 'function',\n  });\n  return Object.freeze({ ...curve } as const);\n}\n\nexport function montgomery(curveDef: CurveType): MontgomeryECDH {\n  const CURVE = validateOpts(curveDef);\n  const { P, type, adjustScalarBytes, powPminus2, randomBytes: rand } = CURVE;\n  const is25519 = type === 'x25519';\n  if (!is25519 && type !== 'x448') throw new Error('invalid type');\n  const randomBytes_ = rand || randomBytes;\n\n  const montgomeryBits = is25519 ? 255 : 448;\n  const fieldLen = is25519 ? 32 : 56;\n  const Gu = is25519 ? BigInt(9) : BigInt(5);\n  // RFC 7748 #5:\n  // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519 and\n  // (156326 - 2) / 4 = 39081 for curve448/X448\n  // const a = is25519 ? 156326n : 486662n;\n  const a24 = is25519 ? BigInt(121665) : BigInt(39081);\n  // RFC: x25519 \"the resulting integer is of the form 2^254 plus\n  // eight times a value between 0 and 2^251 - 1 (inclusive)\"\n  // x448: \"2^447 plus four times a value between 0 and 2^445 - 1 (inclusive)\"\n  const minScalar = is25519 ? _2n ** BigInt(254) : _2n ** BigInt(447);\n  const maxAdded = is25519\n    ? BigInt(8) * _2n ** BigInt(251) - _1n\n    : BigInt(4) * _2n ** BigInt(445) - _1n;\n  const maxScalar = minScalar + maxAdded + _1n; // (inclusive)\n  const modP = (n: bigint) => mod(n, P);\n  const GuBytes = encodeU(Gu);\n  function encodeU(u: bigint): Uint8Array {\n    return numberToBytesLE(modP(u), fieldLen);\n  }\n  function decodeU(u: Hex): bigint {\n    const _u = ensureBytes('u coordinate', u, fieldLen);\n    // RFC: When receiving such an array, implementations of X25519\n    // (but not X448) MUST mask the most significant bit in the final byte.\n    if (is25519) _u[31] &= 127; // 0b0111_1111\n    // RFC: Implementations MUST accept non-canonical values and process them as\n    // if they had been reduced modulo the field prime.  The non-canonical\n    // values are 2^255 - 19 through 2^255 - 1 for X25519 and 2^448 - 2^224\n    // - 1 through 2^448 - 1 for X448.\n    return modP(bytesToNumberLE(_u));\n  }\n  function decodeScalar(scalar: Hex): bigint {\n    return bytesToNumberLE(adjustScalarBytes(ensureBytes('scalar', scalar, fieldLen)));\n  }\n  function scalarMult(scalar: Hex, u: Hex): Uint8Array {\n    const pu = montgomeryLadder(decodeU(u), decodeScalar(scalar));\n    // Some public keys are useless, of low-order. Curve author doesn't think\n    // it needs to be validated, but we do it nonetheless.\n    // https://cr.yp.to/ecdh.html#validate\n    if (pu === _0n) throw new Error('invalid private or public key received');\n    return encodeU(pu);\n  }\n  // Computes public key from private. By doing scalar multiplication of base point.\n  function scalarMultBase(scalar: Hex): Uint8Array {\n    return scalarMult(scalar, GuBytes);\n  }\n\n  // cswap from RFC7748 \"example code\"\n  function cswap(swap: bigint, x_2: bigint, x_3: bigint): { x_2: bigint; x_3: bigint } {\n    // dummy = mask(swap) AND (x_2 XOR x_3)\n    // Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n    // and x_3, computed, e.g., as mask(swap) = 0 - swap.\n    const dummy = modP(swap * (x_2 - x_3));\n    x_2 = modP(x_2 - dummy); // x_2 = x_2 XOR dummy\n    x_3 = modP(x_3 + dummy); // x_3 = x_3 XOR dummy\n    return { x_2, x_3 };\n  }\n\n  /**\n   * Montgomery x-only multiplication ladder.\n   * @param pointU u coordinate (x) on Montgomery Curve 25519\n   * @param scalar by which the point would be multiplied\n   * @returns new Point on Montgomery curve\n   */\n  function montgomeryLadder(u: bigint, scalar: bigint): bigint {\n    aInRange('u', u, _0n, P);\n    aInRange('scalar', scalar, minScalar, maxScalar);\n    const k = scalar;\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n      const k_t = (k >> t) & _1n;\n      swap ^= k_t;\n      ({ x_2, x_3 } = cswap(swap, x_2, x_3));\n      ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));\n      swap = k_t;\n\n      const A = x_2 + z_2;\n      const AA = modP(A * A);\n      const B = x_2 - z_2;\n      const BB = modP(B * B);\n      const E = AA - BB;\n      const C = x_3 + z_3;\n      const D = x_3 - z_3;\n      const DA = modP(D * A);\n      const CB = modP(C * B);\n      const dacb = DA + CB;\n      const da_cb = DA - CB;\n      x_3 = modP(dacb * dacb);\n      z_3 = modP(x_1 * modP(da_cb * da_cb));\n      x_2 = modP(AA * BB);\n      z_2 = modP(E * (AA + modP(a24 * E)));\n    }\n    ({ x_2, x_3 } = cswap(swap, x_2, x_3));\n    ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));\n    const z2 = powPminus2(z_2); // `Fp.pow(x, P - _2n)` is much slower equivalent\n    return modP(x_2 * z2); // Return x_2 * (z_2^(p - 2))\n  }\n  const lengths = {\n    secretKey: fieldLen,\n    publicKey: fieldLen,\n    seed: fieldLen,\n  };\n  const randomSecretKey = (seed = randomBytes_(fieldLen)) => {\n    abytes(seed, lengths.seed);\n    return seed;\n  };\n  function keygen(seed?: Uint8Array) {\n    const secretKey = randomSecretKey(seed);\n    return { secretKey, publicKey: scalarMultBase(secretKey) };\n  }\n  const utils = {\n    randomSecretKey,\n    randomPrivateKey: randomSecretKey,\n  };\n  return {\n    keygen,\n    getSharedSecret: (secretKey: Hex, publicKey: Hex) => scalarMult(secretKey, publicKey),\n    getPublicKey: (secretKey: Hex): Uint8Array => scalarMultBase(secretKey),\n    scalarMult,\n    scalarMultBase,\n    utils,\n    GuBytes: GuBytes.slice(),\n    lengths,\n  };\n}\n", "export type ExpirableMapOptions<K, V> = {\n  source?: Iterable<[K, V]>;\n  expirationTime?: number;\n};\n\n/**\n * A map that expires entries after a given time.\n * Defaults to 10 minutes.\n */\nexport class ExpirableMap<K, V> implements Map<K, V> {\n  // Internals\n  #inner: Map<K, { value: V; timestamp: number }>;\n  #expirationTime: number;\n\n  [Symbol.iterator]: () => MapIterator<[K, V]> = this.entries.bind(this);\n  [Symbol.toStringTag] = 'ExpirableMap';\n\n  /**\n   * Create a new ExpirableMap.\n   * @param {ExpirableMapOptions<any, any>} options - options for the map.\n   * @param {Iterable<[any, any]>} options.source - an optional source of entries to initialize the map with.\n   * @param {number} options.expirationTime - the time in milliseconds after which entries will expire.\n   */\n  constructor(options: ExpirableMapOptions<K, V> = {}) {\n    const { source = [], expirationTime = 10 * 60 * 1000 } = options;\n    const currentTime = Date.now();\n    this.#inner = new Map(\n      [...source].map(([key, value]) => [key, { value, timestamp: currentTime }]),\n    );\n    this.#expirationTime = expirationTime;\n  }\n\n  /**\n   * Prune removes all expired entries.\n   */\n  prune() {\n    const currentTime = Date.now();\n    for (const [key, entry] of this.#inner.entries()) {\n      if (currentTime - entry.timestamp > this.#expirationTime) {\n        this.#inner.delete(key);\n      }\n    }\n    return this;\n  }\n\n  // Implementing the Map interface\n\n  /**\n   * Set the value for the given key. Prunes expired entries.\n   * @param key for the entry\n   * @param value of the entry\n   * @returns this\n   */\n  set(key: K, value: V) {\n    this.prune();\n    const entry = {\n      value,\n      timestamp: Date.now(),\n    };\n    this.#inner.set(key, entry);\n\n    return this;\n  }\n\n  /**\n   * Get the value associated with the key, if it exists and has not expired.\n   * @param key K\n   * @returns the value associated with the key, or undefined if the key is not present or has expired.\n   */\n  get(key: K) {\n    const entry = this.#inner.get(key);\n    if (entry === undefined) {\n      return undefined;\n    }\n    if (Date.now() - entry.timestamp > this.#expirationTime) {\n      this.#inner.delete(key);\n      return undefined;\n    }\n    return entry.value;\n  }\n\n  /**\n   * Clear all entries.\n   */\n  clear() {\n    this.#inner.clear();\n  }\n\n  /**\n   * Entries returns the entries of the map, without the expiration time.\n   * @returns an iterator over the entries of the map.\n   */\n  entries(): MapIterator<[K, V]> {\n    const iterator = this.#inner.entries();\n    const generator = function* () {\n      for (const [key, value] of iterator) {\n        yield [key, value.value] as [K, V];\n      }\n      return undefined;\n    };\n    return generator();\n  }\n\n  /**\n   * Values returns the values of the map, without the expiration time.\n   * @returns an iterator over the values of the map.\n   */\n  values(): MapIterator<V> {\n    const iterator = this.#inner.values();\n    const generator = function* () {\n      for (const value of iterator) {\n        yield value.value;\n      }\n      return undefined;\n    };\n    return generator();\n  }\n\n  /**\n   * Keys returns the keys of the map\n   * @returns an iterator over the keys of the map.\n   */\n  keys(): MapIterator<K> {\n    return this.#inner.keys();\n  }\n\n  /**\n   * forEach calls the callbackfn on each entry of the map.\n   * @param callbackfn to call on each entry\n   * @param thisArg to use as this when calling the callbackfn\n   */\n  forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: ExpirableMap<K, V>) {\n    for (const [key, value] of this.#inner.entries()) {\n      callbackfn.call(thisArg, value.value, key, this);\n    }\n  }\n\n  /**\n   * has returns true if the key exists and has not expired.\n   * @param key K\n   * @returns true if the key exists and has not expired.\n   */\n  has(key: K): boolean {\n    return this.#inner.has(key);\n  }\n\n  /**\n   * delete the entry for the given key.\n   * @param key K\n   * @returns true if the key existed and has been deleted.\n   */\n  delete(key: K) {\n    return this.#inner.delete(key);\n  }\n\n  /**\n   * get size of the map.\n   * @returns the size of the map.\n   */\n  get size() {\n    return this.#inner.size;\n  }\n}\n", "import { type DerEncodedPublicKey, type PublicKey } from './auth.ts';\nimport { ED25519_OID, unwrapDER, wrapDER } from './der.ts';\nimport { DerDecodeErrorCode, InputError } from './errors.ts';\n\nexport class Ed25519PublicKey implements PublicKey {\n  public static from(key: PublicKey): Ed25519PublicKey {\n    return this.fromDer(key.toDer());\n  }\n\n  public static fromRaw(rawKey: Uint8Array): Ed25519PublicKey {\n    return new Ed25519PublicKey(rawKey);\n  }\n\n  public static fromDer(derKey: DerEncodedPublicKey): Ed25519PublicKey {\n    return new Ed25519PublicKey(this.derDecode(derKey));\n  }\n\n  // The length of Ed25519 public keys is always 32 bytes.\n  private static RAW_KEY_LENGTH = 32;\n\n  private static derEncode(publicKey: Uint8Array): DerEncodedPublicKey {\n    return wrapDER(publicKey, ED25519_OID) as DerEncodedPublicKey;\n  }\n\n  private static derDecode(key: DerEncodedPublicKey): Uint8Array {\n    const unwrapped = unwrapDER(key, ED25519_OID);\n    if (unwrapped.length !== this.RAW_KEY_LENGTH) {\n      throw InputError.fromCode(\n        new DerDecodeErrorCode('An Ed25519 public key must be exactly 32 bytes long'),\n      );\n    }\n    return unwrapped;\n  }\n\n  #rawKey: Uint8Array;\n\n  public get rawKey(): Uint8Array {\n    return this.#rawKey;\n  }\n\n  #derKey: DerEncodedPublicKey;\n\n  public get derKey(): DerEncodedPublicKey {\n    return this.#derKey;\n  }\n\n  // `fromRaw` and `fromDer` should be used for instantiation, not this constructor.\n  private constructor(key: Uint8Array) {\n    if (key.byteLength !== Ed25519PublicKey.RAW_KEY_LENGTH) {\n      throw InputError.fromCode(\n        new DerDecodeErrorCode('An Ed25519 public key must be exactly 32 bytes long'),\n      );\n    }\n    this.#rawKey = key;\n    this.#derKey = Ed25519PublicKey.derEncode(key);\n  }\n\n  public toDer(): DerEncodedPublicKey {\n    return this.derKey;\n  }\n\n  public toRaw(): Uint8Array {\n    return this.rawKey;\n  }\n}\n", "import {\n  DerDecodeErrorCode,\n  DerDecodeLengthMismatchErrorCode,\n  DerEncodeErrorCode,\n  InputError,\n} from './errors.ts';\nimport { uint8Equals } from './utils/buffer.ts';\n\nexport const encodeLenBytes = (len: number): number => {\n  if (len <= 0x7f) {\n    return 1;\n  } else if (len <= 0xff) {\n    return 2;\n  } else if (len <= 0xffff) {\n    return 3;\n  } else if (len <= 0xffffff) {\n    return 4;\n  } else {\n    throw InputError.fromCode(new DerEncodeErrorCode('Length too long (> 4 bytes)'));\n  }\n};\n\nexport const encodeLen = (buf: Uint8Array, offset: number, len: number): number => {\n  if (len <= 0x7f) {\n    buf[offset] = len;\n    return 1;\n  } else if (len <= 0xff) {\n    buf[offset] = 0x81;\n    buf[offset + 1] = len;\n    return 2;\n  } else if (len <= 0xffff) {\n    buf[offset] = 0x82;\n    buf[offset + 1] = len >> 8;\n    buf[offset + 2] = len;\n    return 3;\n  } else if (len <= 0xffffff) {\n    buf[offset] = 0x83;\n    buf[offset + 1] = len >> 16;\n    buf[offset + 2] = len >> 8;\n    buf[offset + 3] = len;\n    return 4;\n  } else {\n    throw InputError.fromCode(new DerEncodeErrorCode('Length too long (> 4 bytes)'));\n  }\n};\n\nexport const decodeLenBytes = (buf: Uint8Array, offset: number): number => {\n  if (buf[offset] < 0x80) return 1;\n  if (buf[offset] === 0x80) throw InputError.fromCode(new DerDecodeErrorCode('Invalid length 0'));\n  if (buf[offset] === 0x81) return 2;\n  if (buf[offset] === 0x82) return 3;\n  if (buf[offset] === 0x83) return 4;\n  throw InputError.fromCode(new DerDecodeErrorCode('Length too long (> 4 bytes)'));\n};\n\nexport const decodeLen = (buf: Uint8Array, offset: number): number => {\n  const lenBytes = decodeLenBytes(buf, offset);\n  if (lenBytes === 1) return buf[offset];\n  else if (lenBytes === 2) return buf[offset + 1];\n  else if (lenBytes === 3) return (buf[offset + 1] << 8) + buf[offset + 2];\n  else if (lenBytes === 4)\n    return (buf[offset + 1] << 16) + (buf[offset + 2] << 8) + buf[offset + 3];\n  throw InputError.fromCode(new DerDecodeErrorCode('Length too long (> 4 bytes)'));\n};\n\n/**\n * A DER encoded `SEQUENCE(OID)` for DER-encoded-COSE\n */\nexport const DER_COSE_OID = Uint8Array.from([\n  ...[0x30, 0x0c], // SEQUENCE\n  ...[0x06, 0x0a], // OID with 10 bytes\n  ...[0x2b, 0x06, 0x01, 0x04, 0x01, 0x83, 0xb8, 0x43, 0x01, 0x01], // DER encoded COSE\n]);\n\n/**\n * A DER encoded `SEQUENCE(OID)` for the Ed25519 algorithm\n */\nexport const ED25519_OID = Uint8Array.from([\n  ...[0x30, 0x05], // SEQUENCE\n  ...[0x06, 0x03], // OID with 3 bytes\n  ...[0x2b, 0x65, 0x70], // id-Ed25519 OID\n]);\n\n/**\n * A DER encoded `SEQUENCE(OID)` for secp256k1 with the ECDSA algorithm\n */\nexport const SECP256K1_OID = Uint8Array.from([\n  ...[0x30, 0x10], // SEQUENCE\n  ...[0x06, 0x07], // OID with 7 bytes\n  ...[0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01], // OID ECDSA\n  ...[0x06, 0x05], // OID with 5 bytes\n  ...[0x2b, 0x81, 0x04, 0x00, 0x0a], // OID secp256k1\n]);\n\nexport const BLS12_381_G2_OID = Uint8Array.from([\n  ...[0x30, 0x1d], // SEQUENCE, length 29 bytes\n  // Algorithm OID\n  ...[0x06, 0x0d],\n  ...[0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xdc, 0x7c, 0x05, 0x03, 0x01, 0x02, 0x01],\n  // Curve OID\n  ...[0x06, 0x0c],\n  ...[0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xdc, 0x7c, 0x05, 0x03, 0x02, 0x01],\n]);\n\n/**\n * Wraps the given `payload` in a DER encoding tagged with the given encoded `oid` like so:\n * `SEQUENCE(oid, BITSTRING(payload))`\n * @param payload The payload to encode as the bit string\n * @param oid The DER encoded (and SEQUENCE wrapped!) OID to tag the payload with\n */\nexport function wrapDER(payload: Uint8Array, oid: Uint8Array): Uint8Array {\n  // The Bit String header needs to include the unused bit count byte in its length\n  const bitStringHeaderLength = 2 + encodeLenBytes(payload.byteLength + 1);\n  const len = oid.byteLength + bitStringHeaderLength + payload.byteLength;\n  let offset = 0;\n  const buf = new Uint8Array(1 + encodeLenBytes(len) + len);\n  // Sequence\n  buf[offset++] = 0x30;\n  // Sequence Length\n  offset += encodeLen(buf, offset, len);\n\n  // OID\n  buf.set(oid, offset);\n  offset += oid.byteLength;\n\n  // Bit String Header\n  buf[offset++] = 0x03;\n  offset += encodeLen(buf, offset, payload.byteLength + 1);\n  // 0 padding\n  buf[offset++] = 0x00;\n  buf.set(new Uint8Array(payload), offset);\n\n  return buf;\n}\n\n/**\n * Extracts a payload from the given `derEncoded` data, and checks that it was tagged with the given `oid`.\n *\n * `derEncoded = SEQUENCE(oid, BITSTRING(payload))`\n * @param derEncoded The DER encoded and tagged data\n * @param oid The DER encoded (and SEQUENCE wrapped!) expected OID\n * @returns The unwrapped payload\n */\nexport const unwrapDER = (derEncoded: Uint8Array, oid: Uint8Array): Uint8Array => {\n  let offset = 0;\n  const expect = (n: number, msg: string) => {\n    if (buf[offset++] !== n) {\n      throw InputError.fromCode(new DerDecodeErrorCode(`Expected ${msg} at offset ${offset}`));\n    }\n  };\n\n  const buf = new Uint8Array(derEncoded);\n  expect(0x30, 'sequence');\n  offset += decodeLenBytes(buf, offset);\n\n  if (!uint8Equals(buf.slice(offset, offset + oid.byteLength), oid)) {\n    throw InputError.fromCode(new DerDecodeErrorCode('Not the expected OID.'));\n  }\n  offset += oid.byteLength;\n\n  expect(0x03, 'bit string');\n  const payloadLen = decodeLen(buf, offset) - 1; // Subtracting 1 to account for the 0 padding\n  offset += decodeLenBytes(buf, offset);\n  expect(0x00, '0 padding');\n  const result = buf.slice(offset);\n  if (payloadLen !== result.length) {\n    throw InputError.fromCode(new DerDecodeLengthMismatchErrorCode(payloadLen, result.length));\n  }\n  return result;\n};\n", "import { AgentError } from './errors.ts';\n\nexport type ObserveFunction<T> = (data: T, ...rest: unknown[]) => void;\n\nexport class Observable<T> {\n  observers: ObserveFunction<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  subscribe(func: ObserveFunction<T>) {\n    this.observers.push(func);\n  }\n\n  unsubscribe(func: ObserveFunction<T>) {\n    this.observers = this.observers.filter(observer => observer !== func);\n  }\n\n  notify(data: T, ...rest: unknown[]) {\n    this.observers.forEach(observer => observer(data, ...rest));\n  }\n}\n\nexport type AgentLog =\n  | {\n      message: string;\n      level: 'warn' | 'info';\n    }\n  | {\n      message: string;\n      level: 'error';\n      error: AgentError;\n    };\n\nexport class ObservableLog extends Observable<AgentLog> {\n  constructor() {\n    super();\n  }\n  print(message: string, ...rest: unknown[]) {\n    this.notify({ message, level: 'info' }, ...rest);\n  }\n  warn(message: string, ...rest: unknown[]) {\n    this.notify({ message, level: 'warn' }, ...rest);\n  }\n  error(message: string, error: AgentError, ...rest: unknown[]) {\n    this.notify({ message, level: 'error', error }, ...rest);\n  }\n}\n", "const RANDOMIZATION_FACTOR = 0.5;\nconst MULTIPLIER = 1.5;\nconst INITIAL_INTERVAL_MSEC = 500;\nconst MAX_INTERVAL_MSEC = 60_000;\nconst MAX_ELAPSED_TIME_MSEC = 900_000;\nconst MAX_ITERATIONS = 10;\n\nexport type BackoffStrategy = {\n  next: () => number | null;\n  currentInterval?: number;\n  count?: number;\n  ellapsedTimeInMsec?: number;\n};\n\nexport type BackoffStrategyArgs = {\n  maxIterations?: number;\n  maxElapsedTime?: number;\n};\n\nexport type BackoffStrategyFactory = (args?: BackoffStrategyArgs) => BackoffStrategy;\n\n// export type BackoffStrategyGenerator = Generator<number, void, unknown>;\n\nexport type ExponentialBackoffOptions = {\n  initialInterval?: number;\n  randomizationFactor?: number;\n  multiplier?: number;\n  maxInterval?: number;\n  maxElapsedTime?: number;\n  maxIterations?: number;\n  date?: DateConstructor;\n};\n\n/**\n * Exponential backoff strategy.\n */\nexport class ExponentialBackoff {\n  #currentInterval: number;\n  #randomizationFactor: number;\n  #multiplier: number;\n  #maxInterval: number;\n  #startTime: number;\n  #maxElapsedTime: number;\n  #maxIterations: number;\n  #date: DateConstructor;\n  #count = 0;\n\n  static default = {\n    initialInterval: INITIAL_INTERVAL_MSEC,\n    randomizationFactor: RANDOMIZATION_FACTOR,\n    multiplier: MULTIPLIER,\n    maxInterval: MAX_INTERVAL_MSEC,\n    // 1 minute\n    maxElapsedTime: MAX_ELAPSED_TIME_MSEC,\n    maxIterations: MAX_ITERATIONS,\n    date: Date,\n  };\n\n  constructor(options: ExponentialBackoffOptions = ExponentialBackoff.default) {\n    const {\n      initialInterval = INITIAL_INTERVAL_MSEC,\n      randomizationFactor = RANDOMIZATION_FACTOR,\n      multiplier = MULTIPLIER,\n      maxInterval = MAX_INTERVAL_MSEC,\n      maxElapsedTime = MAX_ELAPSED_TIME_MSEC,\n      maxIterations = MAX_ITERATIONS,\n      date = Date,\n    } = options;\n    this.#currentInterval = initialInterval;\n    this.#randomizationFactor = randomizationFactor;\n    this.#multiplier = multiplier;\n    this.#maxInterval = maxInterval;\n    this.#date = date;\n    this.#startTime = date.now();\n    this.#maxElapsedTime = maxElapsedTime;\n    this.#maxIterations = maxIterations;\n  }\n\n  get ellapsedTimeInMsec() {\n    return this.#date.now() - this.#startTime;\n  }\n\n  get currentInterval() {\n    return this.#currentInterval;\n  }\n\n  get count() {\n    return this.#count;\n  }\n\n  get randomValueFromInterval() {\n    const delta = this.#randomizationFactor * this.#currentInterval;\n    const min = this.#currentInterval - delta;\n    const max = this.#currentInterval + delta;\n    return Math.random() * (max - min) + min;\n  }\n\n  public incrementCurrentInterval() {\n    this.#currentInterval = Math.min(this.#currentInterval * this.#multiplier, this.#maxInterval);\n    this.#count++;\n\n    return this.#currentInterval;\n  }\n\n  public next() {\n    if (this.ellapsedTimeInMsec >= this.#maxElapsedTime || this.#count >= this.#maxIterations) {\n      return null;\n    } else {\n      this.incrementCurrentInterval();\n      return this.randomValueFromInterval;\n    }\n  }\n}\n/**\n * Utility function to create an exponential backoff iterator.\n * @param options - for the exponential backoff\n * @returns an iterator that yields the next delay in the exponential backoff\n * @yields the next delay in the exponential backoff\n */\nexport function* exponentialBackoff(\n  options: ExponentialBackoffOptions = ExponentialBackoff.default,\n) {\n  const backoff = new ExponentialBackoff(options);\n\n  let next = backoff.next();\n  while (next) {\n    yield next;\n    next = backoff.next();\n  }\n}\n", "import { type RequestId } from '../request_id.ts';\nimport {\n  type CreateCertificateOptions,\n  Certificate,\n  lookupResultToBuffer,\n} from '../certificate.ts';\nimport { type Agent, type ReadStateResponse } from '../agent/api.ts';\nimport { Principal } from '@dfinity/principal';\nimport {\n  CertifiedRejectErrorCode,\n  ExternalError,\n  InputError,\n  InvalidReadStateRequestErrorCode,\n  MissingRootKeyErrorCode,\n  RejectError,\n  RequestStatusDoneNoReplyErrorCode,\n  UnknownError,\n  UNREACHABLE_ERROR,\n} from '../errors.ts';\n\nexport * as strategy from './strategy.ts';\nimport { defaultStrategy } from './strategy.ts';\nimport { ReadRequestType, type ReadStateRequest } from '../agent/http/types.ts';\nimport { RequestStatusResponseStatus } from '../agent/index.ts';\nimport { utf8ToBytes } from '@noble/hashes/utils';\nexport { defaultStrategy } from './strategy.ts';\n\nexport type PollStrategy = (\n  canisterId: Principal,\n  requestId: RequestId,\n  status: RequestStatusResponseStatus,\n) => Promise<void>;\n\nexport type PollStrategyFactory = () => PollStrategy;\n\ninterface SignedReadStateRequestWithExpiry extends ReadStateRequest {\n  body: {\n    content: Pick<ReadStateRequest, 'request_type' | 'ingress_expiry'>;\n  };\n}\n\n/**\n * Options for controlling polling behavior\n */\nexport interface PollingOptions {\n  /**\n   * A polling strategy that dictates how much and often we should poll the\n   * read_state endpoint to get the result of an update call.\n   * @default defaultStrategy()\n   */\n  strategy?: PollStrategy;\n\n  /**\n   * Whether to reuse the same signed request for polling or create a new unsigned request each time.\n   * @default false\n   */\n  preSignReadStateRequest?: boolean;\n\n  /**\n   * Optional replacement function that verifies the BLS signature of a certificate.\n   */\n  blsVerify?: CreateCertificateOptions['blsVerify'];\n\n  /**\n   * The request to use for polling. If not provided, a new request will be created.\n   * This is only used if `preSignReadStateRequest` is set to false.\n   */\n  request?: ReadStateRequest;\n}\n\nexport const DEFAULT_POLLING_OPTIONS: PollingOptions = {\n  strategy: defaultStrategy(),\n  preSignReadStateRequest: false,\n};\n\n/**\n * Check if an object has a property\n * @param value the object that might have the property\n * @param property the key of property we're looking for\n */\nfunction hasProperty<O extends object, P extends string>(\n  value: O,\n  property: P,\n): value is O & Record<P, unknown> {\n  return Object.prototype.hasOwnProperty.call(value, property);\n}\n\nfunction isObjectWithProperty<O extends object, P extends string>(\n  value: unknown,\n  property: P,\n): value is O & Record<P, unknown> {\n  return value !== null && typeof value === 'object' && hasProperty(value, property);\n}\n\nfunction hasFunction<O extends object, P extends string>(\n  value: O,\n  property: P,\n): value is O & Record<P, (...args: unknown[]) => unknown> {\n  return hasProperty(value, property) && typeof value[property] === 'function';\n}\n\n/**\n * Check if value is a signed read state request with expiry\n * @param value to check\n */\nfunction isSignedReadStateRequestWithExpiry(\n  value: unknown,\n): value is SignedReadStateRequestWithExpiry {\n  return (\n    isObjectWithProperty(value, 'body') &&\n    isObjectWithProperty(value.body, 'content') &&\n    (value.body.content as { request_type: ReadRequestType }).request_type ===\n      ReadRequestType.ReadState &&\n    isObjectWithProperty(value.body.content, 'ingress_expiry') &&\n    typeof value.body.content.ingress_expiry === 'object' &&\n    value.body.content.ingress_expiry !== null &&\n    hasFunction(value.body.content.ingress_expiry, 'toHash')\n  );\n}\n\n/**\n * Polls the IC to check the status of the given request then\n * returns the response bytes once the request has been processed.\n * @param agent The agent to use to poll read_state.\n * @param canisterId The effective canister ID.\n * @param requestId The Request ID to poll status for.\n * @param options polling options to control behavior\n */\nexport async function pollForResponse(\n  agent: Agent,\n  canisterId: Principal,\n  requestId: RequestId,\n  options: PollingOptions = {},\n): Promise<{\n  certificate: Certificate;\n  reply: Uint8Array;\n}> {\n  const path = [utf8ToBytes('request_status'), requestId];\n\n  let state: ReadStateResponse;\n  let currentRequest: ReadStateRequest | undefined;\n  const preSignReadStateRequest = options.preSignReadStateRequest ?? false;\n  if (preSignReadStateRequest) {\n    // If preSignReadStateRequest is true, we need to create a new request\n    currentRequest = await constructRequest({\n      paths: [path],\n      agent,\n      pollingOptions: options,\n    });\n    state = await agent.readState(canisterId, { paths: [path] }, undefined, currentRequest);\n  } else {\n    // If preSignReadStateRequest is false, we use the default strategy and sign the request each time\n    state = await agent.readState(canisterId, { paths: [path] });\n  }\n\n  if (agent.rootKey == null) {\n    throw ExternalError.fromCode(new MissingRootKeyErrorCode());\n  }\n  const cert = await Certificate.create({\n    certificate: state.certificate,\n    rootKey: agent.rootKey,\n    canisterId: canisterId,\n    blsVerify: options.blsVerify,\n    agent,\n  });\n\n  const maybeBuf = lookupResultToBuffer(cert.lookup_path([...path, utf8ToBytes('status')]));\n  let status;\n  if (typeof maybeBuf === 'undefined') {\n    // Missing requestId means we need to wait\n    status = RequestStatusResponseStatus.Unknown;\n  } else {\n    status = new TextDecoder().decode(maybeBuf);\n  }\n\n  switch (status) {\n    case RequestStatusResponseStatus.Replied: {\n      return {\n        reply: lookupResultToBuffer(cert.lookup_path([...path, 'reply']))!,\n        certificate: cert,\n      };\n    }\n\n    case RequestStatusResponseStatus.Received:\n    case RequestStatusResponseStatus.Unknown:\n    case RequestStatusResponseStatus.Processing: {\n      // Execute the polling strategy, then retry.\n      const strategy = options.strategy ?? defaultStrategy();\n      await strategy(canisterId, requestId, status);\n      return pollForResponse(agent, canisterId, requestId, {\n        ...options,\n        request: currentRequest,\n      });\n    }\n\n    case RequestStatusResponseStatus.Rejected: {\n      const rejectCode = new Uint8Array(\n        lookupResultToBuffer(cert.lookup_path([...path, 'reject_code']))!,\n      )[0];\n      const rejectMessage = new TextDecoder().decode(\n        lookupResultToBuffer(cert.lookup_path([...path, 'reject_message']))!,\n      );\n      const errorCodeBuf = lookupResultToBuffer(cert.lookup_path([...path, 'error_code']));\n      const errorCode = errorCodeBuf ? new TextDecoder().decode(errorCodeBuf) : undefined;\n      throw RejectError.fromCode(\n        new CertifiedRejectErrorCode(requestId, rejectCode, rejectMessage, errorCode),\n      );\n    }\n\n    case RequestStatusResponseStatus.Done:\n      // This is _technically_ not an error, but we still didn't see the `Replied` status so\n      // we don't know the result and cannot decode it.\n      throw UnknownError.fromCode(new RequestStatusDoneNoReplyErrorCode(requestId));\n  }\n  throw UNREACHABLE_ERROR;\n}\n\n// Determine if we should reuse the read state request or create a new one\n// based on the options provided.\n\n/**\n * Constructs a read state request for the given paths.\n * If the request is already signed and has an expiry, it will be returned as is.\n * Otherwise, a new request will be created.\n * @param options The options to use for creating the request.\n * @param options.paths The paths to read from.\n * @param options.agent The agent to use to create the request.\n * @param options.pollingOptions The options to use for creating the request.\n * @returns The read state request.\n */\nexport async function constructRequest(options: {\n  paths: Uint8Array[][];\n  agent: Agent;\n  pollingOptions: PollingOptions;\n}): Promise<ReadStateRequest> {\n  const { paths, agent, pollingOptions } = options;\n  if (pollingOptions.request && isSignedReadStateRequestWithExpiry(pollingOptions.request)) {\n    return pollingOptions.request;\n  }\n  const request = await agent.createReadStateRequest?.(\n    {\n      paths,\n    },\n    undefined,\n  );\n  if (!isSignedReadStateRequestWithExpiry(request)) {\n    throw InputError.fromCode(new InvalidReadStateRequestErrorCode(request));\n  }\n  return request;\n}\n", "import { Principal } from '@dfinity/principal';\nimport { RequestStatusResponseStatus } from '../agent/index.ts';\nimport { type PollStrategy } from './index.ts';\nimport { type RequestId } from '../request_id.ts';\nimport { ProtocolError, TimeoutWaitingForResponseErrorCode } from '../errors.ts';\n\nexport type Predicate<T> = (\n  canisterId: Principal,\n  requestId: RequestId,\n  status: RequestStatusResponseStatus,\n) => Promise<T>;\n\nconst FIVE_MINUTES_IN_MSEC = 5 * 60 * 1000;\n\n/**\n * A best practices polling strategy: wait 2 seconds before the first poll, then 1 second\n * with an exponential backoff factor of 1.2. Timeout after 5 minutes.\n */\nexport function defaultStrategy(): PollStrategy {\n  return chain(conditionalDelay(once(), 1000), backoff(1000, 1.2), timeout(FIVE_MINUTES_IN_MSEC));\n}\n\n/**\n * Predicate that returns true once.\n */\nexport function once(): Predicate<boolean> {\n  let first = true;\n  return async () => {\n    if (first) {\n      first = false;\n      return true;\n    }\n    return false;\n  };\n}\n\n/**\n * Delay the polling once.\n * @param condition A predicate that indicates when to delay.\n * @param timeInMsec The amount of time to delay.\n */\nexport function conditionalDelay(condition: Predicate<boolean>, timeInMsec: number): PollStrategy {\n  return async (\n    canisterId: Principal,\n    requestId: RequestId,\n    status: RequestStatusResponseStatus,\n  ) => {\n    if (await condition(canisterId, requestId, status)) {\n      return new Promise(resolve => setTimeout(resolve, timeInMsec));\n    }\n  };\n}\n\n/**\n * Error out after a maximum number of polling has been done.\n * @param count The maximum attempts to poll.\n */\nexport function maxAttempts(count: number): PollStrategy {\n  let attempts = count;\n  return async (\n    _canisterId: Principal,\n    requestId: RequestId,\n    status: RequestStatusResponseStatus,\n  ) => {\n    if (--attempts <= 0) {\n      throw ProtocolError.fromCode(\n        new TimeoutWaitingForResponseErrorCode(\n          `Failed to retrieve a reply for request after ${count} attempts`,\n          requestId,\n          status,\n        ),\n      );\n    }\n  };\n}\n\n/**\n * Throttle polling.\n * @param throttleInMsec Amount in millisecond to wait between each polling.\n */\nexport function throttle(throttleInMsec: number): PollStrategy {\n  return () => new Promise(resolve => setTimeout(resolve, throttleInMsec));\n}\n\n/**\n * Reject a call after a certain amount of time.\n * @param timeInMsec Time in milliseconds before the polling should be rejected.\n */\nexport function timeout(timeInMsec: number): PollStrategy {\n  const end = Date.now() + timeInMsec;\n  return async (\n    _canisterId: Principal,\n    requestId: RequestId,\n    status: RequestStatusResponseStatus,\n  ) => {\n    if (Date.now() > end) {\n      throw ProtocolError.fromCode(\n        new TimeoutWaitingForResponseErrorCode(\n          `Request timed out after ${timeInMsec} msec`,\n          requestId,\n          status,\n        ),\n      );\n    }\n  };\n}\n\n/**\n * A strategy that throttle, but using an exponential backoff strategy.\n * @param startingThrottleInMsec The throttle in milliseconds to start with.\n * @param backoffFactor The factor to multiple the throttle time between every poll. For\n *   example if using 2, the throttle will double between every run.\n */\nexport function backoff(startingThrottleInMsec: number, backoffFactor: number): PollStrategy {\n  let currentThrottling = startingThrottleInMsec;\n\n  return () =>\n    new Promise(resolve =>\n      setTimeout(() => {\n        currentThrottling *= backoffFactor;\n        resolve();\n      }, currentThrottling),\n    );\n}\n\n/**\n * Chain multiple polling strategy. This _chains_ the strategies, so if you pass in,\n * say, two throttling strategy of 1 second, it will result in a throttle of 2 seconds.\n * @param strategies A strategy list to chain.\n */\nexport function chain(...strategies: PollStrategy[]): PollStrategy {\n  return async (\n    canisterId: Principal,\n    requestId: RequestId,\n    status: RequestStatusResponseStatus,\n  ) => {\n    for (const a of strategies) {\n      await a(canisterId, requestId, status);\n    }\n  };\n}\n", "import { Principal } from '@dfinity/principal';\nimport * as CanisterStatus from './canisterStatus/index.ts';\nimport { IDL } from '@dfinity/candid';\nimport { HttpAgent } from './agent/http/index.ts';\nimport { Actor, type ActorSubclass } from './actor.ts';\n\n/**\n * Retrieves the Candid interface for the specified canister.\n * @param canisterId A string corresponding to the canister ID\n * @param agent The agent to use for the request (usually an `HttpAgent`)\n * @returns Candid source code\n */\nexport async function fetchCandid(canisterId: string, agent?: HttpAgent): Promise<string> {\n  if (!agent) {\n    // Create an anonymous `HttpAgent` (adapted from Candid UI)\n    agent = await HttpAgent.create();\n  }\n\n  // Attempt to use canister metadata\n  const status = await CanisterStatus.request({\n    agent,\n    canisterId: Principal.fromText(canisterId),\n    paths: ['candid'],\n  });\n  const candid = status.get('candid') as string | undefined;\n  if (candid) {\n    return candid;\n  }\n\n  // Use `__get_candid_interface_tmp_hack` for canisters without Candid metadata\n  const tmpHackInterface: IDL.InterfaceFactory = ({ IDL }) =>\n    IDL.Service({\n      __get_candid_interface_tmp_hack: IDL.Func([], [IDL.Text], ['query']),\n    });\n  const actor: ActorSubclass = Actor.createActor(tmpHackInterface, { agent, canisterId });\n  return (await actor.__get_candid_interface_tmp_hack()) as string;\n}\n"],
  "mappings": "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YAAMO,KAAI,GAAG,SAASL,EAAC;AACvB,aAAOK;IACT;IACA,WAAW;IACX,SAAS;IACT,WAAW;MACT,UAAU,OAAiB;AACzB,eAAO,KAAK;AACZ,eAAO,qBAAqB,KAAK;MACnC;MACA,QAAQ,KAAQ;AACd,eAAO,qBAAqB,GAAG;MACjC;MACA,QAAQ,OAA4B;AAClC,eAAO,mBAAmB,KAAK;MACjC;MACA,WAAW,OAA4B;AACrC,eAAO,mBAAmB,KAAK;MACjC;MACA,MAAM,OAA4B;AAChC,eAAO,WAAW,mBAAmB,KAAK,CAAC;MAC7C;;;EAGJ,QAAQ;IACN,aAAa;;IACb,GAAG,mBAAmB;;IACtB,WAAW;IACX,WAAW;;EAEb;EACA,MAAM;CACP;AAGD,IAAM,eAAe,WACnB,KACA;;EAEE;IACE;MACE;MACA;;IAEF;MACE;MACA;;IAEF;MACE;MACA;;IAEF;MACE;MACA;;;;EAIJ;IACE;MACE;MACA;;IAEF;MACE;MACA;;IAEF,CAAC,OAAO,KAAK;;;;EAGf;IACE;MACE;MACA;;IAEF;MACE;MACA;;IAEF;MACE;MACA;;IAEF;MACE;MACA;;;;EAIJ;IACE;MACE;MACA;;IAEF;MACE;MACA;;IAEF;MACE;MACA;;IAEF,CAAC,OAAO,KAAK;;;EAEf,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,IAAI,aAAa,KAAK,IAAI,MAAM,CAAgB,CAAC,CAAC,CAK9E;AAGH,IAAM,eAAe,WACnB,IACA;;EAEE;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;EAGF;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;;EAGF;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;EAGF;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;EAEF,IAAI,CAAC,MAAM,EAAE,IAAI,CAACC,OAAM,OAAOA,EAAC,CAAC,CAAC,CAA6B;AAInE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",
  "names": ["import_dist", "import_dist", "import_dist", "import_dist", "ReplicaRejectCode", "QueryResponseStatus", "import_dist", "import_dist", "ErrorKindEnum", "request", "import_dist", "import_dist", "import_dist", "a", "b", "request", "x", "import_dist", "request", "import_dist", "import_dist", "DecodingError", "message", "CBOR_SELF_DESCRIBED_TAG", "CBOR_STOP_CODE", "CborSimpleType", "CborMajorType", "TOKEN_VALUE_MAX", "ONE_BYTE_MAX", "TWO_BYTES_MAX", "FOUR_BYTES_MAX", "EIGHT_BYTES_MAX", "CborMinorType", "IS_LITTLE_ENDIAN", "isNil", "value", "resizeUint8Array", "array", "newSize", "newArray", "textDecoder", "decodeMajorType", "firstByte", "decodeInfo", "cborBytes", "dataView", "bytesOffset", "decode", "input", "reviver", "decodedItem", "decodeItem", "majorType", "info", "decodeNextByte", "decodeUnsignedInteger", "decodeNegativeInteger", "decodeByteString", "decodeTextString", "decodeArray", "decodeMap", "decodeTag", "decodeSimple", "arrayLength", "values", "i", "mapLength", "map", "key", "byteLength", "safeByteLength", "bytes", "EncodingError", "INITIAL_BUFFER_SIZE", "SAFE_BUFFER_END_OFFSET", "textEncoder", "encodeMajorType", "target", "targetView", "mapEntries", "encodeWithSelfDescribedTag", "value", "replacer", "bytesOffset", "transformedValue", "encodeTag", "CBOR_SELF_DESCRIBED_TAG", "target", "encodeItem", "item", "SAFE_BUFFER_END_OFFSET", "resizeUint8Array", "targetView", "encodeSimple", "encodeNumber", "encodeTextString", "encodeByteString", "encodeArray", "encodeMap", "EncodingError", "items", "encodeHeader", "CborMajorType", "map", "mapEntries", "key", "majorType", "TOKEN_VALUE_MAX", "encodeMajorType", "ONE_BYTE_MAX", "CborMinorType", "TWO_BYTES_MAX", "IS_LITTLE_ENDIAN", "FOUR_BYTES_MAX", "EIGHT_BYTES_MAX", "mapSimple", "CborSimpleType", "encodeBytes", "encodeInteger", "encodeUnsignedInteger", "encodeNegativeInteger", "textEncoder", "tag", "value", "import_dist", "import_dist", "import_dist", "Endpoint", "SubmitRequestType", "ReadRequestType", "request", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "a", "b", "k", "v", "import_dist", "import_dist", "_0n", "_1n", "a", "b", "x", "_0n", "a", "b", "y", "_1n", "v", "q", "r", "m", "Fp", "P", "Q", "S", "Z", "M", "c", "R", "p", "d", "Fp", "_1n", "_0n", "_1n", "a", "b", "c", "Fp", "_1n", "_0n", "_1n", "c", "p", "W", "window", "s", "P", "d", "j", "wbits", "p", "_0n", "Fp", "Fn", "_b", "import_dist", "a", "b", "H", "k", "p", "m", "L", "j", "x", "y", "P", "N", "import_dist", "import_dist", "_2n", "k", "k2", "_0n", "_1n", "_0n", "_1n", "_2n", "_3n", "_4n", "Fn", "Fp", "x", "y", "L", "x2", "k", "p", "X", "Y", "Z", "P", "a", "b", "endo", "p2", "Q", "q", "o", "v", "tv5", "c1", "c2", "A", "B", "c", "Fp", "Fn", "Fp", "a", "b", "x", "x2", "c", "Fn", "_1n", "_0n", "_1n", "_2n", "_3n", "a", "Fp2", "Fp12", "p", "x", "y", "Q", "P", "m", "b", "G", "S", "msg", "s", "Fp", "Fp6", "verify", "import_dist", "_0n", "_1n", "_2n", "_3n", "Fp", "a", "j", "Fp2", "x", "y", "x2", "y2", "c", "P", "p", "G2psi", "G2psi2", "b", "d", "a2", "b2", "_", "Fp6", "z", "Fp12", "_0n", "_1n", "_2n", "_3n", "_4n", "x", "L", "P", "y", "b", "p", "c", "Q", "j", "import_dist", "NodeType", "s", "x", "a", "b", "_a", "_b", "d", "LookupPathStatus", "LookupSubtreeStatus", "LookupLabelStatus", "v", "r", "path", "data", "buf", "import_dist", "import_dist", "_0n", "_1n", "_2n", "_8n", "Fp", "x", "y", "x2", "y2", "Fn", "uvRatio", "v", "p", "X", "Y", "Z", "a", "d", "T", "X2", "Y2", "Z2", "A", "B", "C", "E", "G", "F", "H", "randomBytes", "adjustScalarBytes", "r", "R", "k", "s", "verify", "c", "eddsa", "import_dist", "_0n", "_1n", "_2n", "P", "adjustScalarBytes", "k", "A", "B", "E", "C", "_0n", "_1n", "_2n", "_3n", "_5n", "_8n", "x", "P", "x2", "v", "Fp", "y", "d", "mod", "r", "c", "s", "s2", "a", "I", "X", "Y", "Z", "T", "import_dist", "import_dist", "import_dist", "import_dist", "RequestStatusResponseStatus", "host", "_a", "x", "backoff", "request", "_identity", "p", "r", "r2", "_b", "import_dist", "import_dist", "a", "_a", "request", "blsVerify", "_a", "_b", "response", "import_dist"]
}
